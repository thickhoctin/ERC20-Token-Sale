{
	"id": "c4e74468dbe4aaf020cf0b4b9602a010",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.26",
	"solcLongVersion": "0.8.26+commit.8a97fa7a",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/SampleTokenSale.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.26;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract TokenSale{\r\n\r\n    uint public tokenPriceInWei = 1 ether;\r\n    ERC20 public token;\r\n\r\n    address tokenOwner;\r\n\r\n    constructor(address _token){\r\n        tokenOwner = msg.sender;\r\n        token = ERC20(_token);\r\n    }\r\n\r\n    function purchaseACoffe() public payable{\r\n        require(msg.value >= tokenPriceInWei, \"You do not have enough eth.\");\r\n        uint tokenToTransfer = msg.value / tokenPriceInWei;\r\n        uint remainder = msg.value - tokenToTransfer * tokenPriceInWei;\r\n        token.transferFrom(tokenOwner, msg.sender, tokenToTransfer * 10 * token.decimals());\r\n        payable(msg.sender).transfer(remainder); // send the rest of money back\r\n\r\n    }\r\n\r\n\r\n}"
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance < type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC-721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC-1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"IERC1155Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC1155InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "idsLength",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "valuesLength",
									"type": "uint256"
								}
							],
							"name": "ERC1155InvalidArrayLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC1155MissingApprovalForAll",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC-1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.",
						"errors": {
							"ERC1155InsufficientBalance(address,uint256,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC1155InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC1155InvalidArrayLength(uint256,uint256)": [
								{
									"details": "Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.",
									"params": {
										"idsLength": "Length of the array of token identifiers",
										"valuesLength": "Length of the array of token amounts"
									}
								}
							],
							"ERC1155InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC1155InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC1155InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC1155MissingApprovalForAll(address,address)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"owner": "Address of the current owner of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC-1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC1155Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC20Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC-20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC-20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC20Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC721Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721IncorrectOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721InsufficientApproval",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC721InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721NonexistentToken",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC-721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.",
						"errors": {
							"ERC721IncorrectOwner(address,uint256,address)": [
								{
									"details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
									"params": {
										"owner": "Address of the current owner of a token.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InsufficientApproval(address,uint256)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC721InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC721InvalidOwner(address)": [
								{
									"details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20. Used in balance queries.",
									"params": {
										"owner": "Address of the current owner of a token."
									}
								}
							],
							"ERC721InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC721InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC721NonexistentToken(uint256)": [
								{
									"details": "Indicates a `tokenId` whose `owner` is the zero address.",
									"params": {
										"tokenId": "Identifier number of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC-721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC721Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC-20 applications.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC-20 applications.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x6ef9389a2c07bc40d8a7ba48914724ab2c108fac391ce12314f01321813e6368\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7a5cb39b1e6df68f4dd9a5e76e853d745a74ffb3dfd7df4ae4d2ace6992a171\",\"dweb:/ipfs/QmPbzKR19rdM8X3PLQjsmHRepUKhvoZnedSR63XyGtXZib\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 159,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 165,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 167,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 169,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 171,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC-20 standard as defined in the ERC.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-20 standard as defined in the ERC.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"IERC20Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC-20 standard.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC-20 standard.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/SampleTokenSale.sol": {
				"TokenSale": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_token",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "purchaseACoffe",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token",
							"outputs": [
								{
									"internalType": "contract ERC20",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tokenPriceInWei",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/SampleTokenSale.sol\":119:798  contract TokenSale{... */\n  mstore(0x40, 0x80)\n    /* \"contracts/SampleTokenSale.sol\":176:183  1 ether */\n  0x0de0b6b3a7640000\n    /* \"contracts/SampleTokenSale.sol\":146:183  uint public tokenPriceInWei = 1 ether */\n  0x00\n  sstore\n    /* \"contracts/SampleTokenSale.sol\":244:345  constructor(address _token){... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  dup2\n  add\n  0x40\n  mstore\n  dup2\n  add\n  swap1\n  tag_2\n  swap2\n  swap1\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"contracts/SampleTokenSale.sol\":295:305  msg.sender */\n  caller\n    /* \"contracts/SampleTokenSale.sol\":282:292  tokenOwner */\n  0x02\n  0x00\n    /* \"contracts/SampleTokenSale.sol\":282:305  tokenOwner = msg.sender */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/SampleTokenSale.sol\":330:336  _token */\n  dup1\n    /* \"contracts/SampleTokenSale.sol\":316:321  token */\n  0x01\n  0x00\n    /* \"contracts/SampleTokenSale.sol\":316:337  token = ERC20(_token) */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/SampleTokenSale.sol\":244:345  constructor(address _token){... */\n  pop\n    /* \"contracts/SampleTokenSale.sol\":119:798  contract TokenSale{... */\n  jump(tag_6)\n    /* \"#utility.yul\":88:205   */\ntag_8:\n    /* \"#utility.yul\":197:198   */\n  0x00\n    /* \"#utility.yul\":194:195   */\n  dup1\n    /* \"#utility.yul\":187:199   */\n  revert\n    /* \"#utility.yul\":334:460   */\ntag_10:\n    /* \"#utility.yul\":371:378   */\n  0x00\n    /* \"#utility.yul\":411:453   */\n  0xffffffffffffffffffffffffffffffffffffffff\n    /* \"#utility.yul\":404:409   */\n  dup3\n    /* \"#utility.yul\":400:454   */\n  and\n    /* \"#utility.yul\":389:454   */\n  swap1\n  pop\n    /* \"#utility.yul\":334:460   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":466:562   */\ntag_11:\n    /* \"#utility.yul\":503:510   */\n  0x00\n    /* \"#utility.yul\":532:556   */\n  tag_20\n    /* \"#utility.yul\":550:555   */\n  dup3\n    /* \"#utility.yul\":532:556   */\n  tag_10\n  jump\t// in\ntag_20:\n    /* \"#utility.yul\":521:556   */\n  swap1\n  pop\n    /* \"#utility.yul\":466:562   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":568:690   */\ntag_12:\n    /* \"#utility.yul\":641:665   */\n  tag_22\n    /* \"#utility.yul\":659:664   */\n  dup2\n    /* \"#utility.yul\":641:665   */\n  tag_11\n  jump\t// in\ntag_22:\n    /* \"#utility.yul\":634:639   */\n  dup2\n    /* \"#utility.yul\":631:666   */\n  eq\n    /* \"#utility.yul\":621:684   */\n  tag_23\n  jumpi\n    /* \"#utility.yul\":680:681   */\n  0x00\n    /* \"#utility.yul\":677:678   */\n  dup1\n    /* \"#utility.yul\":670:682   */\n  revert\n    /* \"#utility.yul\":621:684   */\ntag_23:\n    /* \"#utility.yul\":568:690   */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":696:839   */\ntag_13:\n    /* \"#utility.yul\":753:758   */\n  0x00\n    /* \"#utility.yul\":784:790   */\n  dup2\n    /* \"#utility.yul\":778:791   */\n  mload\n    /* \"#utility.yul\":769:791   */\n  swap1\n  pop\n    /* \"#utility.yul\":800:833   */\n  tag_25\n    /* \"#utility.yul\":827:832   */\n  dup2\n    /* \"#utility.yul\":800:833   */\n  tag_12\n  jump\t// in\ntag_25:\n    /* \"#utility.yul\":696:839   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":845:1196   */\ntag_3:\n    /* \"#utility.yul\":915:921   */\n  0x00\n    /* \"#utility.yul\":964:966   */\n  0x20\n    /* \"#utility.yul\":952:961   */\n  dup3\n    /* \"#utility.yul\":943:950   */\n  dup5\n    /* \"#utility.yul\":939:962   */\n  sub\n    /* \"#utility.yul\":935:967   */\n  slt\n    /* \"#utility.yul\":932:1051   */\n  iszero\n  tag_27\n  jumpi\n    /* \"#utility.yul\":970:1049   */\n  tag_28\n  tag_8\n  jump\t// in\ntag_28:\n    /* \"#utility.yul\":932:1051   */\ntag_27:\n    /* \"#utility.yul\":1090:1091   */\n  0x00\n    /* \"#utility.yul\":1115:1179   */\n  tag_29\n    /* \"#utility.yul\":1171:1178   */\n  dup5\n    /* \"#utility.yul\":1162:1168   */\n  dup3\n    /* \"#utility.yul\":1151:1160   */\n  dup6\n    /* \"#utility.yul\":1147:1169   */\n  add\n    /* \"#utility.yul\":1115:1179   */\n  tag_13\n  jump\t// in\ntag_29:\n    /* \"#utility.yul\":1105:1179   */\n  swap2\n  pop\n    /* \"#utility.yul\":1061:1189   */\n  pop\n    /* \"#utility.yul\":845:1196   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"contracts/SampleTokenSale.sol\":119:798  contract TokenSale{... */\ntag_6:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/SampleTokenSale.sol\":119:798  contract TokenSale{... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x2f8de810\n      eq\n      tag_2\n      jumpi\n      dup1\n      0xe7e78652\n      eq\n      tag_3\n      jumpi\n      dup1\n      0xfc0c546a\n      eq\n      tag_4\n      jumpi\n    tag_1:\n      0x00\n      dup1\n      revert\n        /* \"contracts/SampleTokenSale.sol\":146:183  uint public tokenPriceInWei = 1 ether */\n    tag_2:\n      callvalue\n      dup1\n      iszero\n      tag_5\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_5:\n      pop\n      tag_6\n      tag_7\n      jump\t// in\n    tag_6:\n      mload(0x40)\n      tag_8\n      swap2\n      swap1\n      tag_9\n      jump\t// in\n    tag_8:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/SampleTokenSale.sol\":353:791  function purchaseACoffe() public payable{... */\n    tag_3:\n      tag_10\n      tag_11\n      jump\t// in\n    tag_10:\n      stop\n        /* \"contracts/SampleTokenSale.sol\":190:208  ERC20 public token */\n    tag_4:\n      callvalue\n      dup1\n      iszero\n      tag_12\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_12:\n      pop\n      tag_13\n      tag_14\n      jump\t// in\n    tag_13:\n      mload(0x40)\n      tag_15\n      swap2\n      swap1\n      tag_16\n      jump\t// in\n    tag_15:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/SampleTokenSale.sol\":146:183  uint public tokenPriceInWei = 1 ether */\n    tag_7:\n      sload(0x00)\n      dup2\n      jump\t// out\n        /* \"contracts/SampleTokenSale.sol\":353:791  function purchaseACoffe() public payable{... */\n    tag_11:\n        /* \"contracts/SampleTokenSale.sol\":425:440  tokenPriceInWei */\n      sload(0x00)\n        /* \"contracts/SampleTokenSale.sol\":412:421  msg.value */\n      callvalue\n        /* \"contracts/SampleTokenSale.sol\":412:440  msg.value >= tokenPriceInWei */\n      lt\n      iszero\n        /* \"contracts/SampleTokenSale.sol\":404:472  require(msg.value >= tokenPriceInWei, \"You do not have enough eth.\") */\n      tag_18\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_19\n      swap1\n      tag_20\n      jump\t// in\n    tag_19:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_18:\n        /* \"contracts/SampleTokenSale.sol\":483:503  uint tokenToTransfer */\n      0x00\n        /* \"contracts/SampleTokenSale.sol\":518:533  tokenPriceInWei */\n      dup1\n      sload\n        /* \"contracts/SampleTokenSale.sol\":506:515  msg.value */\n      callvalue\n        /* \"contracts/SampleTokenSale.sol\":506:533  msg.value / tokenPriceInWei */\n      tag_21\n      swap2\n      swap1\n      tag_22\n      jump\t// in\n    tag_21:\n        /* \"contracts/SampleTokenSale.sol\":483:533  uint tokenToTransfer = msg.value / tokenPriceInWei */\n      swap1\n      pop\n        /* \"contracts/SampleTokenSale.sol\":544:558  uint remainder */\n      0x00\n        /* \"contracts/SampleTokenSale.sol\":591:606  tokenPriceInWei */\n      dup1\n      sload\n        /* \"contracts/SampleTokenSale.sol\":573:588  tokenToTransfer */\n      dup3\n        /* \"contracts/SampleTokenSale.sol\":573:606  tokenToTransfer * tokenPriceInWei */\n      tag_23\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_23:\n        /* \"contracts/SampleTokenSale.sol\":561:570  msg.value */\n      callvalue\n        /* \"contracts/SampleTokenSale.sol\":561:606  msg.value - tokenToTransfer * tokenPriceInWei */\n      tag_25\n      swap2\n      swap1\n      tag_26\n      jump\t// in\n    tag_25:\n        /* \"contracts/SampleTokenSale.sol\":544:606  uint remainder = msg.value - tokenToTransfer * tokenPriceInWei */\n      swap1\n      pop\n        /* \"contracts/SampleTokenSale.sol\":617:622  token */\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/SampleTokenSale.sol\":617:635  token.transferFrom */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x23b872dd\n        /* \"contracts/SampleTokenSale.sol\":636:646  tokenOwner */\n      0x02\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/SampleTokenSale.sol\":648:658  msg.sender */\n      caller\n        /* \"contracts/SampleTokenSale.sol\":683:688  token */\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/SampleTokenSale.sol\":683:697  token.decimals */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x313ce567\n        /* \"contracts/SampleTokenSale.sol\":683:699  token.decimals() */\n      mload(0x40)\n      dup2\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_28\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_28:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_29\n      swap2\n      swap1\n      tag_30\n      jump\t// in\n    tag_29:\n        /* \"contracts/SampleTokenSale.sol\":660:699  tokenToTransfer * 10 * token.decimals() */\n      0xff\n      and\n        /* \"contracts/SampleTokenSale.sol\":678:680  10 */\n      0x0a\n        /* \"contracts/SampleTokenSale.sol\":660:675  tokenToTransfer */\n      dup8\n        /* \"contracts/SampleTokenSale.sol\":660:680  tokenToTransfer * 10 */\n      tag_31\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_31:\n        /* \"contracts/SampleTokenSale.sol\":660:699  tokenToTransfer * 10 * token.decimals() */\n      tag_32\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_32:\n        /* \"contracts/SampleTokenSale.sol\":617:700  token.transferFrom(tokenOwner, msg.sender, tokenToTransfer * 10 * token.decimals()) */\n      mload(0x40)\n      dup5\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_33\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_34\n      jump\t// in\n    tag_33:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_36\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_36:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_37\n      swap2\n      swap1\n      tag_38\n      jump\t// in\n    tag_37:\n      pop\n        /* \"contracts/SampleTokenSale.sol\":719:729  msg.sender */\n      caller\n        /* \"contracts/SampleTokenSale.sol\":711:739  payable(msg.sender).transfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/SampleTokenSale.sol\":711:750  payable(msg.sender).transfer(remainder) */\n      0x08fc\n        /* \"contracts/SampleTokenSale.sol\":740:749  remainder */\n      dup3\n        /* \"contracts/SampleTokenSale.sol\":711:750  payable(msg.sender).transfer(remainder) */\n      swap1\n      dup2\n      iszero\n      mul\n      swap1\n      mload(0x40)\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup9\n      dup9\n      call\n      swap4\n      pop\n      pop\n      pop\n      pop\n      iszero\n      dup1\n      iszero\n      tag_40\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_40:\n      pop\n        /* \"contracts/SampleTokenSale.sol\":393:791  {... */\n      pop\n      pop\n        /* \"contracts/SampleTokenSale.sol\":353:791  function purchaseACoffe() public payable{... */\n      jump\t// out\n        /* \"contracts/SampleTokenSale.sol\":190:208  ERC20 public token */\n    tag_14:\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      jump\t// out\n        /* \"#utility.yul\":7:84   */\n    tag_41:\n        /* \"#utility.yul\":44:51   */\n      0x00\n        /* \"#utility.yul\":73:78   */\n      dup2\n        /* \"#utility.yul\":62:78   */\n      swap1\n      pop\n        /* \"#utility.yul\":7:84   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":90:208   */\n    tag_42:\n        /* \"#utility.yul\":177:201   */\n      tag_68\n        /* \"#utility.yul\":195:200   */\n      dup2\n        /* \"#utility.yul\":177:201   */\n      tag_41\n      jump\t// in\n    tag_68:\n        /* \"#utility.yul\":172:175   */\n      dup3\n        /* \"#utility.yul\":165:202   */\n      mstore\n        /* \"#utility.yul\":90:208   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":214:436   */\n    tag_9:\n        /* \"#utility.yul\":307:311   */\n      0x00\n        /* \"#utility.yul\":345:347   */\n      0x20\n        /* \"#utility.yul\":334:343   */\n      dup3\n        /* \"#utility.yul\":330:348   */\n      add\n        /* \"#utility.yul\":322:348   */\n      swap1\n      pop\n        /* \"#utility.yul\":358:429   */\n      tag_70\n        /* \"#utility.yul\":426:427   */\n      0x00\n        /* \"#utility.yul\":415:424   */\n      dup4\n        /* \"#utility.yul\":411:428   */\n      add\n        /* \"#utility.yul\":402:408   */\n      dup5\n        /* \"#utility.yul\":358:429   */\n      tag_42\n      jump\t// in\n    tag_70:\n        /* \"#utility.yul\":214:436   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":442:568   */\n    tag_43:\n        /* \"#utility.yul\":479:486   */\n      0x00\n        /* \"#utility.yul\":519:561   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":512:517   */\n      dup3\n        /* \"#utility.yul\":508:562   */\n      and\n        /* \"#utility.yul\":497:562   */\n      swap1\n      pop\n        /* \"#utility.yul\":442:568   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":574:634   */\n    tag_44:\n        /* \"#utility.yul\":602:605   */\n      0x00\n        /* \"#utility.yul\":623:628   */\n      dup2\n        /* \"#utility.yul\":616:628   */\n      swap1\n      pop\n        /* \"#utility.yul\":574:634   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":640:782   */\n    tag_45:\n        /* \"#utility.yul\":690:699   */\n      0x00\n        /* \"#utility.yul\":723:776   */\n      tag_74\n        /* \"#utility.yul\":741:775   */\n      tag_75\n        /* \"#utility.yul\":750:774   */\n      tag_76\n        /* \"#utility.yul\":768:773   */\n      dup5\n        /* \"#utility.yul\":750:774   */\n      tag_43\n      jump\t// in\n    tag_76:\n        /* \"#utility.yul\":741:775   */\n      tag_44\n      jump\t// in\n    tag_75:\n        /* \"#utility.yul\":723:776   */\n      tag_43\n      jump\t// in\n    tag_74:\n        /* \"#utility.yul\":710:776   */\n      swap1\n      pop\n        /* \"#utility.yul\":640:782   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":788:914   */\n    tag_46:\n        /* \"#utility.yul\":838:847   */\n      0x00\n        /* \"#utility.yul\":871:908   */\n      tag_78\n        /* \"#utility.yul\":902:907   */\n      dup3\n        /* \"#utility.yul\":871:908   */\n      tag_45\n      jump\t// in\n    tag_78:\n        /* \"#utility.yul\":858:908   */\n      swap1\n      pop\n        /* \"#utility.yul\":788:914   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":920:1059   */\n    tag_47:\n        /* \"#utility.yul\":983:992   */\n      0x00\n        /* \"#utility.yul\":1016:1053   */\n      tag_80\n        /* \"#utility.yul\":1047:1052   */\n      dup3\n        /* \"#utility.yul\":1016:1053   */\n      tag_46\n      jump\t// in\n    tag_80:\n        /* \"#utility.yul\":1003:1053   */\n      swap1\n      pop\n        /* \"#utility.yul\":920:1059   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1065:1222   */\n    tag_48:\n        /* \"#utility.yul\":1165:1215   */\n      tag_82\n        /* \"#utility.yul\":1209:1214   */\n      dup2\n        /* \"#utility.yul\":1165:1215   */\n      tag_47\n      jump\t// in\n    tag_82:\n        /* \"#utility.yul\":1160:1163   */\n      dup3\n        /* \"#utility.yul\":1153:1216   */\n      mstore\n        /* \"#utility.yul\":1065:1222   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1228:1476   */\n    tag_16:\n        /* \"#utility.yul\":1334:1338   */\n      0x00\n        /* \"#utility.yul\":1372:1374   */\n      0x20\n        /* \"#utility.yul\":1361:1370   */\n      dup3\n        /* \"#utility.yul\":1357:1375   */\n      add\n        /* \"#utility.yul\":1349:1375   */\n      swap1\n      pop\n        /* \"#utility.yul\":1385:1469   */\n      tag_84\n        /* \"#utility.yul\":1466:1467   */\n      0x00\n        /* \"#utility.yul\":1455:1464   */\n      dup4\n        /* \"#utility.yul\":1451:1468   */\n      add\n        /* \"#utility.yul\":1442:1448   */\n      dup5\n        /* \"#utility.yul\":1385:1469   */\n      tag_48\n      jump\t// in\n    tag_84:\n        /* \"#utility.yul\":1228:1476   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1482:1651   */\n    tag_49:\n        /* \"#utility.yul\":1566:1577   */\n      0x00\n        /* \"#utility.yul\":1600:1606   */\n      dup3\n        /* \"#utility.yul\":1595:1598   */\n      dup3\n        /* \"#utility.yul\":1588:1607   */\n      mstore\n        /* \"#utility.yul\":1640:1644   */\n      0x20\n        /* \"#utility.yul\":1635:1638   */\n      dup3\n        /* \"#utility.yul\":1631:1645   */\n      add\n        /* \"#utility.yul\":1616:1645   */\n      swap1\n      pop\n        /* \"#utility.yul\":1482:1651   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1657:1834   */\n    tag_50:\n        /* \"#utility.yul\":1797:1826   */\n      0x596f7520646f206e6f74206861766520656e6f756768206574682e0000000000\n        /* \"#utility.yul\":1793:1794   */\n      0x00\n        /* \"#utility.yul\":1785:1791   */\n      dup3\n        /* \"#utility.yul\":1781:1795   */\n      add\n        /* \"#utility.yul\":1774:1827   */\n      mstore\n        /* \"#utility.yul\":1657:1834   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1840:2206   */\n    tag_51:\n        /* \"#utility.yul\":1982:1985   */\n      0x00\n        /* \"#utility.yul\":2003:2070   */\n      tag_88\n        /* \"#utility.yul\":2067:2069   */\n      0x1b\n        /* \"#utility.yul\":2062:2065   */\n      dup4\n        /* \"#utility.yul\":2003:2070   */\n      tag_49\n      jump\t// in\n    tag_88:\n        /* \"#utility.yul\":1996:2070   */\n      swap2\n      pop\n        /* \"#utility.yul\":2079:2172   */\n      tag_89\n        /* \"#utility.yul\":2168:2171   */\n      dup3\n        /* \"#utility.yul\":2079:2172   */\n      tag_50\n      jump\t// in\n    tag_89:\n        /* \"#utility.yul\":2197:2199   */\n      0x20\n        /* \"#utility.yul\":2192:2195   */\n      dup3\n        /* \"#utility.yul\":2188:2200   */\n      add\n        /* \"#utility.yul\":2181:2200   */\n      swap1\n      pop\n        /* \"#utility.yul\":1840:2206   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2212:2631   */\n    tag_20:\n        /* \"#utility.yul\":2378:2382   */\n      0x00\n        /* \"#utility.yul\":2416:2418   */\n      0x20\n        /* \"#utility.yul\":2405:2414   */\n      dup3\n        /* \"#utility.yul\":2401:2419   */\n      add\n        /* \"#utility.yul\":2393:2419   */\n      swap1\n      pop\n        /* \"#utility.yul\":2465:2474   */\n      dup2\n        /* \"#utility.yul\":2459:2463   */\n      dup2\n        /* \"#utility.yul\":2455:2475   */\n      sub\n        /* \"#utility.yul\":2451:2452   */\n      0x00\n        /* \"#utility.yul\":2440:2449   */\n      dup4\n        /* \"#utility.yul\":2436:2453   */\n      add\n        /* \"#utility.yul\":2429:2476   */\n      mstore\n        /* \"#utility.yul\":2493:2624   */\n      tag_91\n        /* \"#utility.yul\":2619:2623   */\n      dup2\n        /* \"#utility.yul\":2493:2624   */\n      tag_51\n      jump\t// in\n    tag_91:\n        /* \"#utility.yul\":2485:2624   */\n      swap1\n      pop\n        /* \"#utility.yul\":2212:2631   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2637:2817   */\n    tag_52:\n        /* \"#utility.yul\":2685:2762   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":2682:2683   */\n      0x00\n        /* \"#utility.yul\":2675:2763   */\n      mstore\n        /* \"#utility.yul\":2782:2786   */\n      0x12\n        /* \"#utility.yul\":2779:2780   */\n      0x04\n        /* \"#utility.yul\":2772:2787   */\n      mstore\n        /* \"#utility.yul\":2806:2810   */\n      0x24\n        /* \"#utility.yul\":2803:2804   */\n      0x00\n        /* \"#utility.yul\":2796:2811   */\n      revert\n        /* \"#utility.yul\":2823:3003   */\n    tag_53:\n        /* \"#utility.yul\":2871:2948   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":2868:2869   */\n      0x00\n        /* \"#utility.yul\":2861:2949   */\n      mstore\n        /* \"#utility.yul\":2968:2972   */\n      0x11\n        /* \"#utility.yul\":2965:2966   */\n      0x04\n        /* \"#utility.yul\":2958:2973   */\n      mstore\n        /* \"#utility.yul\":2992:2996   */\n      0x24\n        /* \"#utility.yul\":2989:2990   */\n      0x00\n        /* \"#utility.yul\":2982:2997   */\n      revert\n        /* \"#utility.yul\":3009:3194   */\n    tag_22:\n        /* \"#utility.yul\":3049:3050   */\n      0x00\n        /* \"#utility.yul\":3066:3086   */\n      tag_95\n        /* \"#utility.yul\":3084:3085   */\n      dup3\n        /* \"#utility.yul\":3066:3086   */\n      tag_41\n      jump\t// in\n    tag_95:\n        /* \"#utility.yul\":3061:3086   */\n      swap2\n      pop\n        /* \"#utility.yul\":3100:3120   */\n      tag_96\n        /* \"#utility.yul\":3118:3119   */\n      dup4\n        /* \"#utility.yul\":3100:3120   */\n      tag_41\n      jump\t// in\n    tag_96:\n        /* \"#utility.yul\":3095:3120   */\n      swap3\n      pop\n        /* \"#utility.yul\":3139:3140   */\n      dup3\n        /* \"#utility.yul\":3129:3164   */\n      tag_97\n      jumpi\n        /* \"#utility.yul\":3144:3162   */\n      tag_98\n      tag_52\n      jump\t// in\n    tag_98:\n        /* \"#utility.yul\":3129:3164   */\n    tag_97:\n        /* \"#utility.yul\":3186:3187   */\n      dup3\n        /* \"#utility.yul\":3183:3184   */\n      dup3\n        /* \"#utility.yul\":3179:3188   */\n      div\n        /* \"#utility.yul\":3174:3188   */\n      swap1\n      pop\n        /* \"#utility.yul\":3009:3194   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3200:3610   */\n    tag_24:\n        /* \"#utility.yul\":3240:3247   */\n      0x00\n        /* \"#utility.yul\":3263:3283   */\n      tag_100\n        /* \"#utility.yul\":3281:3282   */\n      dup3\n        /* \"#utility.yul\":3263:3283   */\n      tag_41\n      jump\t// in\n    tag_100:\n        /* \"#utility.yul\":3258:3283   */\n      swap2\n      pop\n        /* \"#utility.yul\":3297:3317   */\n      tag_101\n        /* \"#utility.yul\":3315:3316   */\n      dup4\n        /* \"#utility.yul\":3297:3317   */\n      tag_41\n      jump\t// in\n    tag_101:\n        /* \"#utility.yul\":3292:3317   */\n      swap3\n      pop\n        /* \"#utility.yul\":3352:3353   */\n      dup3\n        /* \"#utility.yul\":3349:3350   */\n      dup3\n        /* \"#utility.yul\":3345:3354   */\n      mul\n        /* \"#utility.yul\":3374:3404   */\n      tag_102\n        /* \"#utility.yul\":3392:3403   */\n      dup2\n        /* \"#utility.yul\":3374:3404   */\n      tag_41\n      jump\t// in\n    tag_102:\n        /* \"#utility.yul\":3363:3404   */\n      swap2\n      pop\n        /* \"#utility.yul\":3553:3554   */\n      dup3\n        /* \"#utility.yul\":3544:3551   */\n      dup3\n        /* \"#utility.yul\":3540:3555   */\n      div\n        /* \"#utility.yul\":3537:3538   */\n      dup5\n        /* \"#utility.yul\":3534:3556   */\n      eq\n        /* \"#utility.yul\":3514:3515   */\n      dup4\n        /* \"#utility.yul\":3507:3516   */\n      iszero\n        /* \"#utility.yul\":3487:3570   */\n      or\n        /* \"#utility.yul\":3464:3603   */\n      tag_103\n      jumpi\n        /* \"#utility.yul\":3583:3601   */\n      tag_104\n      tag_53\n      jump\t// in\n    tag_104:\n        /* \"#utility.yul\":3464:3603   */\n    tag_103:\n        /* \"#utility.yul\":3248:3610   */\n      pop\n        /* \"#utility.yul\":3200:3610   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3616:3810   */\n    tag_26:\n        /* \"#utility.yul\":3656:3660   */\n      0x00\n        /* \"#utility.yul\":3676:3696   */\n      tag_106\n        /* \"#utility.yul\":3694:3695   */\n      dup3\n        /* \"#utility.yul\":3676:3696   */\n      tag_41\n      jump\t// in\n    tag_106:\n        /* \"#utility.yul\":3671:3696   */\n      swap2\n      pop\n        /* \"#utility.yul\":3710:3730   */\n      tag_107\n        /* \"#utility.yul\":3728:3729   */\n      dup4\n        /* \"#utility.yul\":3710:3730   */\n      tag_41\n      jump\t// in\n    tag_107:\n        /* \"#utility.yul\":3705:3730   */\n      swap3\n      pop\n        /* \"#utility.yul\":3754:3755   */\n      dup3\n        /* \"#utility.yul\":3751:3752   */\n      dup3\n        /* \"#utility.yul\":3747:3756   */\n      sub\n        /* \"#utility.yul\":3739:3756   */\n      swap1\n      pop\n        /* \"#utility.yul\":3778:3779   */\n      dup2\n        /* \"#utility.yul\":3772:3776   */\n      dup2\n        /* \"#utility.yul\":3769:3780   */\n      gt\n        /* \"#utility.yul\":3766:3803   */\n      iszero\n      tag_108\n      jumpi\n        /* \"#utility.yul\":3783:3801   */\n      tag_109\n      tag_53\n      jump\t// in\n    tag_109:\n        /* \"#utility.yul\":3766:3803   */\n    tag_108:\n        /* \"#utility.yul\":3616:3810   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3897:4014   */\n    tag_55:\n        /* \"#utility.yul\":4006:4007   */\n      0x00\n        /* \"#utility.yul\":4003:4004   */\n      dup1\n        /* \"#utility.yul\":3996:4008   */\n      revert\n        /* \"#utility.yul\":4143:4229   */\n    tag_57:\n        /* \"#utility.yul\":4178:4185   */\n      0x00\n        /* \"#utility.yul\":4218:4222   */\n      0xff\n        /* \"#utility.yul\":4211:4216   */\n      dup3\n        /* \"#utility.yul\":4207:4223   */\n      and\n        /* \"#utility.yul\":4196:4223   */\n      swap1\n      pop\n        /* \"#utility.yul\":4143:4229   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4235:4353   */\n    tag_58:\n        /* \"#utility.yul\":4306:4328   */\n      tag_115\n        /* \"#utility.yul\":4322:4327   */\n      dup2\n        /* \"#utility.yul\":4306:4328   */\n      tag_57\n      jump\t// in\n    tag_115:\n        /* \"#utility.yul\":4299:4304   */\n      dup2\n        /* \"#utility.yul\":4296:4329   */\n      eq\n        /* \"#utility.yul\":4286:4347   */\n      tag_116\n      jumpi\n        /* \"#utility.yul\":4343:4344   */\n      0x00\n        /* \"#utility.yul\":4340:4341   */\n      dup1\n        /* \"#utility.yul\":4333:4345   */\n      revert\n        /* \"#utility.yul\":4286:4347   */\n    tag_116:\n        /* \"#utility.yul\":4235:4353   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4359:4498   */\n    tag_59:\n        /* \"#utility.yul\":4414:4419   */\n      0x00\n        /* \"#utility.yul\":4445:4451   */\n      dup2\n        /* \"#utility.yul\":4439:4452   */\n      mload\n        /* \"#utility.yul\":4430:4452   */\n      swap1\n      pop\n        /* \"#utility.yul\":4461:4492   */\n      tag_118\n        /* \"#utility.yul\":4486:4491   */\n      dup2\n        /* \"#utility.yul\":4461:4492   */\n      tag_58\n      jump\t// in\n    tag_118:\n        /* \"#utility.yul\":4359:4498   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4504:4851   */\n    tag_30:\n        /* \"#utility.yul\":4572:4578   */\n      0x00\n        /* \"#utility.yul\":4621:4623   */\n      0x20\n        /* \"#utility.yul\":4609:4618   */\n      dup3\n        /* \"#utility.yul\":4600:4607   */\n      dup5\n        /* \"#utility.yul\":4596:4619   */\n      sub\n        /* \"#utility.yul\":4592:4624   */\n      slt\n        /* \"#utility.yul\":4589:4708   */\n      iszero\n      tag_120\n      jumpi\n        /* \"#utility.yul\":4627:4706   */\n      tag_121\n      tag_55\n      jump\t// in\n    tag_121:\n        /* \"#utility.yul\":4589:4708   */\n    tag_120:\n        /* \"#utility.yul\":4747:4748   */\n      0x00\n        /* \"#utility.yul\":4772:4834   */\n      tag_122\n        /* \"#utility.yul\":4826:4833   */\n      dup5\n        /* \"#utility.yul\":4817:4823   */\n      dup3\n        /* \"#utility.yul\":4806:4815   */\n      dup6\n        /* \"#utility.yul\":4802:4824   */\n      add\n        /* \"#utility.yul\":4772:4834   */\n      tag_59\n      jump\t// in\n    tag_122:\n        /* \"#utility.yul\":4762:4834   */\n      swap2\n      pop\n        /* \"#utility.yul\":4718:4844   */\n      pop\n        /* \"#utility.yul\":4504:4851   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4857:4953   */\n    tag_60:\n        /* \"#utility.yul\":4894:4901   */\n      0x00\n        /* \"#utility.yul\":4923:4947   */\n      tag_124\n        /* \"#utility.yul\":4941:4946   */\n      dup3\n        /* \"#utility.yul\":4923:4947   */\n      tag_43\n      jump\t// in\n    tag_124:\n        /* \"#utility.yul\":4912:4947   */\n      swap1\n      pop\n        /* \"#utility.yul\":4857:4953   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4959:5077   */\n    tag_61:\n        /* \"#utility.yul\":5046:5070   */\n      tag_126\n        /* \"#utility.yul\":5064:5069   */\n      dup2\n        /* \"#utility.yul\":5046:5070   */\n      tag_60\n      jump\t// in\n    tag_126:\n        /* \"#utility.yul\":5041:5044   */\n      dup3\n        /* \"#utility.yul\":5034:5071   */\n      mstore\n        /* \"#utility.yul\":4959:5077   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5083:5525   */\n    tag_34:\n        /* \"#utility.yul\":5232:5236   */\n      0x00\n        /* \"#utility.yul\":5270:5272   */\n      0x60\n        /* \"#utility.yul\":5259:5268   */\n      dup3\n        /* \"#utility.yul\":5255:5273   */\n      add\n        /* \"#utility.yul\":5247:5273   */\n      swap1\n      pop\n        /* \"#utility.yul\":5283:5354   */\n      tag_128\n        /* \"#utility.yul\":5351:5352   */\n      0x00\n        /* \"#utility.yul\":5340:5349   */\n      dup4\n        /* \"#utility.yul\":5336:5353   */\n      add\n        /* \"#utility.yul\":5327:5333   */\n      dup7\n        /* \"#utility.yul\":5283:5354   */\n      tag_61\n      jump\t// in\n    tag_128:\n        /* \"#utility.yul\":5364:5436   */\n      tag_129\n        /* \"#utility.yul\":5432:5434   */\n      0x20\n        /* \"#utility.yul\":5421:5430   */\n      dup4\n        /* \"#utility.yul\":5417:5435   */\n      add\n        /* \"#utility.yul\":5408:5414   */\n      dup6\n        /* \"#utility.yul\":5364:5436   */\n      tag_61\n      jump\t// in\n    tag_129:\n        /* \"#utility.yul\":5446:5518   */\n      tag_130\n        /* \"#utility.yul\":5514:5516   */\n      0x40\n        /* \"#utility.yul\":5503:5512   */\n      dup4\n        /* \"#utility.yul\":5499:5517   */\n      add\n        /* \"#utility.yul\":5490:5496   */\n      dup5\n        /* \"#utility.yul\":5446:5518   */\n      tag_42\n      jump\t// in\n    tag_130:\n        /* \"#utility.yul\":5083:5525   */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5531:5621   */\n    tag_62:\n        /* \"#utility.yul\":5565:5572   */\n      0x00\n        /* \"#utility.yul\":5608:5613   */\n      dup2\n        /* \"#utility.yul\":5601:5614   */\n      iszero\n        /* \"#utility.yul\":5594:5615   */\n      iszero\n        /* \"#utility.yul\":5583:5615   */\n      swap1\n      pop\n        /* \"#utility.yul\":5531:5621   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5627:5743   */\n    tag_63:\n        /* \"#utility.yul\":5697:5718   */\n      tag_133\n        /* \"#utility.yul\":5712:5717   */\n      dup2\n        /* \"#utility.yul\":5697:5718   */\n      tag_62\n      jump\t// in\n    tag_133:\n        /* \"#utility.yul\":5690:5695   */\n      dup2\n        /* \"#utility.yul\":5687:5719   */\n      eq\n        /* \"#utility.yul\":5677:5737   */\n      tag_134\n      jumpi\n        /* \"#utility.yul\":5733:5734   */\n      0x00\n        /* \"#utility.yul\":5730:5731   */\n      dup1\n        /* \"#utility.yul\":5723:5735   */\n      revert\n        /* \"#utility.yul\":5677:5737   */\n    tag_134:\n        /* \"#utility.yul\":5627:5743   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5749:5886   */\n    tag_64:\n        /* \"#utility.yul\":5803:5808   */\n      0x00\n        /* \"#utility.yul\":5834:5840   */\n      dup2\n        /* \"#utility.yul\":5828:5841   */\n      mload\n        /* \"#utility.yul\":5819:5841   */\n      swap1\n      pop\n        /* \"#utility.yul\":5850:5880   */\n      tag_136\n        /* \"#utility.yul\":5874:5879   */\n      dup2\n        /* \"#utility.yul\":5850:5880   */\n      tag_63\n      jump\t// in\n    tag_136:\n        /* \"#utility.yul\":5749:5886   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5892:6237   */\n    tag_38:\n        /* \"#utility.yul\":5959:5965   */\n      0x00\n        /* \"#utility.yul\":6008:6010   */\n      0x20\n        /* \"#utility.yul\":5996:6005   */\n      dup3\n        /* \"#utility.yul\":5987:5994   */\n      dup5\n        /* \"#utility.yul\":5983:6006   */\n      sub\n        /* \"#utility.yul\":5979:6011   */\n      slt\n        /* \"#utility.yul\":5976:6095   */\n      iszero\n      tag_138\n      jumpi\n        /* \"#utility.yul\":6014:6093   */\n      tag_139\n      tag_55\n      jump\t// in\n    tag_139:\n        /* \"#utility.yul\":5976:6095   */\n    tag_138:\n        /* \"#utility.yul\":6134:6135   */\n      0x00\n        /* \"#utility.yul\":6159:6220   */\n      tag_140\n        /* \"#utility.yul\":6212:6219   */\n      dup5\n        /* \"#utility.yul\":6203:6209   */\n      dup3\n        /* \"#utility.yul\":6192:6201   */\n      dup6\n        /* \"#utility.yul\":6188:6210   */\n      add\n        /* \"#utility.yul\":6159:6220   */\n      tag_64\n      jump\t// in\n    tag_140:\n        /* \"#utility.yul\":6149:6220   */\n      swap2\n      pop\n        /* \"#utility.yul\":6105:6230   */\n      pop\n        /* \"#utility.yul\":5892:6237   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220e448a89b95cb4145f6cad1f9eb1f7013dc4d81fc40625942860e424943c66b0a64736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_813": {
									"entryPoint": null,
									"id": 813,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_t_address_fromMemory": {
									"entryPoint": 268,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address_fromMemory": {
									"entryPoint": 288,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 229,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 198,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 194,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 246,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:1199:6",
										"nodeType": "YulBlock",
										"src": "0:1199:6",
										"statements": [
											{
												"body": {
													"nativeSrc": "47:35:6",
													"nodeType": "YulBlock",
													"src": "47:35:6",
													"statements": [
														{
															"nativeSrc": "57:19:6",
															"nodeType": "YulAssignment",
															"src": "57:19:6",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "73:2:6",
																		"nodeType": "YulLiteral",
																		"src": "73:2:6",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "67:5:6",
																	"nodeType": "YulIdentifier",
																	"src": "67:5:6"
																},
																"nativeSrc": "67:9:6",
																"nodeType": "YulFunctionCall",
																"src": "67:9:6"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nativeSrc": "57:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "57:6:6"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nativeSrc": "7:75:6",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nativeSrc": "40:6:6",
														"nodeType": "YulTypedName",
														"src": "40:6:6",
														"type": ""
													}
												],
												"src": "7:75:6"
											},
											{
												"body": {
													"nativeSrc": "177:28:6",
													"nodeType": "YulBlock",
													"src": "177:28:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "194:1:6",
																		"nodeType": "YulLiteral",
																		"src": "194:1:6",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "197:1:6",
																		"nodeType": "YulLiteral",
																		"src": "197:1:6",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "187:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "187:6:6"
																},
																"nativeSrc": "187:12:6",
																"nodeType": "YulFunctionCall",
																"src": "187:12:6"
															},
															"nativeSrc": "187:12:6",
															"nodeType": "YulExpressionStatement",
															"src": "187:12:6"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nativeSrc": "88:117:6",
												"nodeType": "YulFunctionDefinition",
												"src": "88:117:6"
											},
											{
												"body": {
													"nativeSrc": "300:28:6",
													"nodeType": "YulBlock",
													"src": "300:28:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "317:1:6",
																		"nodeType": "YulLiteral",
																		"src": "317:1:6",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "320:1:6",
																		"nodeType": "YulLiteral",
																		"src": "320:1:6",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "310:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "310:6:6"
																},
																"nativeSrc": "310:12:6",
																"nodeType": "YulFunctionCall",
																"src": "310:12:6"
															},
															"nativeSrc": "310:12:6",
															"nodeType": "YulExpressionStatement",
															"src": "310:12:6"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nativeSrc": "211:117:6",
												"nodeType": "YulFunctionDefinition",
												"src": "211:117:6"
											},
											{
												"body": {
													"nativeSrc": "379:81:6",
													"nodeType": "YulBlock",
													"src": "379:81:6",
													"statements": [
														{
															"nativeSrc": "389:65:6",
															"nodeType": "YulAssignment",
															"src": "389:65:6",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "404:5:6",
																		"nodeType": "YulIdentifier",
																		"src": "404:5:6"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "411:42:6",
																		"nodeType": "YulLiteral",
																		"src": "411:42:6",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "400:3:6",
																	"nodeType": "YulIdentifier",
																	"src": "400:3:6"
																},
																"nativeSrc": "400:54:6",
																"nodeType": "YulFunctionCall",
																"src": "400:54:6"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "389:7:6",
																	"nodeType": "YulIdentifier",
																	"src": "389:7:6"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nativeSrc": "334:126:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "361:5:6",
														"nodeType": "YulTypedName",
														"src": "361:5:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "371:7:6",
														"nodeType": "YulTypedName",
														"src": "371:7:6",
														"type": ""
													}
												],
												"src": "334:126:6"
											},
											{
												"body": {
													"nativeSrc": "511:51:6",
													"nodeType": "YulBlock",
													"src": "511:51:6",
													"statements": [
														{
															"nativeSrc": "521:35:6",
															"nodeType": "YulAssignment",
															"src": "521:35:6",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "550:5:6",
																		"nodeType": "YulIdentifier",
																		"src": "550:5:6"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nativeSrc": "532:17:6",
																	"nodeType": "YulIdentifier",
																	"src": "532:17:6"
																},
																"nativeSrc": "532:24:6",
																"nodeType": "YulFunctionCall",
																"src": "532:24:6"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "521:7:6",
																	"nodeType": "YulIdentifier",
																	"src": "521:7:6"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nativeSrc": "466:96:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "493:5:6",
														"nodeType": "YulTypedName",
														"src": "493:5:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "503:7:6",
														"nodeType": "YulTypedName",
														"src": "503:7:6",
														"type": ""
													}
												],
												"src": "466:96:6"
											},
											{
												"body": {
													"nativeSrc": "611:79:6",
													"nodeType": "YulBlock",
													"src": "611:79:6",
													"statements": [
														{
															"body": {
																"nativeSrc": "668:16:6",
																"nodeType": "YulBlock",
																"src": "668:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "677:1:6",
																					"nodeType": "YulLiteral",
																					"src": "677:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "680:1:6",
																					"nodeType": "YulLiteral",
																					"src": "680:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "670:6:6",
																				"nodeType": "YulIdentifier",
																				"src": "670:6:6"
																			},
																			"nativeSrc": "670:12:6",
																			"nodeType": "YulFunctionCall",
																			"src": "670:12:6"
																		},
																		"nativeSrc": "670:12:6",
																		"nodeType": "YulExpressionStatement",
																		"src": "670:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "634:5:6",
																				"nodeType": "YulIdentifier",
																				"src": "634:5:6"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "659:5:6",
																						"nodeType": "YulIdentifier",
																						"src": "659:5:6"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nativeSrc": "641:17:6",
																					"nodeType": "YulIdentifier",
																					"src": "641:17:6"
																				},
																				"nativeSrc": "641:24:6",
																				"nodeType": "YulFunctionCall",
																				"src": "641:24:6"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "631:2:6",
																			"nodeType": "YulIdentifier",
																			"src": "631:2:6"
																		},
																		"nativeSrc": "631:35:6",
																		"nodeType": "YulFunctionCall",
																		"src": "631:35:6"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "624:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "624:6:6"
																},
																"nativeSrc": "624:43:6",
																"nodeType": "YulFunctionCall",
																"src": "624:43:6"
															},
															"nativeSrc": "621:63:6",
															"nodeType": "YulIf",
															"src": "621:63:6"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nativeSrc": "568:122:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "604:5:6",
														"nodeType": "YulTypedName",
														"src": "604:5:6",
														"type": ""
													}
												],
												"src": "568:122:6"
											},
											{
												"body": {
													"nativeSrc": "759:80:6",
													"nodeType": "YulBlock",
													"src": "759:80:6",
													"statements": [
														{
															"nativeSrc": "769:22:6",
															"nodeType": "YulAssignment",
															"src": "769:22:6",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "784:6:6",
																		"nodeType": "YulIdentifier",
																		"src": "784:6:6"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "778:5:6",
																	"nodeType": "YulIdentifier",
																	"src": "778:5:6"
																},
																"nativeSrc": "778:13:6",
																"nodeType": "YulFunctionCall",
																"src": "778:13:6"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "769:5:6",
																	"nodeType": "YulIdentifier",
																	"src": "769:5:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "827:5:6",
																		"nodeType": "YulIdentifier",
																		"src": "827:5:6"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nativeSrc": "800:26:6",
																	"nodeType": "YulIdentifier",
																	"src": "800:26:6"
																},
																"nativeSrc": "800:33:6",
																"nodeType": "YulFunctionCall",
																"src": "800:33:6"
															},
															"nativeSrc": "800:33:6",
															"nodeType": "YulExpressionStatement",
															"src": "800:33:6"
														}
													]
												},
												"name": "abi_decode_t_address_fromMemory",
												"nativeSrc": "696:143:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "737:6:6",
														"nodeType": "YulTypedName",
														"src": "737:6:6",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "745:3:6",
														"nodeType": "YulTypedName",
														"src": "745:3:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "753:5:6",
														"nodeType": "YulTypedName",
														"src": "753:5:6",
														"type": ""
													}
												],
												"src": "696:143:6"
											},
											{
												"body": {
													"nativeSrc": "922:274:6",
													"nodeType": "YulBlock",
													"src": "922:274:6",
													"statements": [
														{
															"body": {
																"nativeSrc": "968:83:6",
																"nodeType": "YulBlock",
																"src": "968:83:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "970:77:6",
																				"nodeType": "YulIdentifier",
																				"src": "970:77:6"
																			},
																			"nativeSrc": "970:79:6",
																			"nodeType": "YulFunctionCall",
																			"src": "970:79:6"
																		},
																		"nativeSrc": "970:79:6",
																		"nodeType": "YulExpressionStatement",
																		"src": "970:79:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "943:7:6",
																				"nodeType": "YulIdentifier",
																				"src": "943:7:6"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "952:9:6",
																				"nodeType": "YulIdentifier",
																				"src": "952:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "939:3:6",
																			"nodeType": "YulIdentifier",
																			"src": "939:3:6"
																		},
																		"nativeSrc": "939:23:6",
																		"nodeType": "YulFunctionCall",
																		"src": "939:23:6"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "964:2:6",
																		"nodeType": "YulLiteral",
																		"src": "964:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "935:3:6",
																	"nodeType": "YulIdentifier",
																	"src": "935:3:6"
																},
																"nativeSrc": "935:32:6",
																"nodeType": "YulFunctionCall",
																"src": "935:32:6"
															},
															"nativeSrc": "932:119:6",
															"nodeType": "YulIf",
															"src": "932:119:6"
														},
														{
															"nativeSrc": "1061:128:6",
															"nodeType": "YulBlock",
															"src": "1061:128:6",
															"statements": [
																{
																	"nativeSrc": "1076:15:6",
																	"nodeType": "YulVariableDeclaration",
																	"src": "1076:15:6",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "1090:1:6",
																		"nodeType": "YulLiteral",
																		"src": "1090:1:6",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "1080:6:6",
																			"nodeType": "YulTypedName",
																			"src": "1080:6:6",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "1105:74:6",
																	"nodeType": "YulAssignment",
																	"src": "1105:74:6",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "1151:9:6",
																						"nodeType": "YulIdentifier",
																						"src": "1151:9:6"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "1162:6:6",
																						"nodeType": "YulIdentifier",
																						"src": "1162:6:6"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "1147:3:6",
																					"nodeType": "YulIdentifier",
																					"src": "1147:3:6"
																				},
																				"nativeSrc": "1147:22:6",
																				"nodeType": "YulFunctionCall",
																				"src": "1147:22:6"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "1171:7:6",
																				"nodeType": "YulIdentifier",
																				"src": "1171:7:6"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address_fromMemory",
																			"nativeSrc": "1115:31:6",
																			"nodeType": "YulIdentifier",
																			"src": "1115:31:6"
																		},
																		"nativeSrc": "1115:64:6",
																		"nodeType": "YulFunctionCall",
																		"src": "1115:64:6"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "1105:6:6",
																			"nodeType": "YulIdentifier",
																			"src": "1105:6:6"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address_fromMemory",
												"nativeSrc": "845:351:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "892:9:6",
														"nodeType": "YulTypedName",
														"src": "892:9:6",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "903:7:6",
														"nodeType": "YulTypedName",
														"src": "903:7:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "915:6:6",
														"nodeType": "YulTypedName",
														"src": "915:6:6",
														"type": ""
													}
												],
												"src": "845:351:6"
											}
										]
									},
									"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n}\n",
									"id": 6,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "6080604052670de0b6b3a76400005f5534801561001a575f80fd5b506040516107bf3803806107bf833981810160405281019061003c9190610120565b3360025f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061014b565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6100ef826100c6565b9050919050565b6100ff816100e5565b8114610109575f80fd5b50565b5f8151905061011a816100f6565b92915050565b5f60208284031215610135576101346100c2565b5b5f6101428482850161010c565b91505092915050565b610667806101585f395ff3fe608060405260043610610033575f3560e01c80632f8de81014610037578063e7e7865214610061578063fc0c546a1461006b575b5f80fd5b348015610042575f80fd5b5061004b610095565b60405161005891906102f5565b60405180910390f35b61006961009a565b005b348015610076575f80fd5b5061007f6102b8565b60405161008c9190610388565b60405180910390f35b5f5481565b5f543410156100de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100d5906103fb565b60405180910390fd5b5f8054346100ec9190610473565b90505f8054826100fc91906104a3565b3461010791906104e4565b905060015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff163360015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101d3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101f79190610551565b60ff16600a8761020791906104a3565b61021191906104a3565b6040518463ffffffff1660e01b815260040161022f9392919061059c565b6020604051808303815f875af115801561024b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061026f9190610606565b503373ffffffffffffffffffffffffffffffffffffffff166108fc8290811502906040515f60405180830381858888f193505050501580156102b3573d5f803e3d5ffd5b505050565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f819050919050565b6102ef816102dd565b82525050565b5f6020820190506103085f8301846102e6565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f819050919050565b5f61035061034b6103468461030e565b61032d565b61030e565b9050919050565b5f61036182610336565b9050919050565b5f61037282610357565b9050919050565b61038281610368565b82525050565b5f60208201905061039b5f830184610379565b92915050565b5f82825260208201905092915050565b7f596f7520646f206e6f74206861766520656e6f756768206574682e00000000005f82015250565b5f6103e5601b836103a1565b91506103f0826103b1565b602082019050919050565b5f6020820190508181035f830152610412816103d9565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61047d826102dd565b9150610488836102dd565b92508261049857610497610419565b5b828204905092915050565b5f6104ad826102dd565b91506104b8836102dd565b92508282026104c6816102dd565b915082820484148315176104dd576104dc610446565b5b5092915050565b5f6104ee826102dd565b91506104f9836102dd565b925082820390508181111561051157610510610446565b5b92915050565b5f80fd5b5f60ff82169050919050565b6105308161051b565b811461053a575f80fd5b50565b5f8151905061054b81610527565b92915050565b5f6020828403121561056657610565610517565b5b5f6105738482850161053d565b91505092915050565b5f6105868261030e565b9050919050565b6105968161057c565b82525050565b5f6060820190506105af5f83018661058d565b6105bc602083018561058d565b6105c960408301846102e6565b949350505050565b5f8115159050919050565b6105e5816105d1565b81146105ef575f80fd5b50565b5f81519050610600816105dc565b92915050565b5f6020828403121561061b5761061a610517565b5b5f610628848285016105f2565b9150509291505056fea2646970667358221220e448a89b95cb4145f6cad1f9eb1f7013dc4d81fc40625942860e424943c66b0a64736f6c634300081a0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH8 0xDE0B6B3A7640000 PUSH0 SSTORE CALLVALUE DUP1 ISZERO PUSH2 0x1A JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x7BF CODESIZE SUB DUP1 PUSH2 0x7BF DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH2 0x3C SWAP2 SWAP1 PUSH2 0x120 JUMP JUMPDEST CALLER PUSH1 0x2 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x1 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP PUSH2 0x14B JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xEF DUP3 PUSH2 0xC6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xFF DUP2 PUSH2 0xE5 JUMP JUMPDEST DUP2 EQ PUSH2 0x109 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0x11A DUP2 PUSH2 0xF6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x135 JUMPI PUSH2 0x134 PUSH2 0xC2 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x142 DUP5 DUP3 DUP6 ADD PUSH2 0x10C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x667 DUP1 PUSH2 0x158 PUSH0 CODECOPY PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x33 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x2F8DE810 EQ PUSH2 0x37 JUMPI DUP1 PUSH4 0xE7E78652 EQ PUSH2 0x61 JUMPI DUP1 PUSH4 0xFC0C546A EQ PUSH2 0x6B JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x4B PUSH2 0x95 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x58 SWAP2 SWAP1 PUSH2 0x2F5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x69 PUSH2 0x9A JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x76 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x7F PUSH2 0x2B8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C SWAP2 SWAP1 PUSH2 0x388 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH0 SLOAD DUP2 JUMP JUMPDEST PUSH0 SLOAD CALLVALUE LT ISZERO PUSH2 0xDE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD5 SWAP1 PUSH2 0x3FB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP1 SLOAD CALLVALUE PUSH2 0xEC SWAP2 SWAP1 PUSH2 0x473 JUMP JUMPDEST SWAP1 POP PUSH0 DUP1 SLOAD DUP3 PUSH2 0xFC SWAP2 SWAP1 PUSH2 0x4A3 JUMP JUMPDEST CALLVALUE PUSH2 0x107 SWAP2 SWAP1 PUSH2 0x4E4 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD PUSH1 0x2 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH1 0x1 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1D3 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1F7 SWAP2 SWAP1 PUSH2 0x551 JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0xA DUP8 PUSH2 0x207 SWAP2 SWAP1 PUSH2 0x4A3 JUMP JUMPDEST PUSH2 0x211 SWAP2 SWAP1 PUSH2 0x4A3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x22F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x59C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x24B JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x26F SWAP2 SWAP1 PUSH2 0x606 JUMP JUMPDEST POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x2B3 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2EF DUP2 PUSH2 0x2DD JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x308 PUSH0 DUP4 ADD DUP5 PUSH2 0x2E6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x350 PUSH2 0x34B PUSH2 0x346 DUP5 PUSH2 0x30E JUMP JUMPDEST PUSH2 0x32D JUMP JUMPDEST PUSH2 0x30E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x361 DUP3 PUSH2 0x336 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x372 DUP3 PUSH2 0x357 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x382 DUP2 PUSH2 0x368 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x39B PUSH0 DUP4 ADD DUP5 PUSH2 0x379 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x596F7520646F206E6F74206861766520656E6F756768206574682E0000000000 PUSH0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x3E5 PUSH1 0x1B DUP4 PUSH2 0x3A1 JUMP JUMPDEST SWAP2 POP PUSH2 0x3F0 DUP3 PUSH2 0x3B1 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x412 DUP2 PUSH2 0x3D9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0x47D DUP3 PUSH2 0x2DD JUMP JUMPDEST SWAP2 POP PUSH2 0x488 DUP4 PUSH2 0x2DD JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x498 JUMPI PUSH2 0x497 PUSH2 0x419 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x4AD DUP3 PUSH2 0x2DD JUMP JUMPDEST SWAP2 POP PUSH2 0x4B8 DUP4 PUSH2 0x2DD JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x4C6 DUP2 PUSH2 0x2DD JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0x4DD JUMPI PUSH2 0x4DC PUSH2 0x446 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x4EE DUP3 PUSH2 0x2DD JUMP JUMPDEST SWAP2 POP PUSH2 0x4F9 DUP4 PUSH2 0x2DD JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x511 JUMPI PUSH2 0x510 PUSH2 0x446 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x530 DUP2 PUSH2 0x51B JUMP JUMPDEST DUP2 EQ PUSH2 0x53A JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0x54B DUP2 PUSH2 0x527 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x566 JUMPI PUSH2 0x565 PUSH2 0x517 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x573 DUP5 DUP3 DUP6 ADD PUSH2 0x53D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x586 DUP3 PUSH2 0x30E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x596 DUP2 PUSH2 0x57C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x5AF PUSH0 DUP4 ADD DUP7 PUSH2 0x58D JUMP JUMPDEST PUSH2 0x5BC PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x58D JUMP JUMPDEST PUSH2 0x5C9 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2E6 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5E5 DUP2 PUSH2 0x5D1 JUMP JUMPDEST DUP2 EQ PUSH2 0x5EF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0x600 DUP2 PUSH2 0x5DC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x61B JUMPI PUSH2 0x61A PUSH2 0x517 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x628 DUP5 DUP3 DUP6 ADD PUSH2 0x5F2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE4 BASEFEE 0xA8 SWAP12 SWAP6 0xCB COINBASE GASLIMIT 0xF6 0xCA 0xD1 0xF9 0xEB 0x1F PUSH17 0x13DC4D81FC40625942860E424943C66B0A PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "119:679:5:-:0;;;176:7;146:37;;244:101;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;295:10;282;;:23;;;;;;;;;;;;;;;;;;330:6;316:5;;:21;;;;;;;;;;;;;;;;;;244:101;119:679;;88:117:6;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:351::-;915:6;964:2;952:9;943:7;939:23;935:32;932:119;;;970:79;;:::i;:::-;932:119;1090:1;1115:64;1171:7;1162:6;1151:9;1147:22;1115:64;:::i;:::-;1105:74;;1061:128;845:351;;;;:::o;119:679:5:-;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@purchaseACoffe_865": {
									"entryPoint": 154,
									"id": 865,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@tokenPriceInWei_791": {
									"entryPoint": 149,
									"id": 791,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@token_794": {
									"entryPoint": 696,
									"id": 794,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"abi_decode_t_bool_fromMemory": {
									"entryPoint": 1522,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint8_fromMemory": {
									"entryPoint": 1341,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bool_fromMemory": {
									"entryPoint": 1542,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint8_fromMemory": {
									"entryPoint": 1361,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_address_to_t_address_fromStack": {
									"entryPoint": 1421,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_contract$_ERC20_$651_to_t_address_fromStack": {
									"entryPoint": 889,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_stringliteral_4bcb9c905bf13979cd031d103f2aded1e212b50c9aadd57365e985f35a025788_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 985,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_uint256_to_t_uint256_fromStack": {
									"entryPoint": 742,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": 1436,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_contract$_ERC20_$651__to_t_address__fromStack_reversed": {
									"entryPoint": 904,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_4bcb9c905bf13979cd031d103f2aded1e212b50c9aadd57365e985f35a025788__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 1019,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": 757,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
									"entryPoint": 929,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_div_t_uint256": {
									"entryPoint": 1139,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 1187,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 1252,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 1404,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bool": {
									"entryPoint": 1489,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 782,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 733,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint8": {
									"entryPoint": 1307,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"convert_t_contract$_ERC20_$651_to_t_address": {
									"entryPoint": 872,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"convert_t_uint160_to_t_address": {
									"entryPoint": 855,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"convert_t_uint160_to_t_uint160": {
									"entryPoint": 822,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"identity": {
									"entryPoint": 813,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 1094,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x12": {
									"entryPoint": 1049,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 1303,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"store_literal_in_memory_4bcb9c905bf13979cd031d103f2aded1e212b50c9aadd57365e985f35a025788": {
									"entryPoint": 945,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_bool": {
									"entryPoint": 1500,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint8": {
									"entryPoint": 1319,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:6240:6",
										"nodeType": "YulBlock",
										"src": "0:6240:6",
										"statements": [
											{
												"body": {
													"nativeSrc": "52:32:6",
													"nodeType": "YulBlock",
													"src": "52:32:6",
													"statements": [
														{
															"nativeSrc": "62:16:6",
															"nodeType": "YulAssignment",
															"src": "62:16:6",
															"value": {
																"name": "value",
																"nativeSrc": "73:5:6",
																"nodeType": "YulIdentifier",
																"src": "73:5:6"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "62:7:6",
																	"nodeType": "YulIdentifier",
																	"src": "62:7:6"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nativeSrc": "7:77:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "34:5:6",
														"nodeType": "YulTypedName",
														"src": "34:5:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "44:7:6",
														"nodeType": "YulTypedName",
														"src": "44:7:6",
														"type": ""
													}
												],
												"src": "7:77:6"
											},
											{
												"body": {
													"nativeSrc": "155:53:6",
													"nodeType": "YulBlock",
													"src": "155:53:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "172:3:6",
																		"nodeType": "YulIdentifier",
																		"src": "172:3:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "195:5:6",
																				"nodeType": "YulIdentifier",
																				"src": "195:5:6"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nativeSrc": "177:17:6",
																			"nodeType": "YulIdentifier",
																			"src": "177:17:6"
																		},
																		"nativeSrc": "177:24:6",
																		"nodeType": "YulFunctionCall",
																		"src": "177:24:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "165:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "165:6:6"
																},
																"nativeSrc": "165:37:6",
																"nodeType": "YulFunctionCall",
																"src": "165:37:6"
															},
															"nativeSrc": "165:37:6",
															"nodeType": "YulExpressionStatement",
															"src": "165:37:6"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nativeSrc": "90:118:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "143:5:6",
														"nodeType": "YulTypedName",
														"src": "143:5:6",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "150:3:6",
														"nodeType": "YulTypedName",
														"src": "150:3:6",
														"type": ""
													}
												],
												"src": "90:118:6"
											},
											{
												"body": {
													"nativeSrc": "312:124:6",
													"nodeType": "YulBlock",
													"src": "312:124:6",
													"statements": [
														{
															"nativeSrc": "322:26:6",
															"nodeType": "YulAssignment",
															"src": "322:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "334:9:6",
																		"nodeType": "YulIdentifier",
																		"src": "334:9:6"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "345:2:6",
																		"nodeType": "YulLiteral",
																		"src": "345:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "330:3:6",
																	"nodeType": "YulIdentifier",
																	"src": "330:3:6"
																},
																"nativeSrc": "330:18:6",
																"nodeType": "YulFunctionCall",
																"src": "330:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "322:4:6",
																	"nodeType": "YulIdentifier",
																	"src": "322:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "402:6:6",
																		"nodeType": "YulIdentifier",
																		"src": "402:6:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "415:9:6",
																				"nodeType": "YulIdentifier",
																				"src": "415:9:6"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "426:1:6",
																				"nodeType": "YulLiteral",
																				"src": "426:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "411:3:6",
																			"nodeType": "YulIdentifier",
																			"src": "411:3:6"
																		},
																		"nativeSrc": "411:17:6",
																		"nodeType": "YulFunctionCall",
																		"src": "411:17:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "358:43:6",
																	"nodeType": "YulIdentifier",
																	"src": "358:43:6"
																},
																"nativeSrc": "358:71:6",
																"nodeType": "YulFunctionCall",
																"src": "358:71:6"
															},
															"nativeSrc": "358:71:6",
															"nodeType": "YulExpressionStatement",
															"src": "358:71:6"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nativeSrc": "214:222:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "284:9:6",
														"nodeType": "YulTypedName",
														"src": "284:9:6",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "296:6:6",
														"nodeType": "YulTypedName",
														"src": "296:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "307:4:6",
														"nodeType": "YulTypedName",
														"src": "307:4:6",
														"type": ""
													}
												],
												"src": "214:222:6"
											},
											{
												"body": {
													"nativeSrc": "487:81:6",
													"nodeType": "YulBlock",
													"src": "487:81:6",
													"statements": [
														{
															"nativeSrc": "497:65:6",
															"nodeType": "YulAssignment",
															"src": "497:65:6",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "512:5:6",
																		"nodeType": "YulIdentifier",
																		"src": "512:5:6"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "519:42:6",
																		"nodeType": "YulLiteral",
																		"src": "519:42:6",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "508:3:6",
																	"nodeType": "YulIdentifier",
																	"src": "508:3:6"
																},
																"nativeSrc": "508:54:6",
																"nodeType": "YulFunctionCall",
																"src": "508:54:6"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "497:7:6",
																	"nodeType": "YulIdentifier",
																	"src": "497:7:6"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nativeSrc": "442:126:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "469:5:6",
														"nodeType": "YulTypedName",
														"src": "469:5:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "479:7:6",
														"nodeType": "YulTypedName",
														"src": "479:7:6",
														"type": ""
													}
												],
												"src": "442:126:6"
											},
											{
												"body": {
													"nativeSrc": "606:28:6",
													"nodeType": "YulBlock",
													"src": "606:28:6",
													"statements": [
														{
															"nativeSrc": "616:12:6",
															"nodeType": "YulAssignment",
															"src": "616:12:6",
															"value": {
																"name": "value",
																"nativeSrc": "623:5:6",
																"nodeType": "YulIdentifier",
																"src": "623:5:6"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nativeSrc": "616:3:6",
																	"nodeType": "YulIdentifier",
																	"src": "616:3:6"
																}
															]
														}
													]
												},
												"name": "identity",
												"nativeSrc": "574:60:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "592:5:6",
														"nodeType": "YulTypedName",
														"src": "592:5:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nativeSrc": "602:3:6",
														"nodeType": "YulTypedName",
														"src": "602:3:6",
														"type": ""
													}
												],
												"src": "574:60:6"
											},
											{
												"body": {
													"nativeSrc": "700:82:6",
													"nodeType": "YulBlock",
													"src": "700:82:6",
													"statements": [
														{
															"nativeSrc": "710:66:6",
															"nodeType": "YulAssignment",
															"src": "710:66:6",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "768:5:6",
																						"nodeType": "YulIdentifier",
																						"src": "768:5:6"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint160",
																					"nativeSrc": "750:17:6",
																					"nodeType": "YulIdentifier",
																					"src": "750:17:6"
																				},
																				"nativeSrc": "750:24:6",
																				"nodeType": "YulFunctionCall",
																				"src": "750:24:6"
																			}
																		],
																		"functionName": {
																			"name": "identity",
																			"nativeSrc": "741:8:6",
																			"nodeType": "YulIdentifier",
																			"src": "741:8:6"
																		},
																		"nativeSrc": "741:34:6",
																		"nodeType": "YulFunctionCall",
																		"src": "741:34:6"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nativeSrc": "723:17:6",
																	"nodeType": "YulIdentifier",
																	"src": "723:17:6"
																},
																"nativeSrc": "723:53:6",
																"nodeType": "YulFunctionCall",
																"src": "723:53:6"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nativeSrc": "710:9:6",
																	"nodeType": "YulIdentifier",
																	"src": "710:9:6"
																}
															]
														}
													]
												},
												"name": "convert_t_uint160_to_t_uint160",
												"nativeSrc": "640:142:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "680:5:6",
														"nodeType": "YulTypedName",
														"src": "680:5:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nativeSrc": "690:9:6",
														"nodeType": "YulTypedName",
														"src": "690:9:6",
														"type": ""
													}
												],
												"src": "640:142:6"
											},
											{
												"body": {
													"nativeSrc": "848:66:6",
													"nodeType": "YulBlock",
													"src": "848:66:6",
													"statements": [
														{
															"nativeSrc": "858:50:6",
															"nodeType": "YulAssignment",
															"src": "858:50:6",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "902:5:6",
																		"nodeType": "YulIdentifier",
																		"src": "902:5:6"
																	}
																],
																"functionName": {
																	"name": "convert_t_uint160_to_t_uint160",
																	"nativeSrc": "871:30:6",
																	"nodeType": "YulIdentifier",
																	"src": "871:30:6"
																},
																"nativeSrc": "871:37:6",
																"nodeType": "YulFunctionCall",
																"src": "871:37:6"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nativeSrc": "858:9:6",
																	"nodeType": "YulIdentifier",
																	"src": "858:9:6"
																}
															]
														}
													]
												},
												"name": "convert_t_uint160_to_t_address",
												"nativeSrc": "788:126:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "828:5:6",
														"nodeType": "YulTypedName",
														"src": "828:5:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nativeSrc": "838:9:6",
														"nodeType": "YulTypedName",
														"src": "838:9:6",
														"type": ""
													}
												],
												"src": "788:126:6"
											},
											{
												"body": {
													"nativeSrc": "993:66:6",
													"nodeType": "YulBlock",
													"src": "993:66:6",
													"statements": [
														{
															"nativeSrc": "1003:50:6",
															"nodeType": "YulAssignment",
															"src": "1003:50:6",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "1047:5:6",
																		"nodeType": "YulIdentifier",
																		"src": "1047:5:6"
																	}
																],
																"functionName": {
																	"name": "convert_t_uint160_to_t_address",
																	"nativeSrc": "1016:30:6",
																	"nodeType": "YulIdentifier",
																	"src": "1016:30:6"
																},
																"nativeSrc": "1016:37:6",
																"nodeType": "YulFunctionCall",
																"src": "1016:37:6"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nativeSrc": "1003:9:6",
																	"nodeType": "YulIdentifier",
																	"src": "1003:9:6"
																}
															]
														}
													]
												},
												"name": "convert_t_contract$_ERC20_$651_to_t_address",
												"nativeSrc": "920:139:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "973:5:6",
														"nodeType": "YulTypedName",
														"src": "973:5:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nativeSrc": "983:9:6",
														"nodeType": "YulTypedName",
														"src": "983:9:6",
														"type": ""
													}
												],
												"src": "920:139:6"
											},
											{
												"body": {
													"nativeSrc": "1143:79:6",
													"nodeType": "YulBlock",
													"src": "1143:79:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "1160:3:6",
																		"nodeType": "YulIdentifier",
																		"src": "1160:3:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "1209:5:6",
																				"nodeType": "YulIdentifier",
																				"src": "1209:5:6"
																			}
																		],
																		"functionName": {
																			"name": "convert_t_contract$_ERC20_$651_to_t_address",
																			"nativeSrc": "1165:43:6",
																			"nodeType": "YulIdentifier",
																			"src": "1165:43:6"
																		},
																		"nativeSrc": "1165:50:6",
																		"nodeType": "YulFunctionCall",
																		"src": "1165:50:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1153:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "1153:6:6"
																},
																"nativeSrc": "1153:63:6",
																"nodeType": "YulFunctionCall",
																"src": "1153:63:6"
															},
															"nativeSrc": "1153:63:6",
															"nodeType": "YulExpressionStatement",
															"src": "1153:63:6"
														}
													]
												},
												"name": "abi_encode_t_contract$_ERC20_$651_to_t_address_fromStack",
												"nativeSrc": "1065:157:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "1131:5:6",
														"nodeType": "YulTypedName",
														"src": "1131:5:6",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "1138:3:6",
														"nodeType": "YulTypedName",
														"src": "1138:3:6",
														"type": ""
													}
												],
												"src": "1065:157:6"
											},
											{
												"body": {
													"nativeSrc": "1339:137:6",
													"nodeType": "YulBlock",
													"src": "1339:137:6",
													"statements": [
														{
															"nativeSrc": "1349:26:6",
															"nodeType": "YulAssignment",
															"src": "1349:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1361:9:6",
																		"nodeType": "YulIdentifier",
																		"src": "1361:9:6"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1372:2:6",
																		"nodeType": "YulLiteral",
																		"src": "1372:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1357:3:6",
																	"nodeType": "YulIdentifier",
																	"src": "1357:3:6"
																},
																"nativeSrc": "1357:18:6",
																"nodeType": "YulFunctionCall",
																"src": "1357:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1349:4:6",
																	"nodeType": "YulIdentifier",
																	"src": "1349:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "1442:6:6",
																		"nodeType": "YulIdentifier",
																		"src": "1442:6:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1455:9:6",
																				"nodeType": "YulIdentifier",
																				"src": "1455:9:6"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1466:1:6",
																				"nodeType": "YulLiteral",
																				"src": "1466:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1451:3:6",
																			"nodeType": "YulIdentifier",
																			"src": "1451:3:6"
																		},
																		"nativeSrc": "1451:17:6",
																		"nodeType": "YulFunctionCall",
																		"src": "1451:17:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_contract$_ERC20_$651_to_t_address_fromStack",
																	"nativeSrc": "1385:56:6",
																	"nodeType": "YulIdentifier",
																	"src": "1385:56:6"
																},
																"nativeSrc": "1385:84:6",
																"nodeType": "YulFunctionCall",
																"src": "1385:84:6"
															},
															"nativeSrc": "1385:84:6",
															"nodeType": "YulExpressionStatement",
															"src": "1385:84:6"
														}
													]
												},
												"name": "abi_encode_tuple_t_contract$_ERC20_$651__to_t_address__fromStack_reversed",
												"nativeSrc": "1228:248:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1311:9:6",
														"nodeType": "YulTypedName",
														"src": "1311:9:6",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "1323:6:6",
														"nodeType": "YulTypedName",
														"src": "1323:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1334:4:6",
														"nodeType": "YulTypedName",
														"src": "1334:4:6",
														"type": ""
													}
												],
												"src": "1228:248:6"
											},
											{
												"body": {
													"nativeSrc": "1578:73:6",
													"nodeType": "YulBlock",
													"src": "1578:73:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "1595:3:6",
																		"nodeType": "YulIdentifier",
																		"src": "1595:3:6"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "1600:6:6",
																		"nodeType": "YulIdentifier",
																		"src": "1600:6:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1588:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "1588:6:6"
																},
																"nativeSrc": "1588:19:6",
																"nodeType": "YulFunctionCall",
																"src": "1588:19:6"
															},
															"nativeSrc": "1588:19:6",
															"nodeType": "YulExpressionStatement",
															"src": "1588:19:6"
														},
														{
															"nativeSrc": "1616:29:6",
															"nodeType": "YulAssignment",
															"src": "1616:29:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "1635:3:6",
																		"nodeType": "YulIdentifier",
																		"src": "1635:3:6"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1640:4:6",
																		"nodeType": "YulLiteral",
																		"src": "1640:4:6",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1631:3:6",
																	"nodeType": "YulIdentifier",
																	"src": "1631:3:6"
																},
																"nativeSrc": "1631:14:6",
																"nodeType": "YulFunctionCall",
																"src": "1631:14:6"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nativeSrc": "1616:11:6",
																	"nodeType": "YulIdentifier",
																	"src": "1616:11:6"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nativeSrc": "1482:169:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "1550:3:6",
														"nodeType": "YulTypedName",
														"src": "1550:3:6",
														"type": ""
													},
													{
														"name": "length",
														"nativeSrc": "1555:6:6",
														"nodeType": "YulTypedName",
														"src": "1555:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nativeSrc": "1566:11:6",
														"nodeType": "YulTypedName",
														"src": "1566:11:6",
														"type": ""
													}
												],
												"src": "1482:169:6"
											},
											{
												"body": {
													"nativeSrc": "1763:71:6",
													"nodeType": "YulBlock",
													"src": "1763:71:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nativeSrc": "1785:6:6",
																				"nodeType": "YulIdentifier",
																				"src": "1785:6:6"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1793:1:6",
																				"nodeType": "YulLiteral",
																				"src": "1793:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1781:3:6",
																			"nodeType": "YulIdentifier",
																			"src": "1781:3:6"
																		},
																		"nativeSrc": "1781:14:6",
																		"nodeType": "YulFunctionCall",
																		"src": "1781:14:6"
																	},
																	{
																		"hexValue": "596f7520646f206e6f74206861766520656e6f756768206574682e",
																		"kind": "string",
																		"nativeSrc": "1797:29:6",
																		"nodeType": "YulLiteral",
																		"src": "1797:29:6",
																		"type": "",
																		"value": "You do not have enough eth."
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1774:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "1774:6:6"
																},
																"nativeSrc": "1774:53:6",
																"nodeType": "YulFunctionCall",
																"src": "1774:53:6"
															},
															"nativeSrc": "1774:53:6",
															"nodeType": "YulExpressionStatement",
															"src": "1774:53:6"
														}
													]
												},
												"name": "store_literal_in_memory_4bcb9c905bf13979cd031d103f2aded1e212b50c9aadd57365e985f35a025788",
												"nativeSrc": "1657:177:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nativeSrc": "1755:6:6",
														"nodeType": "YulTypedName",
														"src": "1755:6:6",
														"type": ""
													}
												],
												"src": "1657:177:6"
											},
											{
												"body": {
													"nativeSrc": "1986:220:6",
													"nodeType": "YulBlock",
													"src": "1986:220:6",
													"statements": [
														{
															"nativeSrc": "1996:74:6",
															"nodeType": "YulAssignment",
															"src": "1996:74:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "2062:3:6",
																		"nodeType": "YulIdentifier",
																		"src": "2062:3:6"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2067:2:6",
																		"nodeType": "YulLiteral",
																		"src": "2067:2:6",
																		"type": "",
																		"value": "27"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nativeSrc": "2003:58:6",
																	"nodeType": "YulIdentifier",
																	"src": "2003:58:6"
																},
																"nativeSrc": "2003:67:6",
																"nodeType": "YulFunctionCall",
																"src": "2003:67:6"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "1996:3:6",
																	"nodeType": "YulIdentifier",
																	"src": "1996:3:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "2168:3:6",
																		"nodeType": "YulIdentifier",
																		"src": "2168:3:6"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_4bcb9c905bf13979cd031d103f2aded1e212b50c9aadd57365e985f35a025788",
																	"nativeSrc": "2079:88:6",
																	"nodeType": "YulIdentifier",
																	"src": "2079:88:6"
																},
																"nativeSrc": "2079:93:6",
																"nodeType": "YulFunctionCall",
																"src": "2079:93:6"
															},
															"nativeSrc": "2079:93:6",
															"nodeType": "YulExpressionStatement",
															"src": "2079:93:6"
														},
														{
															"nativeSrc": "2181:19:6",
															"nodeType": "YulAssignment",
															"src": "2181:19:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "2192:3:6",
																		"nodeType": "YulIdentifier",
																		"src": "2192:3:6"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2197:2:6",
																		"nodeType": "YulLiteral",
																		"src": "2197:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "2188:3:6",
																	"nodeType": "YulIdentifier",
																	"src": "2188:3:6"
																},
																"nativeSrc": "2188:12:6",
																"nodeType": "YulFunctionCall",
																"src": "2188:12:6"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "2181:3:6",
																	"nodeType": "YulIdentifier",
																	"src": "2181:3:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_4bcb9c905bf13979cd031d103f2aded1e212b50c9aadd57365e985f35a025788_to_t_string_memory_ptr_fromStack",
												"nativeSrc": "1840:366:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "1974:3:6",
														"nodeType": "YulTypedName",
														"src": "1974:3:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "1982:3:6",
														"nodeType": "YulTypedName",
														"src": "1982:3:6",
														"type": ""
													}
												],
												"src": "1840:366:6"
											},
											{
												"body": {
													"nativeSrc": "2383:248:6",
													"nodeType": "YulBlock",
													"src": "2383:248:6",
													"statements": [
														{
															"nativeSrc": "2393:26:6",
															"nodeType": "YulAssignment",
															"src": "2393:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2405:9:6",
																		"nodeType": "YulIdentifier",
																		"src": "2405:9:6"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2416:2:6",
																		"nodeType": "YulLiteral",
																		"src": "2416:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "2401:3:6",
																	"nodeType": "YulIdentifier",
																	"src": "2401:3:6"
																},
																"nativeSrc": "2401:18:6",
																"nodeType": "YulFunctionCall",
																"src": "2401:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "2393:4:6",
																	"nodeType": "YulIdentifier",
																	"src": "2393:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "2440:9:6",
																				"nodeType": "YulIdentifier",
																				"src": "2440:9:6"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2451:1:6",
																				"nodeType": "YulLiteral",
																				"src": "2451:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2436:3:6",
																			"nodeType": "YulIdentifier",
																			"src": "2436:3:6"
																		},
																		"nativeSrc": "2436:17:6",
																		"nodeType": "YulFunctionCall",
																		"src": "2436:17:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nativeSrc": "2459:4:6",
																				"nodeType": "YulIdentifier",
																				"src": "2459:4:6"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "2465:9:6",
																				"nodeType": "YulIdentifier",
																				"src": "2465:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "2455:3:6",
																			"nodeType": "YulIdentifier",
																			"src": "2455:3:6"
																		},
																		"nativeSrc": "2455:20:6",
																		"nodeType": "YulFunctionCall",
																		"src": "2455:20:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2429:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "2429:6:6"
																},
																"nativeSrc": "2429:47:6",
																"nodeType": "YulFunctionCall",
																"src": "2429:47:6"
															},
															"nativeSrc": "2429:47:6",
															"nodeType": "YulExpressionStatement",
															"src": "2429:47:6"
														},
														{
															"nativeSrc": "2485:139:6",
															"nodeType": "YulAssignment",
															"src": "2485:139:6",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nativeSrc": "2619:4:6",
																		"nodeType": "YulIdentifier",
																		"src": "2619:4:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_4bcb9c905bf13979cd031d103f2aded1e212b50c9aadd57365e985f35a025788_to_t_string_memory_ptr_fromStack",
																	"nativeSrc": "2493:124:6",
																	"nodeType": "YulIdentifier",
																	"src": "2493:124:6"
																},
																"nativeSrc": "2493:131:6",
																"nodeType": "YulFunctionCall",
																"src": "2493:131:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "2485:4:6",
																	"nodeType": "YulIdentifier",
																	"src": "2485:4:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_4bcb9c905bf13979cd031d103f2aded1e212b50c9aadd57365e985f35a025788__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "2212:419:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2363:9:6",
														"nodeType": "YulTypedName",
														"src": "2363:9:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "2378:4:6",
														"nodeType": "YulTypedName",
														"src": "2378:4:6",
														"type": ""
													}
												],
												"src": "2212:419:6"
											},
											{
												"body": {
													"nativeSrc": "2665:152:6",
													"nodeType": "YulBlock",
													"src": "2665:152:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2682:1:6",
																		"nodeType": "YulLiteral",
																		"src": "2682:1:6",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2685:77:6",
																		"nodeType": "YulLiteral",
																		"src": "2685:77:6",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2675:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "2675:6:6"
																},
																"nativeSrc": "2675:88:6",
																"nodeType": "YulFunctionCall",
																"src": "2675:88:6"
															},
															"nativeSrc": "2675:88:6",
															"nodeType": "YulExpressionStatement",
															"src": "2675:88:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2779:1:6",
																		"nodeType": "YulLiteral",
																		"src": "2779:1:6",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2782:4:6",
																		"nodeType": "YulLiteral",
																		"src": "2782:4:6",
																		"type": "",
																		"value": "0x12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2772:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "2772:6:6"
																},
																"nativeSrc": "2772:15:6",
																"nodeType": "YulFunctionCall",
																"src": "2772:15:6"
															},
															"nativeSrc": "2772:15:6",
															"nodeType": "YulExpressionStatement",
															"src": "2772:15:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2803:1:6",
																		"nodeType": "YulLiteral",
																		"src": "2803:1:6",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2806:4:6",
																		"nodeType": "YulLiteral",
																		"src": "2806:4:6",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "2796:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "2796:6:6"
																},
																"nativeSrc": "2796:15:6",
																"nodeType": "YulFunctionCall",
																"src": "2796:15:6"
															},
															"nativeSrc": "2796:15:6",
															"nodeType": "YulExpressionStatement",
															"src": "2796:15:6"
														}
													]
												},
												"name": "panic_error_0x12",
												"nativeSrc": "2637:180:6",
												"nodeType": "YulFunctionDefinition",
												"src": "2637:180:6"
											},
											{
												"body": {
													"nativeSrc": "2851:152:6",
													"nodeType": "YulBlock",
													"src": "2851:152:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2868:1:6",
																		"nodeType": "YulLiteral",
																		"src": "2868:1:6",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2871:77:6",
																		"nodeType": "YulLiteral",
																		"src": "2871:77:6",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2861:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "2861:6:6"
																},
																"nativeSrc": "2861:88:6",
																"nodeType": "YulFunctionCall",
																"src": "2861:88:6"
															},
															"nativeSrc": "2861:88:6",
															"nodeType": "YulExpressionStatement",
															"src": "2861:88:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2965:1:6",
																		"nodeType": "YulLiteral",
																		"src": "2965:1:6",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2968:4:6",
																		"nodeType": "YulLiteral",
																		"src": "2968:4:6",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2958:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "2958:6:6"
																},
																"nativeSrc": "2958:15:6",
																"nodeType": "YulFunctionCall",
																"src": "2958:15:6"
															},
															"nativeSrc": "2958:15:6",
															"nodeType": "YulExpressionStatement",
															"src": "2958:15:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2989:1:6",
																		"nodeType": "YulLiteral",
																		"src": "2989:1:6",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2992:4:6",
																		"nodeType": "YulLiteral",
																		"src": "2992:4:6",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "2982:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "2982:6:6"
																},
																"nativeSrc": "2982:15:6",
																"nodeType": "YulFunctionCall",
																"src": "2982:15:6"
															},
															"nativeSrc": "2982:15:6",
															"nodeType": "YulExpressionStatement",
															"src": "2982:15:6"
														}
													]
												},
												"name": "panic_error_0x11",
												"nativeSrc": "2823:180:6",
												"nodeType": "YulFunctionDefinition",
												"src": "2823:180:6"
											},
											{
												"body": {
													"nativeSrc": "3051:143:6",
													"nodeType": "YulBlock",
													"src": "3051:143:6",
													"statements": [
														{
															"nativeSrc": "3061:25:6",
															"nodeType": "YulAssignment",
															"src": "3061:25:6",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "3084:1:6",
																		"nodeType": "YulIdentifier",
																		"src": "3084:1:6"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "3066:17:6",
																	"nodeType": "YulIdentifier",
																	"src": "3066:17:6"
																},
																"nativeSrc": "3066:20:6",
																"nodeType": "YulFunctionCall",
																"src": "3066:20:6"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nativeSrc": "3061:1:6",
																	"nodeType": "YulIdentifier",
																	"src": "3061:1:6"
																}
															]
														},
														{
															"nativeSrc": "3095:25:6",
															"nodeType": "YulAssignment",
															"src": "3095:25:6",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nativeSrc": "3118:1:6",
																		"nodeType": "YulIdentifier",
																		"src": "3118:1:6"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "3100:17:6",
																	"nodeType": "YulIdentifier",
																	"src": "3100:17:6"
																},
																"nativeSrc": "3100:20:6",
																"nodeType": "YulFunctionCall",
																"src": "3100:20:6"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nativeSrc": "3095:1:6",
																	"nodeType": "YulIdentifier",
																	"src": "3095:1:6"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "3142:22:6",
																"nodeType": "YulBlock",
																"src": "3142:22:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x12",
																				"nativeSrc": "3144:16:6",
																				"nodeType": "YulIdentifier",
																				"src": "3144:16:6"
																			},
																			"nativeSrc": "3144:18:6",
																			"nodeType": "YulFunctionCall",
																			"src": "3144:18:6"
																		},
																		"nativeSrc": "3144:18:6",
																		"nodeType": "YulExpressionStatement",
																		"src": "3144:18:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nativeSrc": "3139:1:6",
																		"nodeType": "YulIdentifier",
																		"src": "3139:1:6"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "3132:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "3132:6:6"
																},
																"nativeSrc": "3132:9:6",
																"nodeType": "YulFunctionCall",
																"src": "3132:9:6"
															},
															"nativeSrc": "3129:35:6",
															"nodeType": "YulIf",
															"src": "3129:35:6"
														},
														{
															"nativeSrc": "3174:14:6",
															"nodeType": "YulAssignment",
															"src": "3174:14:6",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "3183:1:6",
																		"nodeType": "YulIdentifier",
																		"src": "3183:1:6"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "3186:1:6",
																		"nodeType": "YulIdentifier",
																		"src": "3186:1:6"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nativeSrc": "3179:3:6",
																	"nodeType": "YulIdentifier",
																	"src": "3179:3:6"
																},
																"nativeSrc": "3179:9:6",
																"nodeType": "YulFunctionCall",
																"src": "3179:9:6"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nativeSrc": "3174:1:6",
																	"nodeType": "YulIdentifier",
																	"src": "3174:1:6"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nativeSrc": "3009:185:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "3040:1:6",
														"nodeType": "YulTypedName",
														"src": "3040:1:6",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "3043:1:6",
														"nodeType": "YulTypedName",
														"src": "3043:1:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nativeSrc": "3049:1:6",
														"nodeType": "YulTypedName",
														"src": "3049:1:6",
														"type": ""
													}
												],
												"src": "3009:185:6"
											},
											{
												"body": {
													"nativeSrc": "3248:362:6",
													"nodeType": "YulBlock",
													"src": "3248:362:6",
													"statements": [
														{
															"nativeSrc": "3258:25:6",
															"nodeType": "YulAssignment",
															"src": "3258:25:6",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "3281:1:6",
																		"nodeType": "YulIdentifier",
																		"src": "3281:1:6"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "3263:17:6",
																	"nodeType": "YulIdentifier",
																	"src": "3263:17:6"
																},
																"nativeSrc": "3263:20:6",
																"nodeType": "YulFunctionCall",
																"src": "3263:20:6"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nativeSrc": "3258:1:6",
																	"nodeType": "YulIdentifier",
																	"src": "3258:1:6"
																}
															]
														},
														{
															"nativeSrc": "3292:25:6",
															"nodeType": "YulAssignment",
															"src": "3292:25:6",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nativeSrc": "3315:1:6",
																		"nodeType": "YulIdentifier",
																		"src": "3315:1:6"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "3297:17:6",
																	"nodeType": "YulIdentifier",
																	"src": "3297:17:6"
																},
																"nativeSrc": "3297:20:6",
																"nodeType": "YulFunctionCall",
																"src": "3297:20:6"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nativeSrc": "3292:1:6",
																	"nodeType": "YulIdentifier",
																	"src": "3292:1:6"
																}
															]
														},
														{
															"nativeSrc": "3326:28:6",
															"nodeType": "YulVariableDeclaration",
															"src": "3326:28:6",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "3349:1:6",
																		"nodeType": "YulIdentifier",
																		"src": "3349:1:6"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "3352:1:6",
																		"nodeType": "YulIdentifier",
																		"src": "3352:1:6"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nativeSrc": "3345:3:6",
																	"nodeType": "YulIdentifier",
																	"src": "3345:3:6"
																},
																"nativeSrc": "3345:9:6",
																"nodeType": "YulFunctionCall",
																"src": "3345:9:6"
															},
															"variables": [
																{
																	"name": "product_raw",
																	"nativeSrc": "3330:11:6",
																	"nodeType": "YulTypedName",
																	"src": "3330:11:6",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "3363:41:6",
															"nodeType": "YulAssignment",
															"src": "3363:41:6",
															"value": {
																"arguments": [
																	{
																		"name": "product_raw",
																		"nativeSrc": "3392:11:6",
																		"nodeType": "YulIdentifier",
																		"src": "3392:11:6"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "3374:17:6",
																	"nodeType": "YulIdentifier",
																	"src": "3374:17:6"
																},
																"nativeSrc": "3374:30:6",
																"nodeType": "YulFunctionCall",
																"src": "3374:30:6"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nativeSrc": "3363:7:6",
																	"nodeType": "YulIdentifier",
																	"src": "3363:7:6"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "3581:22:6",
																"nodeType": "YulBlock",
																"src": "3581:22:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "3583:16:6",
																				"nodeType": "YulIdentifier",
																				"src": "3583:16:6"
																			},
																			"nativeSrc": "3583:18:6",
																			"nodeType": "YulFunctionCall",
																			"src": "3583:18:6"
																		},
																		"nativeSrc": "3583:18:6",
																		"nodeType": "YulExpressionStatement",
																		"src": "3583:18:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nativeSrc": "3514:1:6",
																						"nodeType": "YulIdentifier",
																						"src": "3514:1:6"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nativeSrc": "3507:6:6",
																					"nodeType": "YulIdentifier",
																					"src": "3507:6:6"
																				},
																				"nativeSrc": "3507:9:6",
																				"nodeType": "YulFunctionCall",
																				"src": "3507:9:6"
																			},
																			{
																				"arguments": [
																					{
																						"name": "y",
																						"nativeSrc": "3537:1:6",
																						"nodeType": "YulIdentifier",
																						"src": "3537:1:6"
																					},
																					{
																						"arguments": [
																							{
																								"name": "product",
																								"nativeSrc": "3544:7:6",
																								"nodeType": "YulIdentifier",
																								"src": "3544:7:6"
																							},
																							{
																								"name": "x",
																								"nativeSrc": "3553:1:6",
																								"nodeType": "YulIdentifier",
																								"src": "3553:1:6"
																							}
																						],
																						"functionName": {
																							"name": "div",
																							"nativeSrc": "3540:3:6",
																							"nodeType": "YulIdentifier",
																							"src": "3540:3:6"
																						},
																						"nativeSrc": "3540:15:6",
																						"nodeType": "YulFunctionCall",
																						"src": "3540:15:6"
																					}
																				],
																				"functionName": {
																					"name": "eq",
																					"nativeSrc": "3534:2:6",
																					"nodeType": "YulIdentifier",
																					"src": "3534:2:6"
																				},
																				"nativeSrc": "3534:22:6",
																				"nodeType": "YulFunctionCall",
																				"src": "3534:22:6"
																			}
																		],
																		"functionName": {
																			"name": "or",
																			"nativeSrc": "3487:2:6",
																			"nodeType": "YulIdentifier",
																			"src": "3487:2:6"
																		},
																		"nativeSrc": "3487:83:6",
																		"nodeType": "YulFunctionCall",
																		"src": "3487:83:6"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "3467:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "3467:6:6"
																},
																"nativeSrc": "3467:113:6",
																"nodeType": "YulFunctionCall",
																"src": "3467:113:6"
															},
															"nativeSrc": "3464:139:6",
															"nodeType": "YulIf",
															"src": "3464:139:6"
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nativeSrc": "3200:410:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "3231:1:6",
														"nodeType": "YulTypedName",
														"src": "3231:1:6",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "3234:1:6",
														"nodeType": "YulTypedName",
														"src": "3234:1:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nativeSrc": "3240:7:6",
														"nodeType": "YulTypedName",
														"src": "3240:7:6",
														"type": ""
													}
												],
												"src": "3200:410:6"
											},
											{
												"body": {
													"nativeSrc": "3661:149:6",
													"nodeType": "YulBlock",
													"src": "3661:149:6",
													"statements": [
														{
															"nativeSrc": "3671:25:6",
															"nodeType": "YulAssignment",
															"src": "3671:25:6",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "3694:1:6",
																		"nodeType": "YulIdentifier",
																		"src": "3694:1:6"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "3676:17:6",
																	"nodeType": "YulIdentifier",
																	"src": "3676:17:6"
																},
																"nativeSrc": "3676:20:6",
																"nodeType": "YulFunctionCall",
																"src": "3676:20:6"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nativeSrc": "3671:1:6",
																	"nodeType": "YulIdentifier",
																	"src": "3671:1:6"
																}
															]
														},
														{
															"nativeSrc": "3705:25:6",
															"nodeType": "YulAssignment",
															"src": "3705:25:6",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nativeSrc": "3728:1:6",
																		"nodeType": "YulIdentifier",
																		"src": "3728:1:6"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "3710:17:6",
																	"nodeType": "YulIdentifier",
																	"src": "3710:17:6"
																},
																"nativeSrc": "3710:20:6",
																"nodeType": "YulFunctionCall",
																"src": "3710:20:6"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nativeSrc": "3705:1:6",
																	"nodeType": "YulIdentifier",
																	"src": "3705:1:6"
																}
															]
														},
														{
															"nativeSrc": "3739:17:6",
															"nodeType": "YulAssignment",
															"src": "3739:17:6",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "3751:1:6",
																		"nodeType": "YulIdentifier",
																		"src": "3751:1:6"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "3754:1:6",
																		"nodeType": "YulIdentifier",
																		"src": "3754:1:6"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nativeSrc": "3747:3:6",
																	"nodeType": "YulIdentifier",
																	"src": "3747:3:6"
																},
																"nativeSrc": "3747:9:6",
																"nodeType": "YulFunctionCall",
																"src": "3747:9:6"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nativeSrc": "3739:4:6",
																	"nodeType": "YulIdentifier",
																	"src": "3739:4:6"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "3781:22:6",
																"nodeType": "YulBlock",
																"src": "3781:22:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "3783:16:6",
																				"nodeType": "YulIdentifier",
																				"src": "3783:16:6"
																			},
																			"nativeSrc": "3783:18:6",
																			"nodeType": "YulFunctionCall",
																			"src": "3783:18:6"
																		},
																		"nativeSrc": "3783:18:6",
																		"nodeType": "YulExpressionStatement",
																		"src": "3783:18:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "diff",
																		"nativeSrc": "3772:4:6",
																		"nodeType": "YulIdentifier",
																		"src": "3772:4:6"
																	},
																	{
																		"name": "x",
																		"nativeSrc": "3778:1:6",
																		"nodeType": "YulIdentifier",
																		"src": "3778:1:6"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "3769:2:6",
																	"nodeType": "YulIdentifier",
																	"src": "3769:2:6"
																},
																"nativeSrc": "3769:11:6",
																"nodeType": "YulFunctionCall",
																"src": "3769:11:6"
															},
															"nativeSrc": "3766:37:6",
															"nodeType": "YulIf",
															"src": "3766:37:6"
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nativeSrc": "3616:194:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "3647:1:6",
														"nodeType": "YulTypedName",
														"src": "3647:1:6",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "3650:1:6",
														"nodeType": "YulTypedName",
														"src": "3650:1:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nativeSrc": "3656:4:6",
														"nodeType": "YulTypedName",
														"src": "3656:4:6",
														"type": ""
													}
												],
												"src": "3616:194:6"
											},
											{
												"body": {
													"nativeSrc": "3856:35:6",
													"nodeType": "YulBlock",
													"src": "3856:35:6",
													"statements": [
														{
															"nativeSrc": "3866:19:6",
															"nodeType": "YulAssignment",
															"src": "3866:19:6",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "3882:2:6",
																		"nodeType": "YulLiteral",
																		"src": "3882:2:6",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "3876:5:6",
																	"nodeType": "YulIdentifier",
																	"src": "3876:5:6"
																},
																"nativeSrc": "3876:9:6",
																"nodeType": "YulFunctionCall",
																"src": "3876:9:6"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nativeSrc": "3866:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "3866:6:6"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nativeSrc": "3816:75:6",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nativeSrc": "3849:6:6",
														"nodeType": "YulTypedName",
														"src": "3849:6:6",
														"type": ""
													}
												],
												"src": "3816:75:6"
											},
											{
												"body": {
													"nativeSrc": "3986:28:6",
													"nodeType": "YulBlock",
													"src": "3986:28:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "4003:1:6",
																		"nodeType": "YulLiteral",
																		"src": "4003:1:6",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4006:1:6",
																		"nodeType": "YulLiteral",
																		"src": "4006:1:6",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "3996:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "3996:6:6"
																},
																"nativeSrc": "3996:12:6",
																"nodeType": "YulFunctionCall",
																"src": "3996:12:6"
															},
															"nativeSrc": "3996:12:6",
															"nodeType": "YulExpressionStatement",
															"src": "3996:12:6"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nativeSrc": "3897:117:6",
												"nodeType": "YulFunctionDefinition",
												"src": "3897:117:6"
											},
											{
												"body": {
													"nativeSrc": "4109:28:6",
													"nodeType": "YulBlock",
													"src": "4109:28:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "4126:1:6",
																		"nodeType": "YulLiteral",
																		"src": "4126:1:6",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4129:1:6",
																		"nodeType": "YulLiteral",
																		"src": "4129:1:6",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "4119:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "4119:6:6"
																},
																"nativeSrc": "4119:12:6",
																"nodeType": "YulFunctionCall",
																"src": "4119:12:6"
															},
															"nativeSrc": "4119:12:6",
															"nodeType": "YulExpressionStatement",
															"src": "4119:12:6"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nativeSrc": "4020:117:6",
												"nodeType": "YulFunctionDefinition",
												"src": "4020:117:6"
											},
											{
												"body": {
													"nativeSrc": "4186:43:6",
													"nodeType": "YulBlock",
													"src": "4186:43:6",
													"statements": [
														{
															"nativeSrc": "4196:27:6",
															"nodeType": "YulAssignment",
															"src": "4196:27:6",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "4211:5:6",
																		"nodeType": "YulIdentifier",
																		"src": "4211:5:6"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4218:4:6",
																		"nodeType": "YulLiteral",
																		"src": "4218:4:6",
																		"type": "",
																		"value": "0xff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "4207:3:6",
																	"nodeType": "YulIdentifier",
																	"src": "4207:3:6"
																},
																"nativeSrc": "4207:16:6",
																"nodeType": "YulFunctionCall",
																"src": "4207:16:6"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "4196:7:6",
																	"nodeType": "YulIdentifier",
																	"src": "4196:7:6"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint8",
												"nativeSrc": "4143:86:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "4168:5:6",
														"nodeType": "YulTypedName",
														"src": "4168:5:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "4178:7:6",
														"nodeType": "YulTypedName",
														"src": "4178:7:6",
														"type": ""
													}
												],
												"src": "4143:86:6"
											},
											{
												"body": {
													"nativeSrc": "4276:77:6",
													"nodeType": "YulBlock",
													"src": "4276:77:6",
													"statements": [
														{
															"body": {
																"nativeSrc": "4331:16:6",
																"nodeType": "YulBlock",
																"src": "4331:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "4340:1:6",
																					"nodeType": "YulLiteral",
																					"src": "4340:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "4343:1:6",
																					"nodeType": "YulLiteral",
																					"src": "4343:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "4333:6:6",
																				"nodeType": "YulIdentifier",
																				"src": "4333:6:6"
																			},
																			"nativeSrc": "4333:12:6",
																			"nodeType": "YulFunctionCall",
																			"src": "4333:12:6"
																		},
																		"nativeSrc": "4333:12:6",
																		"nodeType": "YulExpressionStatement",
																		"src": "4333:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "4299:5:6",
																				"nodeType": "YulIdentifier",
																				"src": "4299:5:6"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "4322:5:6",
																						"nodeType": "YulIdentifier",
																						"src": "4322:5:6"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint8",
																					"nativeSrc": "4306:15:6",
																					"nodeType": "YulIdentifier",
																					"src": "4306:15:6"
																				},
																				"nativeSrc": "4306:22:6",
																				"nodeType": "YulFunctionCall",
																				"src": "4306:22:6"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "4296:2:6",
																			"nodeType": "YulIdentifier",
																			"src": "4296:2:6"
																		},
																		"nativeSrc": "4296:33:6",
																		"nodeType": "YulFunctionCall",
																		"src": "4296:33:6"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "4289:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "4289:6:6"
																},
																"nativeSrc": "4289:41:6",
																"nodeType": "YulFunctionCall",
																"src": "4289:41:6"
															},
															"nativeSrc": "4286:61:6",
															"nodeType": "YulIf",
															"src": "4286:61:6"
														}
													]
												},
												"name": "validator_revert_t_uint8",
												"nativeSrc": "4235:118:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "4269:5:6",
														"nodeType": "YulTypedName",
														"src": "4269:5:6",
														"type": ""
													}
												],
												"src": "4235:118:6"
											},
											{
												"body": {
													"nativeSrc": "4420:78:6",
													"nodeType": "YulBlock",
													"src": "4420:78:6",
													"statements": [
														{
															"nativeSrc": "4430:22:6",
															"nodeType": "YulAssignment",
															"src": "4430:22:6",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "4445:6:6",
																		"nodeType": "YulIdentifier",
																		"src": "4445:6:6"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "4439:5:6",
																	"nodeType": "YulIdentifier",
																	"src": "4439:5:6"
																},
																"nativeSrc": "4439:13:6",
																"nodeType": "YulFunctionCall",
																"src": "4439:13:6"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "4430:5:6",
																	"nodeType": "YulIdentifier",
																	"src": "4430:5:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "4486:5:6",
																		"nodeType": "YulIdentifier",
																		"src": "4486:5:6"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint8",
																	"nativeSrc": "4461:24:6",
																	"nodeType": "YulIdentifier",
																	"src": "4461:24:6"
																},
																"nativeSrc": "4461:31:6",
																"nodeType": "YulFunctionCall",
																"src": "4461:31:6"
															},
															"nativeSrc": "4461:31:6",
															"nodeType": "YulExpressionStatement",
															"src": "4461:31:6"
														}
													]
												},
												"name": "abi_decode_t_uint8_fromMemory",
												"nativeSrc": "4359:139:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "4398:6:6",
														"nodeType": "YulTypedName",
														"src": "4398:6:6",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "4406:3:6",
														"nodeType": "YulTypedName",
														"src": "4406:3:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "4414:5:6",
														"nodeType": "YulTypedName",
														"src": "4414:5:6",
														"type": ""
													}
												],
												"src": "4359:139:6"
											},
											{
												"body": {
													"nativeSrc": "4579:272:6",
													"nodeType": "YulBlock",
													"src": "4579:272:6",
													"statements": [
														{
															"body": {
																"nativeSrc": "4625:83:6",
																"nodeType": "YulBlock",
																"src": "4625:83:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "4627:77:6",
																				"nodeType": "YulIdentifier",
																				"src": "4627:77:6"
																			},
																			"nativeSrc": "4627:79:6",
																			"nodeType": "YulFunctionCall",
																			"src": "4627:79:6"
																		},
																		"nativeSrc": "4627:79:6",
																		"nodeType": "YulExpressionStatement",
																		"src": "4627:79:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "4600:7:6",
																				"nodeType": "YulIdentifier",
																				"src": "4600:7:6"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "4609:9:6",
																				"nodeType": "YulIdentifier",
																				"src": "4609:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "4596:3:6",
																			"nodeType": "YulIdentifier",
																			"src": "4596:3:6"
																		},
																		"nativeSrc": "4596:23:6",
																		"nodeType": "YulFunctionCall",
																		"src": "4596:23:6"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4621:2:6",
																		"nodeType": "YulLiteral",
																		"src": "4621:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "4592:3:6",
																	"nodeType": "YulIdentifier",
																	"src": "4592:3:6"
																},
																"nativeSrc": "4592:32:6",
																"nodeType": "YulFunctionCall",
																"src": "4592:32:6"
															},
															"nativeSrc": "4589:119:6",
															"nodeType": "YulIf",
															"src": "4589:119:6"
														},
														{
															"nativeSrc": "4718:126:6",
															"nodeType": "YulBlock",
															"src": "4718:126:6",
															"statements": [
																{
																	"nativeSrc": "4733:15:6",
																	"nodeType": "YulVariableDeclaration",
																	"src": "4733:15:6",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "4747:1:6",
																		"nodeType": "YulLiteral",
																		"src": "4747:1:6",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "4737:6:6",
																			"nodeType": "YulTypedName",
																			"src": "4737:6:6",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "4762:72:6",
																	"nodeType": "YulAssignment",
																	"src": "4762:72:6",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "4806:9:6",
																						"nodeType": "YulIdentifier",
																						"src": "4806:9:6"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "4817:6:6",
																						"nodeType": "YulIdentifier",
																						"src": "4817:6:6"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "4802:3:6",
																					"nodeType": "YulIdentifier",
																					"src": "4802:3:6"
																				},
																				"nativeSrc": "4802:22:6",
																				"nodeType": "YulFunctionCall",
																				"src": "4802:22:6"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "4826:7:6",
																				"nodeType": "YulIdentifier",
																				"src": "4826:7:6"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint8_fromMemory",
																			"nativeSrc": "4772:29:6",
																			"nodeType": "YulIdentifier",
																			"src": "4772:29:6"
																		},
																		"nativeSrc": "4772:62:6",
																		"nodeType": "YulFunctionCall",
																		"src": "4772:62:6"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "4762:6:6",
																			"nodeType": "YulIdentifier",
																			"src": "4762:6:6"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint8_fromMemory",
												"nativeSrc": "4504:347:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "4549:9:6",
														"nodeType": "YulTypedName",
														"src": "4549:9:6",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "4560:7:6",
														"nodeType": "YulTypedName",
														"src": "4560:7:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "4572:6:6",
														"nodeType": "YulTypedName",
														"src": "4572:6:6",
														"type": ""
													}
												],
												"src": "4504:347:6"
											},
											{
												"body": {
													"nativeSrc": "4902:51:6",
													"nodeType": "YulBlock",
													"src": "4902:51:6",
													"statements": [
														{
															"nativeSrc": "4912:35:6",
															"nodeType": "YulAssignment",
															"src": "4912:35:6",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "4941:5:6",
																		"nodeType": "YulIdentifier",
																		"src": "4941:5:6"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nativeSrc": "4923:17:6",
																	"nodeType": "YulIdentifier",
																	"src": "4923:17:6"
																},
																"nativeSrc": "4923:24:6",
																"nodeType": "YulFunctionCall",
																"src": "4923:24:6"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "4912:7:6",
																	"nodeType": "YulIdentifier",
																	"src": "4912:7:6"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nativeSrc": "4857:96:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "4884:5:6",
														"nodeType": "YulTypedName",
														"src": "4884:5:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "4894:7:6",
														"nodeType": "YulTypedName",
														"src": "4894:7:6",
														"type": ""
													}
												],
												"src": "4857:96:6"
											},
											{
												"body": {
													"nativeSrc": "5024:53:6",
													"nodeType": "YulBlock",
													"src": "5024:53:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "5041:3:6",
																		"nodeType": "YulIdentifier",
																		"src": "5041:3:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "5064:5:6",
																				"nodeType": "YulIdentifier",
																				"src": "5064:5:6"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nativeSrc": "5046:17:6",
																			"nodeType": "YulIdentifier",
																			"src": "5046:17:6"
																		},
																		"nativeSrc": "5046:24:6",
																		"nodeType": "YulFunctionCall",
																		"src": "5046:24:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5034:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "5034:6:6"
																},
																"nativeSrc": "5034:37:6",
																"nodeType": "YulFunctionCall",
																"src": "5034:37:6"
															},
															"nativeSrc": "5034:37:6",
															"nodeType": "YulExpressionStatement",
															"src": "5034:37:6"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nativeSrc": "4959:118:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "5012:5:6",
														"nodeType": "YulTypedName",
														"src": "5012:5:6",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "5019:3:6",
														"nodeType": "YulTypedName",
														"src": "5019:3:6",
														"type": ""
													}
												],
												"src": "4959:118:6"
											},
											{
												"body": {
													"nativeSrc": "5237:288:6",
													"nodeType": "YulBlock",
													"src": "5237:288:6",
													"statements": [
														{
															"nativeSrc": "5247:26:6",
															"nodeType": "YulAssignment",
															"src": "5247:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "5259:9:6",
																		"nodeType": "YulIdentifier",
																		"src": "5259:9:6"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5270:2:6",
																		"nodeType": "YulLiteral",
																		"src": "5270:2:6",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "5255:3:6",
																	"nodeType": "YulIdentifier",
																	"src": "5255:3:6"
																},
																"nativeSrc": "5255:18:6",
																"nodeType": "YulFunctionCall",
																"src": "5255:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "5247:4:6",
																	"nodeType": "YulIdentifier",
																	"src": "5247:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "5327:6:6",
																		"nodeType": "YulIdentifier",
																		"src": "5327:6:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5340:9:6",
																				"nodeType": "YulIdentifier",
																				"src": "5340:9:6"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5351:1:6",
																				"nodeType": "YulLiteral",
																				"src": "5351:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5336:3:6",
																			"nodeType": "YulIdentifier",
																			"src": "5336:3:6"
																		},
																		"nativeSrc": "5336:17:6",
																		"nodeType": "YulFunctionCall",
																		"src": "5336:17:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nativeSrc": "5283:43:6",
																	"nodeType": "YulIdentifier",
																	"src": "5283:43:6"
																},
																"nativeSrc": "5283:71:6",
																"nodeType": "YulFunctionCall",
																"src": "5283:71:6"
															},
															"nativeSrc": "5283:71:6",
															"nodeType": "YulExpressionStatement",
															"src": "5283:71:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nativeSrc": "5408:6:6",
																		"nodeType": "YulIdentifier",
																		"src": "5408:6:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5421:9:6",
																				"nodeType": "YulIdentifier",
																				"src": "5421:9:6"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5432:2:6",
																				"nodeType": "YulLiteral",
																				"src": "5432:2:6",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5417:3:6",
																			"nodeType": "YulIdentifier",
																			"src": "5417:3:6"
																		},
																		"nativeSrc": "5417:18:6",
																		"nodeType": "YulFunctionCall",
																		"src": "5417:18:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nativeSrc": "5364:43:6",
																	"nodeType": "YulIdentifier",
																	"src": "5364:43:6"
																},
																"nativeSrc": "5364:72:6",
																"nodeType": "YulFunctionCall",
																"src": "5364:72:6"
															},
															"nativeSrc": "5364:72:6",
															"nodeType": "YulExpressionStatement",
															"src": "5364:72:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nativeSrc": "5490:6:6",
																		"nodeType": "YulIdentifier",
																		"src": "5490:6:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5503:9:6",
																				"nodeType": "YulIdentifier",
																				"src": "5503:9:6"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5514:2:6",
																				"nodeType": "YulLiteral",
																				"src": "5514:2:6",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5499:3:6",
																			"nodeType": "YulIdentifier",
																			"src": "5499:3:6"
																		},
																		"nativeSrc": "5499:18:6",
																		"nodeType": "YulFunctionCall",
																		"src": "5499:18:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "5446:43:6",
																	"nodeType": "YulIdentifier",
																	"src": "5446:43:6"
																},
																"nativeSrc": "5446:72:6",
																"nodeType": "YulFunctionCall",
																"src": "5446:72:6"
															},
															"nativeSrc": "5446:72:6",
															"nodeType": "YulExpressionStatement",
															"src": "5446:72:6"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
												"nativeSrc": "5083:442:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "5193:9:6",
														"nodeType": "YulTypedName",
														"src": "5193:9:6",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "5205:6:6",
														"nodeType": "YulTypedName",
														"src": "5205:6:6",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "5213:6:6",
														"nodeType": "YulTypedName",
														"src": "5213:6:6",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "5221:6:6",
														"nodeType": "YulTypedName",
														"src": "5221:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "5232:4:6",
														"nodeType": "YulTypedName",
														"src": "5232:4:6",
														"type": ""
													}
												],
												"src": "5083:442:6"
											},
											{
												"body": {
													"nativeSrc": "5573:48:6",
													"nodeType": "YulBlock",
													"src": "5573:48:6",
													"statements": [
														{
															"nativeSrc": "5583:32:6",
															"nodeType": "YulAssignment",
															"src": "5583:32:6",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "5608:5:6",
																				"nodeType": "YulIdentifier",
																				"src": "5608:5:6"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nativeSrc": "5601:6:6",
																			"nodeType": "YulIdentifier",
																			"src": "5601:6:6"
																		},
																		"nativeSrc": "5601:13:6",
																		"nodeType": "YulFunctionCall",
																		"src": "5601:13:6"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "5594:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "5594:6:6"
																},
																"nativeSrc": "5594:21:6",
																"nodeType": "YulFunctionCall",
																"src": "5594:21:6"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "5583:7:6",
																	"nodeType": "YulIdentifier",
																	"src": "5583:7:6"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nativeSrc": "5531:90:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "5555:5:6",
														"nodeType": "YulTypedName",
														"src": "5555:5:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "5565:7:6",
														"nodeType": "YulTypedName",
														"src": "5565:7:6",
														"type": ""
													}
												],
												"src": "5531:90:6"
											},
											{
												"body": {
													"nativeSrc": "5667:76:6",
													"nodeType": "YulBlock",
													"src": "5667:76:6",
													"statements": [
														{
															"body": {
																"nativeSrc": "5721:16:6",
																"nodeType": "YulBlock",
																"src": "5721:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "5730:1:6",
																					"nodeType": "YulLiteral",
																					"src": "5730:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "5733:1:6",
																					"nodeType": "YulLiteral",
																					"src": "5733:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "5723:6:6",
																				"nodeType": "YulIdentifier",
																				"src": "5723:6:6"
																			},
																			"nativeSrc": "5723:12:6",
																			"nodeType": "YulFunctionCall",
																			"src": "5723:12:6"
																		},
																		"nativeSrc": "5723:12:6",
																		"nodeType": "YulExpressionStatement",
																		"src": "5723:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "5690:5:6",
																				"nodeType": "YulIdentifier",
																				"src": "5690:5:6"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "5712:5:6",
																						"nodeType": "YulIdentifier",
																						"src": "5712:5:6"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_bool",
																					"nativeSrc": "5697:14:6",
																					"nodeType": "YulIdentifier",
																					"src": "5697:14:6"
																				},
																				"nativeSrc": "5697:21:6",
																				"nodeType": "YulFunctionCall",
																				"src": "5697:21:6"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "5687:2:6",
																			"nodeType": "YulIdentifier",
																			"src": "5687:2:6"
																		},
																		"nativeSrc": "5687:32:6",
																		"nodeType": "YulFunctionCall",
																		"src": "5687:32:6"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "5680:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "5680:6:6"
																},
																"nativeSrc": "5680:40:6",
																"nodeType": "YulFunctionCall",
																"src": "5680:40:6"
															},
															"nativeSrc": "5677:60:6",
															"nodeType": "YulIf",
															"src": "5677:60:6"
														}
													]
												},
												"name": "validator_revert_t_bool",
												"nativeSrc": "5627:116:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "5660:5:6",
														"nodeType": "YulTypedName",
														"src": "5660:5:6",
														"type": ""
													}
												],
												"src": "5627:116:6"
											},
											{
												"body": {
													"nativeSrc": "5809:77:6",
													"nodeType": "YulBlock",
													"src": "5809:77:6",
													"statements": [
														{
															"nativeSrc": "5819:22:6",
															"nodeType": "YulAssignment",
															"src": "5819:22:6",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "5834:6:6",
																		"nodeType": "YulIdentifier",
																		"src": "5834:6:6"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "5828:5:6",
																	"nodeType": "YulIdentifier",
																	"src": "5828:5:6"
																},
																"nativeSrc": "5828:13:6",
																"nodeType": "YulFunctionCall",
																"src": "5828:13:6"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "5819:5:6",
																	"nodeType": "YulIdentifier",
																	"src": "5819:5:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "5874:5:6",
																		"nodeType": "YulIdentifier",
																		"src": "5874:5:6"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bool",
																	"nativeSrc": "5850:23:6",
																	"nodeType": "YulIdentifier",
																	"src": "5850:23:6"
																},
																"nativeSrc": "5850:30:6",
																"nodeType": "YulFunctionCall",
																"src": "5850:30:6"
															},
															"nativeSrc": "5850:30:6",
															"nodeType": "YulExpressionStatement",
															"src": "5850:30:6"
														}
													]
												},
												"name": "abi_decode_t_bool_fromMemory",
												"nativeSrc": "5749:137:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "5787:6:6",
														"nodeType": "YulTypedName",
														"src": "5787:6:6",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "5795:3:6",
														"nodeType": "YulTypedName",
														"src": "5795:3:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "5803:5:6",
														"nodeType": "YulTypedName",
														"src": "5803:5:6",
														"type": ""
													}
												],
												"src": "5749:137:6"
											},
											{
												"body": {
													"nativeSrc": "5966:271:6",
													"nodeType": "YulBlock",
													"src": "5966:271:6",
													"statements": [
														{
															"body": {
																"nativeSrc": "6012:83:6",
																"nodeType": "YulBlock",
																"src": "6012:83:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "6014:77:6",
																				"nodeType": "YulIdentifier",
																				"src": "6014:77:6"
																			},
																			"nativeSrc": "6014:79:6",
																			"nodeType": "YulFunctionCall",
																			"src": "6014:79:6"
																		},
																		"nativeSrc": "6014:79:6",
																		"nodeType": "YulExpressionStatement",
																		"src": "6014:79:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "5987:7:6",
																				"nodeType": "YulIdentifier",
																				"src": "5987:7:6"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "5996:9:6",
																				"nodeType": "YulIdentifier",
																				"src": "5996:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "5983:3:6",
																			"nodeType": "YulIdentifier",
																			"src": "5983:3:6"
																		},
																		"nativeSrc": "5983:23:6",
																		"nodeType": "YulFunctionCall",
																		"src": "5983:23:6"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6008:2:6",
																		"nodeType": "YulLiteral",
																		"src": "6008:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "5979:3:6",
																	"nodeType": "YulIdentifier",
																	"src": "5979:3:6"
																},
																"nativeSrc": "5979:32:6",
																"nodeType": "YulFunctionCall",
																"src": "5979:32:6"
															},
															"nativeSrc": "5976:119:6",
															"nodeType": "YulIf",
															"src": "5976:119:6"
														},
														{
															"nativeSrc": "6105:125:6",
															"nodeType": "YulBlock",
															"src": "6105:125:6",
															"statements": [
																{
																	"nativeSrc": "6120:15:6",
																	"nodeType": "YulVariableDeclaration",
																	"src": "6120:15:6",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "6134:1:6",
																		"nodeType": "YulLiteral",
																		"src": "6134:1:6",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "6124:6:6",
																			"nodeType": "YulTypedName",
																			"src": "6124:6:6",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "6149:71:6",
																	"nodeType": "YulAssignment",
																	"src": "6149:71:6",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "6192:9:6",
																						"nodeType": "YulIdentifier",
																						"src": "6192:9:6"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "6203:6:6",
																						"nodeType": "YulIdentifier",
																						"src": "6203:6:6"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "6188:3:6",
																					"nodeType": "YulIdentifier",
																					"src": "6188:3:6"
																				},
																				"nativeSrc": "6188:22:6",
																				"nodeType": "YulFunctionCall",
																				"src": "6188:22:6"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "6212:7:6",
																				"nodeType": "YulIdentifier",
																				"src": "6212:7:6"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bool_fromMemory",
																			"nativeSrc": "6159:28:6",
																			"nodeType": "YulIdentifier",
																			"src": "6159:28:6"
																		},
																		"nativeSrc": "6159:61:6",
																		"nodeType": "YulFunctionCall",
																		"src": "6159:61:6"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "6149:6:6",
																			"nodeType": "YulIdentifier",
																			"src": "6149:6:6"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nativeSrc": "5892:345:6",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "5936:9:6",
														"nodeType": "YulTypedName",
														"src": "5936:9:6",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "5947:7:6",
														"nodeType": "YulTypedName",
														"src": "5947:7:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "5959:6:6",
														"nodeType": "YulTypedName",
														"src": "5959:6:6",
														"type": ""
													}
												],
												"src": "5892:345:6"
											}
										]
									},
									"contents": "{\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint160_to_t_uint160(value) -> converted {\n        converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))\n    }\n\n    function convert_t_uint160_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_uint160(value)\n    }\n\n    function convert_t_contract$_ERC20_$651_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_address(value)\n    }\n\n    function abi_encode_t_contract$_ERC20_$651_to_t_address_fromStack(value, pos) {\n        mstore(pos, convert_t_contract$_ERC20_$651_to_t_address(value))\n    }\n\n    function abi_encode_tuple_t_contract$_ERC20_$651__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_contract$_ERC20_$651_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_4bcb9c905bf13979cd031d103f2aded1e212b50c9aadd57365e985f35a025788(memPtr) {\n\n        mstore(add(memPtr, 0), \"You do not have enough eth.\")\n\n    }\n\n    function abi_encode_t_stringliteral_4bcb9c905bf13979cd031d103f2aded1e212b50c9aadd57365e985f35a025788_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 27)\n        store_literal_in_memory_4bcb9c905bf13979cd031d103f2aded1e212b50c9aadd57365e985f35a025788(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_4bcb9c905bf13979cd031d103f2aded1e212b50c9aadd57365e985f35a025788__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_4bcb9c905bf13979cd031d103f2aded1e212b50c9aadd57365e985f35a025788_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        let product_raw := mul(x, y)\n        product := cleanup_t_uint256(product_raw)\n\n        // overflow, if x != 0 and y != product/x\n        if iszero(\n            or(\n                iszero(x),\n                eq(y, div(product, x))\n            )\n        ) { panic_error_0x11() }\n\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function validator_revert_t_uint8(value) {\n        if iszero(eq(value, cleanup_t_uint8(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint8_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint8(value)\n    }\n\n    function abi_decode_tuple_t_uint8_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint8_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n}\n",
									"id": 6,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405260043610610033575f3560e01c80632f8de81014610037578063e7e7865214610061578063fc0c546a1461006b575b5f80fd5b348015610042575f80fd5b5061004b610095565b60405161005891906102f5565b60405180910390f35b61006961009a565b005b348015610076575f80fd5b5061007f6102b8565b60405161008c9190610388565b60405180910390f35b5f5481565b5f543410156100de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100d5906103fb565b60405180910390fd5b5f8054346100ec9190610473565b90505f8054826100fc91906104a3565b3461010791906104e4565b905060015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff163360015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101d3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101f79190610551565b60ff16600a8761020791906104a3565b61021191906104a3565b6040518463ffffffff1660e01b815260040161022f9392919061059c565b6020604051808303815f875af115801561024b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061026f9190610606565b503373ffffffffffffffffffffffffffffffffffffffff166108fc8290811502906040515f60405180830381858888f193505050501580156102b3573d5f803e3d5ffd5b505050565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f819050919050565b6102ef816102dd565b82525050565b5f6020820190506103085f8301846102e6565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f819050919050565b5f61035061034b6103468461030e565b61032d565b61030e565b9050919050565b5f61036182610336565b9050919050565b5f61037282610357565b9050919050565b61038281610368565b82525050565b5f60208201905061039b5f830184610379565b92915050565b5f82825260208201905092915050565b7f596f7520646f206e6f74206861766520656e6f756768206574682e00000000005f82015250565b5f6103e5601b836103a1565b91506103f0826103b1565b602082019050919050565b5f6020820190508181035f830152610412816103d9565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61047d826102dd565b9150610488836102dd565b92508261049857610497610419565b5b828204905092915050565b5f6104ad826102dd565b91506104b8836102dd565b92508282026104c6816102dd565b915082820484148315176104dd576104dc610446565b5b5092915050565b5f6104ee826102dd565b91506104f9836102dd565b925082820390508181111561051157610510610446565b5b92915050565b5f80fd5b5f60ff82169050919050565b6105308161051b565b811461053a575f80fd5b50565b5f8151905061054b81610527565b92915050565b5f6020828403121561056657610565610517565b5b5f6105738482850161053d565b91505092915050565b5f6105868261030e565b9050919050565b6105968161057c565b82525050565b5f6060820190506105af5f83018661058d565b6105bc602083018561058d565b6105c960408301846102e6565b949350505050565b5f8115159050919050565b6105e5816105d1565b81146105ef575f80fd5b50565b5f81519050610600816105dc565b92915050565b5f6020828403121561061b5761061a610517565b5b5f610628848285016105f2565b9150509291505056fea2646970667358221220e448a89b95cb4145f6cad1f9eb1f7013dc4d81fc40625942860e424943c66b0a64736f6c634300081a0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x33 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x2F8DE810 EQ PUSH2 0x37 JUMPI DUP1 PUSH4 0xE7E78652 EQ PUSH2 0x61 JUMPI DUP1 PUSH4 0xFC0C546A EQ PUSH2 0x6B JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x4B PUSH2 0x95 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x58 SWAP2 SWAP1 PUSH2 0x2F5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x69 PUSH2 0x9A JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x76 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x7F PUSH2 0x2B8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C SWAP2 SWAP1 PUSH2 0x388 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH0 SLOAD DUP2 JUMP JUMPDEST PUSH0 SLOAD CALLVALUE LT ISZERO PUSH2 0xDE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD5 SWAP1 PUSH2 0x3FB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP1 SLOAD CALLVALUE PUSH2 0xEC SWAP2 SWAP1 PUSH2 0x473 JUMP JUMPDEST SWAP1 POP PUSH0 DUP1 SLOAD DUP3 PUSH2 0xFC SWAP2 SWAP1 PUSH2 0x4A3 JUMP JUMPDEST CALLVALUE PUSH2 0x107 SWAP2 SWAP1 PUSH2 0x4E4 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD PUSH1 0x2 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH1 0x1 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1D3 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1F7 SWAP2 SWAP1 PUSH2 0x551 JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0xA DUP8 PUSH2 0x207 SWAP2 SWAP1 PUSH2 0x4A3 JUMP JUMPDEST PUSH2 0x211 SWAP2 SWAP1 PUSH2 0x4A3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x22F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x59C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x24B JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x26F SWAP2 SWAP1 PUSH2 0x606 JUMP JUMPDEST POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x2B3 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2EF DUP2 PUSH2 0x2DD JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x308 PUSH0 DUP4 ADD DUP5 PUSH2 0x2E6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x350 PUSH2 0x34B PUSH2 0x346 DUP5 PUSH2 0x30E JUMP JUMPDEST PUSH2 0x32D JUMP JUMPDEST PUSH2 0x30E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x361 DUP3 PUSH2 0x336 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x372 DUP3 PUSH2 0x357 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x382 DUP2 PUSH2 0x368 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x39B PUSH0 DUP4 ADD DUP5 PUSH2 0x379 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x596F7520646F206E6F74206861766520656E6F756768206574682E0000000000 PUSH0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH0 PUSH2 0x3E5 PUSH1 0x1B DUP4 PUSH2 0x3A1 JUMP JUMPDEST SWAP2 POP PUSH2 0x3F0 DUP3 PUSH2 0x3B1 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x412 DUP2 PUSH2 0x3D9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0x47D DUP3 PUSH2 0x2DD JUMP JUMPDEST SWAP2 POP PUSH2 0x488 DUP4 PUSH2 0x2DD JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x498 JUMPI PUSH2 0x497 PUSH2 0x419 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x4AD DUP3 PUSH2 0x2DD JUMP JUMPDEST SWAP2 POP PUSH2 0x4B8 DUP4 PUSH2 0x2DD JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x4C6 DUP2 PUSH2 0x2DD JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0x4DD JUMPI PUSH2 0x4DC PUSH2 0x446 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x4EE DUP3 PUSH2 0x2DD JUMP JUMPDEST SWAP2 POP PUSH2 0x4F9 DUP4 PUSH2 0x2DD JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x511 JUMPI PUSH2 0x510 PUSH2 0x446 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x530 DUP2 PUSH2 0x51B JUMP JUMPDEST DUP2 EQ PUSH2 0x53A JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0x54B DUP2 PUSH2 0x527 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x566 JUMPI PUSH2 0x565 PUSH2 0x517 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x573 DUP5 DUP3 DUP6 ADD PUSH2 0x53D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x586 DUP3 PUSH2 0x30E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x596 DUP2 PUSH2 0x57C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x5AF PUSH0 DUP4 ADD DUP7 PUSH2 0x58D JUMP JUMPDEST PUSH2 0x5BC PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x58D JUMP JUMPDEST PUSH2 0x5C9 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2E6 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5E5 DUP2 PUSH2 0x5D1 JUMP JUMPDEST DUP2 EQ PUSH2 0x5EF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0x600 DUP2 PUSH2 0x5DC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x61B JUMPI PUSH2 0x61A PUSH2 0x517 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x628 DUP5 DUP3 DUP6 ADD PUSH2 0x5F2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE4 BASEFEE 0xA8 SWAP12 SWAP6 0xCB COINBASE GASLIMIT 0xF6 0xCA 0xD1 0xF9 0xEB 0x1F PUSH17 0x13DC4D81FC40625942860E424943C66B0A PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "119:679:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;146:37;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;353:438;;;:::i;:::-;;190:18;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;146:37;;;;:::o;353:438::-;425:15;;412:9;:28;;404:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;483:20;518:15;;506:9;:27;;;;:::i;:::-;483:50;;544:14;591:15;;573;:33;;;;:::i;:::-;561:9;:45;;;;:::i;:::-;544:62;;617:5;;;;;;;;;;;:18;;;636:10;;;;;;;;;;;648;683:5;;;;;;;;;;;:14;;;:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;660:39;;678:2;660:15;:20;;;;:::i;:::-;:39;;;;:::i;:::-;617:83;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;719:10;711:28;;:39;740:9;711:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;393:398;;353:438::o;190:18::-;;;;;;;;;;;;;:::o;7:77:6:-;44:7;73:5;62:16;;7:77;;;:::o;90:118::-;177:24;195:5;177:24;:::i;:::-;172:3;165:37;90:118;;:::o;214:222::-;307:4;345:2;334:9;330:18;322:26;;358:71;426:1;415:9;411:17;402:6;358:71;:::i;:::-;214:222;;;;:::o;442:126::-;479:7;519:42;512:5;508:54;497:65;;442:126;;;:::o;574:60::-;602:3;623:5;616:12;;574:60;;;:::o;640:142::-;690:9;723:53;741:34;750:24;768:5;750:24;:::i;:::-;741:34;:::i;:::-;723:53;:::i;:::-;710:66;;640:142;;;:::o;788:126::-;838:9;871:37;902:5;871:37;:::i;:::-;858:50;;788:126;;;:::o;920:139::-;983:9;1016:37;1047:5;1016:37;:::i;:::-;1003:50;;920:139;;;:::o;1065:157::-;1165:50;1209:5;1165:50;:::i;:::-;1160:3;1153:63;1065:157;;:::o;1228:248::-;1334:4;1372:2;1361:9;1357:18;1349:26;;1385:84;1466:1;1455:9;1451:17;1442:6;1385:84;:::i;:::-;1228:248;;;;:::o;1482:169::-;1566:11;1600:6;1595:3;1588:19;1640:4;1635:3;1631:14;1616:29;;1482:169;;;;:::o;1657:177::-;1797:29;1793:1;1785:6;1781:14;1774:53;1657:177;:::o;1840:366::-;1982:3;2003:67;2067:2;2062:3;2003:67;:::i;:::-;1996:74;;2079:93;2168:3;2079:93;:::i;:::-;2197:2;2192:3;2188:12;2181:19;;1840:366;;;:::o;2212:419::-;2378:4;2416:2;2405:9;2401:18;2393:26;;2465:9;2459:4;2455:20;2451:1;2440:9;2436:17;2429:47;2493:131;2619:4;2493:131;:::i;:::-;2485:139;;2212:419;;;:::o;2637:180::-;2685:77;2682:1;2675:88;2782:4;2779:1;2772:15;2806:4;2803:1;2796:15;2823:180;2871:77;2868:1;2861:88;2968:4;2965:1;2958:15;2992:4;2989:1;2982:15;3009:185;3049:1;3066:20;3084:1;3066:20;:::i;:::-;3061:25;;3100:20;3118:1;3100:20;:::i;:::-;3095:25;;3139:1;3129:35;;3144:18;;:::i;:::-;3129:35;3186:1;3183;3179:9;3174:14;;3009:185;;;;:::o;3200:410::-;3240:7;3263:20;3281:1;3263:20;:::i;:::-;3258:25;;3297:20;3315:1;3297:20;:::i;:::-;3292:25;;3352:1;3349;3345:9;3374:30;3392:11;3374:30;:::i;:::-;3363:41;;3553:1;3544:7;3540:15;3537:1;3534:22;3514:1;3507:9;3487:83;3464:139;;3583:18;;:::i;:::-;3464:139;3248:362;3200:410;;;;:::o;3616:194::-;3656:4;3676:20;3694:1;3676:20;:::i;:::-;3671:25;;3710:20;3728:1;3710:20;:::i;:::-;3705:25;;3754:1;3751;3747:9;3739:17;;3778:1;3772:4;3769:11;3766:37;;;3783:18;;:::i;:::-;3766:37;3616:194;;;;:::o;3897:117::-;4006:1;4003;3996:12;4143:86;4178:7;4218:4;4211:5;4207:16;4196:27;;4143:86;;;:::o;4235:118::-;4306:22;4322:5;4306:22;:::i;:::-;4299:5;4296:33;4286:61;;4343:1;4340;4333:12;4286:61;4235:118;:::o;4359:139::-;4414:5;4445:6;4439:13;4430:22;;4461:31;4486:5;4461:31;:::i;:::-;4359:139;;;;:::o;4504:347::-;4572:6;4621:2;4609:9;4600:7;4596:23;4592:32;4589:119;;;4627:79;;:::i;:::-;4589:119;4747:1;4772:62;4826:7;4817:6;4806:9;4802:22;4772:62;:::i;:::-;4762:72;;4718:126;4504:347;;;;:::o;4857:96::-;4894:7;4923:24;4941:5;4923:24;:::i;:::-;4912:35;;4857:96;;;:::o;4959:118::-;5046:24;5064:5;5046:24;:::i;:::-;5041:3;5034:37;4959:118;;:::o;5083:442::-;5232:4;5270:2;5259:9;5255:18;5247:26;;5283:71;5351:1;5340:9;5336:17;5327:6;5283:71;:::i;:::-;5364:72;5432:2;5421:9;5417:18;5408:6;5364:72;:::i;:::-;5446;5514:2;5503:9;5499:18;5490:6;5446:72;:::i;:::-;5083:442;;;;;;:::o;5531:90::-;5565:7;5608:5;5601:13;5594:21;5583:32;;5531:90;;;:::o;5627:116::-;5697:21;5712:5;5697:21;:::i;:::-;5690:5;5687:32;5677:60;;5733:1;5730;5723:12;5677:60;5627:116;:::o;5749:137::-;5803:5;5834:6;5828:13;5819:22;;5850:30;5874:5;5850:30;:::i;:::-;5749:137;;;;:::o;5892:345::-;5959:6;6008:2;5996:9;5987:7;5983:23;5979:32;5976:119;;;6014:79;;:::i;:::-;5976:119;6134:1;6159:61;6212:7;6203:6;6192:9;6188:22;6159:61;:::i;:::-;6149:71;;6105:125;5892:345;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "327800",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"purchaseACoffe()": "infinite",
								"token()": "infinite",
								"tokenPriceInWei()": "2402"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 119,
									"end": 798,
									"name": "PUSH",
									"source": 5,
									"value": "80"
								},
								{
									"begin": 119,
									"end": 798,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 119,
									"end": 798,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 176,
									"end": 183,
									"name": "PUSH",
									"source": 5,
									"value": "DE0B6B3A7640000"
								},
								{
									"begin": 146,
									"end": 183,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 183,
									"name": "SSTORE",
									"source": 5
								},
								{
									"begin": 244,
									"end": 345,
									"name": "CALLVALUE",
									"source": 5
								},
								{
									"begin": 244,
									"end": 345,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 244,
									"end": 345,
									"name": "ISZERO",
									"source": 5
								},
								{
									"begin": 244,
									"end": 345,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 244,
									"end": 345,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 244,
									"end": 345,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 244,
									"end": 345,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 244,
									"end": 345,
									"name": "REVERT",
									"source": 5
								},
								{
									"begin": 244,
									"end": 345,
									"name": "tag",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 244,
									"end": 345,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 244,
									"end": 345,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 244,
									"end": 345,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 244,
									"end": 345,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 244,
									"end": 345,
									"name": "PUSHSIZE",
									"source": 5
								},
								{
									"begin": 244,
									"end": 345,
									"name": "CODESIZE",
									"source": 5
								},
								{
									"begin": 244,
									"end": 345,
									"name": "SUB",
									"source": 5
								},
								{
									"begin": 244,
									"end": 345,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 244,
									"end": 345,
									"name": "PUSHSIZE",
									"source": 5
								},
								{
									"begin": 244,
									"end": 345,
									"name": "DUP4",
									"source": 5
								},
								{
									"begin": 244,
									"end": 345,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 244,
									"end": 345,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 244,
									"end": 345,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 244,
									"end": 345,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 244,
									"end": 345,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 244,
									"end": 345,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 244,
									"end": 345,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 244,
									"end": 345,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 244,
									"end": 345,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 244,
									"end": 345,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "2"
								},
								{
									"begin": 244,
									"end": 345,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 244,
									"end": 345,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 244,
									"end": 345,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "3"
								},
								{
									"begin": 244,
									"end": 345,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 244,
									"end": 345,
									"name": "tag",
									"source": 5,
									"value": "2"
								},
								{
									"begin": 244,
									"end": 345,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 295,
									"end": 305,
									"name": "CALLER",
									"source": 5
								},
								{
									"begin": 282,
									"end": 292,
									"name": "PUSH",
									"source": 5,
									"value": "2"
								},
								{
									"begin": 282,
									"end": 292,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 282,
									"end": 305,
									"name": "PUSH",
									"source": 5,
									"value": "100"
								},
								{
									"begin": 282,
									"end": 305,
									"name": "EXP",
									"source": 5
								},
								{
									"begin": 282,
									"end": 305,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 282,
									"end": 305,
									"name": "SLOAD",
									"source": 5
								},
								{
									"begin": 282,
									"end": 305,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 282,
									"end": 305,
									"name": "PUSH",
									"source": 5,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 282,
									"end": 305,
									"name": "MUL",
									"source": 5
								},
								{
									"begin": 282,
									"end": 305,
									"name": "NOT",
									"source": 5
								},
								{
									"begin": 282,
									"end": 305,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 282,
									"end": 305,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 282,
									"end": 305,
									"name": "DUP4",
									"source": 5
								},
								{
									"begin": 282,
									"end": 305,
									"name": "PUSH",
									"source": 5,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 282,
									"end": 305,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 282,
									"end": 305,
									"name": "MUL",
									"source": 5
								},
								{
									"begin": 282,
									"end": 305,
									"name": "OR",
									"source": 5
								},
								{
									"begin": 282,
									"end": 305,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 282,
									"end": 305,
									"name": "SSTORE",
									"source": 5
								},
								{
									"begin": 282,
									"end": 305,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 330,
									"end": 336,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 316,
									"end": 321,
									"name": "PUSH",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 316,
									"end": 321,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 316,
									"end": 337,
									"name": "PUSH",
									"source": 5,
									"value": "100"
								},
								{
									"begin": 316,
									"end": 337,
									"name": "EXP",
									"source": 5
								},
								{
									"begin": 316,
									"end": 337,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 316,
									"end": 337,
									"name": "SLOAD",
									"source": 5
								},
								{
									"begin": 316,
									"end": 337,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 316,
									"end": 337,
									"name": "PUSH",
									"source": 5,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 316,
									"end": 337,
									"name": "MUL",
									"source": 5
								},
								{
									"begin": 316,
									"end": 337,
									"name": "NOT",
									"source": 5
								},
								{
									"begin": 316,
									"end": 337,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 316,
									"end": 337,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 316,
									"end": 337,
									"name": "DUP4",
									"source": 5
								},
								{
									"begin": 316,
									"end": 337,
									"name": "PUSH",
									"source": 5,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 316,
									"end": 337,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 316,
									"end": 337,
									"name": "MUL",
									"source": 5
								},
								{
									"begin": 316,
									"end": 337,
									"name": "OR",
									"source": 5
								},
								{
									"begin": 316,
									"end": 337,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 316,
									"end": 337,
									"name": "SSTORE",
									"source": 5
								},
								{
									"begin": 316,
									"end": 337,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 244,
									"end": 345,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 119,
									"end": 798,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "6"
								},
								{
									"begin": 119,
									"end": 798,
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 88,
									"end": 205,
									"name": "tag",
									"source": 6,
									"value": "8"
								},
								{
									"begin": 88,
									"end": 205,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 197,
									"end": 198,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 195,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 187,
									"end": 199,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 334,
									"end": 460,
									"name": "tag",
									"source": 6,
									"value": "10"
								},
								{
									"begin": 334,
									"end": 460,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 371,
									"end": 378,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 411,
									"end": 453,
									"name": "PUSH",
									"source": 6,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 404,
									"end": 409,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 400,
									"end": 454,
									"name": "AND",
									"source": 6
								},
								{
									"begin": 389,
									"end": 454,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 389,
									"end": 454,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 334,
									"end": 460,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 334,
									"end": 460,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 334,
									"end": 460,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 334,
									"end": 460,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 466,
									"end": 562,
									"name": "tag",
									"source": 6,
									"value": "11"
								},
								{
									"begin": 466,
									"end": 562,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 503,
									"end": 510,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 532,
									"end": 556,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 550,
									"end": 555,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 532,
									"end": 556,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "10"
								},
								{
									"begin": 532,
									"end": 556,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 532,
									"end": 556,
									"name": "tag",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 532,
									"end": 556,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 521,
									"end": 556,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 521,
									"end": 556,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 466,
									"end": 562,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 466,
									"end": 562,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 466,
									"end": 562,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 466,
									"end": 562,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 568,
									"end": 690,
									"name": "tag",
									"source": 6,
									"value": "12"
								},
								{
									"begin": 568,
									"end": 690,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 641,
									"end": 665,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "22"
								},
								{
									"begin": 659,
									"end": 664,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 641,
									"end": 665,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "11"
								},
								{
									"begin": 641,
									"end": 665,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 641,
									"end": 665,
									"name": "tag",
									"source": 6,
									"value": "22"
								},
								{
									"begin": 641,
									"end": 665,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 634,
									"end": 639,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 631,
									"end": 666,
									"name": "EQ",
									"source": 6
								},
								{
									"begin": 621,
									"end": 684,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "23"
								},
								{
									"begin": 621,
									"end": 684,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 680,
									"end": 681,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 677,
									"end": 678,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 670,
									"end": 682,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 621,
									"end": 684,
									"name": "tag",
									"source": 6,
									"value": "23"
								},
								{
									"begin": 621,
									"end": 684,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 568,
									"end": 690,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 568,
									"end": 690,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 696,
									"end": 839,
									"name": "tag",
									"source": 6,
									"value": "13"
								},
								{
									"begin": 696,
									"end": 839,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 753,
									"end": 758,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 784,
									"end": 790,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 778,
									"end": 791,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 769,
									"end": 791,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 769,
									"end": 791,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 800,
									"end": 833,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "25"
								},
								{
									"begin": 827,
									"end": 832,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 800,
									"end": 833,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "12"
								},
								{
									"begin": 800,
									"end": 833,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 800,
									"end": 833,
									"name": "tag",
									"source": 6,
									"value": "25"
								},
								{
									"begin": 800,
									"end": 833,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 696,
									"end": 839,
									"name": "SWAP3",
									"source": 6
								},
								{
									"begin": 696,
									"end": 839,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 696,
									"end": 839,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 696,
									"end": 839,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 696,
									"end": 839,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "tag",
									"source": 6,
									"value": "3"
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 915,
									"end": 921,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 964,
									"end": 966,
									"name": "PUSH",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 952,
									"end": 961,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 943,
									"end": 950,
									"name": "DUP5",
									"source": 6
								},
								{
									"begin": 939,
									"end": 962,
									"name": "SUB",
									"source": 6
								},
								{
									"begin": 935,
									"end": 967,
									"name": "SLT",
									"source": 6
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "ISZERO",
									"source": 6
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "27"
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 970,
									"end": 1049,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "28"
								},
								{
									"begin": 970,
									"end": 1049,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "8"
								},
								{
									"begin": 970,
									"end": 1049,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 970,
									"end": 1049,
									"name": "tag",
									"source": 6,
									"value": "28"
								},
								{
									"begin": 970,
									"end": 1049,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "tag",
									"source": 6,
									"value": "27"
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1090,
									"end": 1091,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1115,
									"end": 1179,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "29"
								},
								{
									"begin": 1171,
									"end": 1178,
									"name": "DUP5",
									"source": 6
								},
								{
									"begin": 1162,
									"end": 1168,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 1151,
									"end": 1160,
									"name": "DUP6",
									"source": 6
								},
								{
									"begin": 1147,
									"end": 1169,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1115,
									"end": 1179,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "13"
								},
								{
									"begin": 1115,
									"end": 1179,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 1115,
									"end": 1179,
									"name": "tag",
									"source": 6,
									"value": "29"
								},
								{
									"begin": 1115,
									"end": 1179,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1105,
									"end": 1179,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 1105,
									"end": 1179,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 1061,
									"end": 1189,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "SWAP3",
									"source": 6
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 845,
									"end": 1196,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 119,
									"end": 798,
									"name": "tag",
									"source": 5,
									"value": "6"
								},
								{
									"begin": 119,
									"end": 798,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 119,
									"end": 798,
									"name": "PUSH #[$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 119,
									"end": 798,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 119,
									"end": 798,
									"name": "PUSH [$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 119,
									"end": 798,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 119,
									"end": 798,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 119,
									"end": 798,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 119,
									"end": 798,
									"name": "RETURN",
									"source": 5
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220e448a89b95cb4145f6cad1f9eb1f7013dc4d81fc40625942860e424943c66b0a64736f6c634300081a0033",
									".code": [
										{
											"begin": 119,
											"end": 798,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 119,
											"end": 798,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 119,
											"end": 798,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 119,
											"end": 798,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 119,
											"end": 798,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 119,
											"end": 798,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 119,
											"end": 798,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 119,
											"end": 798,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 119,
											"end": 798,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 119,
											"end": 798,
											"name": "CALLDATALOAD",
											"source": 5
										},
										{
											"begin": 119,
											"end": 798,
											"name": "PUSH",
											"source": 5,
											"value": "E0"
										},
										{
											"begin": 119,
											"end": 798,
											"name": "SHR",
											"source": 5
										},
										{
											"begin": 119,
											"end": 798,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 119,
											"end": 798,
											"name": "PUSH",
											"source": 5,
											"value": "2F8DE810"
										},
										{
											"begin": 119,
											"end": 798,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 119,
											"end": 798,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 119,
											"end": 798,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 119,
											"end": 798,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 119,
											"end": 798,
											"name": "PUSH",
											"source": 5,
											"value": "E7E78652"
										},
										{
											"begin": 119,
											"end": 798,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 119,
											"end": 798,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 119,
											"end": 798,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 119,
											"end": 798,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 119,
											"end": 798,
											"name": "PUSH",
											"source": 5,
											"value": "FC0C546A"
										},
										{
											"begin": 119,
											"end": 798,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 119,
											"end": 798,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 119,
											"end": 798,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 119,
											"end": 798,
											"name": "tag",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 119,
											"end": 798,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 119,
											"end": 798,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 119,
											"end": 798,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 119,
											"end": 798,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 146,
											"end": 183,
											"name": "tag",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 146,
											"end": 183,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 146,
											"end": 183,
											"name": "CALLVALUE",
											"source": 5
										},
										{
											"begin": 146,
											"end": 183,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 146,
											"end": 183,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 146,
											"end": 183,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 146,
											"end": 183,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 146,
											"end": 183,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 146,
											"end": 183,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 146,
											"end": 183,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 146,
											"end": 183,
											"name": "tag",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 146,
											"end": 183,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 146,
											"end": 183,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 146,
											"end": 183,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "6"
										},
										{
											"begin": 146,
											"end": 183,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "7"
										},
										{
											"begin": 146,
											"end": 183,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 146,
											"end": 183,
											"name": "tag",
											"source": 5,
											"value": "6"
										},
										{
											"begin": 146,
											"end": 183,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 146,
											"end": 183,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 146,
											"end": 183,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 146,
											"end": 183,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "8"
										},
										{
											"begin": 146,
											"end": 183,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 146,
											"end": 183,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 146,
											"end": 183,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "9"
										},
										{
											"begin": 146,
											"end": 183,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 146,
											"end": 183,
											"name": "tag",
											"source": 5,
											"value": "8"
										},
										{
											"begin": 146,
											"end": 183,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 146,
											"end": 183,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 146,
											"end": 183,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 146,
											"end": 183,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 146,
											"end": 183,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 146,
											"end": 183,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 146,
											"end": 183,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 146,
											"end": 183,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 353,
											"end": 791,
											"name": "tag",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 353,
											"end": 791,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 353,
											"end": 791,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "10"
										},
										{
											"begin": 353,
											"end": 791,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "11"
										},
										{
											"begin": 353,
											"end": 791,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 353,
											"end": 791,
											"name": "tag",
											"source": 5,
											"value": "10"
										},
										{
											"begin": 353,
											"end": 791,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 353,
											"end": 791,
											"name": "STOP",
											"source": 5
										},
										{
											"begin": 190,
											"end": 208,
											"name": "tag",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 190,
											"end": 208,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 190,
											"end": 208,
											"name": "CALLVALUE",
											"source": 5
										},
										{
											"begin": 190,
											"end": 208,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 190,
											"end": 208,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 190,
											"end": 208,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "12"
										},
										{
											"begin": 190,
											"end": 208,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 190,
											"end": 208,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 190,
											"end": 208,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 190,
											"end": 208,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 190,
											"end": 208,
											"name": "tag",
											"source": 5,
											"value": "12"
										},
										{
											"begin": 190,
											"end": 208,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 190,
											"end": 208,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 190,
											"end": 208,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "13"
										},
										{
											"begin": 190,
											"end": 208,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "14"
										},
										{
											"begin": 190,
											"end": 208,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 190,
											"end": 208,
											"name": "tag",
											"source": 5,
											"value": "13"
										},
										{
											"begin": 190,
											"end": 208,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 190,
											"end": 208,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 190,
											"end": 208,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 190,
											"end": 208,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "15"
										},
										{
											"begin": 190,
											"end": 208,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 190,
											"end": 208,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 190,
											"end": 208,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "16"
										},
										{
											"begin": 190,
											"end": 208,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 190,
											"end": 208,
											"name": "tag",
											"source": 5,
											"value": "15"
										},
										{
											"begin": 190,
											"end": 208,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 190,
											"end": 208,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 190,
											"end": 208,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 190,
											"end": 208,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 190,
											"end": 208,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 190,
											"end": 208,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 190,
											"end": 208,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 190,
											"end": 208,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 146,
											"end": 183,
											"name": "tag",
											"source": 5,
											"value": "7"
										},
										{
											"begin": 146,
											"end": 183,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 146,
											"end": 183,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 146,
											"end": 183,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 146,
											"end": 183,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 146,
											"end": 183,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 353,
											"end": 791,
											"name": "tag",
											"source": 5,
											"value": "11"
										},
										{
											"begin": 353,
											"end": 791,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 425,
											"end": 440,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 425,
											"end": 440,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 412,
											"end": 421,
											"name": "CALLVALUE",
											"source": 5
										},
										{
											"begin": 412,
											"end": 440,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 412,
											"end": 440,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 404,
											"end": 472,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "18"
										},
										{
											"begin": 404,
											"end": 472,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 404,
											"end": 472,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 404,
											"end": 472,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 404,
											"end": 472,
											"name": "PUSH",
											"source": 5,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 404,
											"end": 472,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 404,
											"end": 472,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 404,
											"end": 472,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 404,
											"end": 472,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 404,
											"end": 472,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "19"
										},
										{
											"begin": 404,
											"end": 472,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 404,
											"end": 472,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 404,
											"end": 472,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 404,
											"end": 472,
											"name": "tag",
											"source": 5,
											"value": "19"
										},
										{
											"begin": 404,
											"end": 472,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 404,
											"end": 472,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 404,
											"end": 472,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 404,
											"end": 472,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 404,
											"end": 472,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 404,
											"end": 472,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 404,
											"end": 472,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 404,
											"end": 472,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 404,
											"end": 472,
											"name": "tag",
											"source": 5,
											"value": "18"
										},
										{
											"begin": 404,
											"end": 472,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 483,
											"end": 503,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 518,
											"end": 533,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 518,
											"end": 533,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 506,
											"end": 515,
											"name": "CALLVALUE",
											"source": 5
										},
										{
											"begin": 506,
											"end": 533,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "21"
										},
										{
											"begin": 506,
											"end": 533,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 506,
											"end": 533,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 506,
											"end": 533,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "22"
										},
										{
											"begin": 506,
											"end": 533,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 506,
											"end": 533,
											"name": "tag",
											"source": 5,
											"value": "21"
										},
										{
											"begin": 506,
											"end": 533,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 483,
											"end": 533,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 483,
											"end": 533,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 544,
											"end": 558,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 591,
											"end": 606,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 591,
											"end": 606,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 573,
											"end": 588,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 573,
											"end": 606,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "23"
										},
										{
											"begin": 573,
											"end": 606,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 573,
											"end": 606,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 573,
											"end": 606,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "24"
										},
										{
											"begin": 573,
											"end": 606,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 573,
											"end": 606,
											"name": "tag",
											"source": 5,
											"value": "23"
										},
										{
											"begin": 573,
											"end": 606,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 561,
											"end": 570,
											"name": "CALLVALUE",
											"source": 5
										},
										{
											"begin": 561,
											"end": 606,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "25"
										},
										{
											"begin": 561,
											"end": 606,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 561,
											"end": 606,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 561,
											"end": 606,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "26"
										},
										{
											"begin": 561,
											"end": 606,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 561,
											"end": 606,
											"name": "tag",
											"source": 5,
											"value": "25"
										},
										{
											"begin": 561,
											"end": 606,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 544,
											"end": 606,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 544,
											"end": 606,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 617,
											"end": 622,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 617,
											"end": 622,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 617,
											"end": 622,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 617,
											"end": 622,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 617,
											"end": 622,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 617,
											"end": 622,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 617,
											"end": 622,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 617,
											"end": 622,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 617,
											"end": 622,
											"name": "DIV",
											"source": 5
										},
										{
											"begin": 617,
											"end": 622,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 617,
											"end": 622,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 617,
											"end": 635,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 617,
											"end": 635,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 617,
											"end": 635,
											"name": "PUSH",
											"source": 5,
											"value": "23B872DD"
										},
										{
											"begin": 636,
											"end": 646,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 636,
											"end": 646,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 636,
											"end": 646,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 636,
											"end": 646,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 636,
											"end": 646,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 636,
											"end": 646,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 636,
											"end": 646,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 636,
											"end": 646,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 636,
											"end": 646,
											"name": "DIV",
											"source": 5
										},
										{
											"begin": 636,
											"end": 646,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 636,
											"end": 646,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 648,
											"end": 658,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 683,
											"end": 688,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 683,
											"end": 688,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 683,
											"end": 688,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 683,
											"end": 688,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 683,
											"end": 688,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 683,
											"end": 688,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 683,
											"end": 688,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 683,
											"end": 688,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 683,
											"end": 688,
											"name": "DIV",
											"source": 5
										},
										{
											"begin": 683,
											"end": 688,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 683,
											"end": 688,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 683,
											"end": 697,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 683,
											"end": 697,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 683,
											"end": 697,
											"name": "PUSH",
											"source": 5,
											"value": "313CE567"
										},
										{
											"begin": 683,
											"end": 699,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 683,
											"end": 699,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 683,
											"end": 699,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 683,
											"end": 699,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFF"
										},
										{
											"begin": 683,
											"end": 699,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 683,
											"end": 699,
											"name": "PUSH",
											"source": 5,
											"value": "E0"
										},
										{
											"begin": 683,
											"end": 699,
											"name": "SHL",
											"source": 5
										},
										{
											"begin": 683,
											"end": 699,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 683,
											"end": 699,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 683,
											"end": 699,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 683,
											"end": 699,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 683,
											"end": 699,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 683,
											"end": 699,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 683,
											"end": 699,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 683,
											"end": 699,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 683,
											"end": 699,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 683,
											"end": 699,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 683,
											"end": 699,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 683,
											"end": 699,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 683,
											"end": 699,
											"name": "GAS",
											"source": 5
										},
										{
											"begin": 683,
											"end": 699,
											"name": "STATICCALL",
											"source": 5
										},
										{
											"begin": 683,
											"end": 699,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 683,
											"end": 699,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 683,
											"end": 699,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 683,
											"end": 699,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "28"
										},
										{
											"begin": 683,
											"end": 699,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 683,
											"end": 699,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 683,
											"end": 699,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 683,
											"end": 699,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 683,
											"end": 699,
											"name": "RETURNDATACOPY",
											"source": 5
										},
										{
											"begin": 683,
											"end": 699,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 683,
											"end": 699,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 683,
											"end": 699,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 683,
											"end": 699,
											"name": "tag",
											"source": 5,
											"value": "28"
										},
										{
											"begin": 683,
											"end": 699,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 683,
											"end": 699,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 683,
											"end": 699,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 683,
											"end": 699,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 683,
											"end": 699,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 683,
											"end": 699,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 683,
											"end": 699,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 683,
											"end": 699,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 683,
											"end": 699,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 683,
											"end": 699,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 683,
											"end": 699,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 683,
											"end": 699,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 683,
											"end": 699,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 683,
											"end": 699,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 683,
											"end": 699,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 683,
											"end": 699,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 683,
											"end": 699,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 683,
											"end": 699,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 683,
											"end": 699,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 683,
											"end": 699,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 683,
											"end": 699,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 683,
											"end": 699,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 683,
											"end": 699,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 683,
											"end": 699,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "29"
										},
										{
											"begin": 683,
											"end": 699,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 683,
											"end": 699,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 683,
											"end": 699,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "30"
										},
										{
											"begin": 683,
											"end": 699,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 683,
											"end": 699,
											"name": "tag",
											"source": 5,
											"value": "29"
										},
										{
											"begin": 683,
											"end": 699,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 660,
											"end": 699,
											"name": "PUSH",
											"source": 5,
											"value": "FF"
										},
										{
											"begin": 660,
											"end": 699,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 678,
											"end": 680,
											"name": "PUSH",
											"source": 5,
											"value": "A"
										},
										{
											"begin": 660,
											"end": 675,
											"name": "DUP8",
											"source": 5
										},
										{
											"begin": 660,
											"end": 680,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "31"
										},
										{
											"begin": 660,
											"end": 680,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 660,
											"end": 680,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 660,
											"end": 680,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "24"
										},
										{
											"begin": 660,
											"end": 680,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 660,
											"end": 680,
											"name": "tag",
											"source": 5,
											"value": "31"
										},
										{
											"begin": 660,
											"end": 680,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 660,
											"end": 699,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "32"
										},
										{
											"begin": 660,
											"end": 699,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 660,
											"end": 699,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 660,
											"end": 699,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "24"
										},
										{
											"begin": 660,
											"end": 699,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 660,
											"end": 699,
											"name": "tag",
											"source": 5,
											"value": "32"
										},
										{
											"begin": 660,
											"end": 699,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 617,
											"end": 700,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFF"
										},
										{
											"begin": 617,
											"end": 700,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "PUSH",
											"source": 5,
											"value": "E0"
										},
										{
											"begin": 617,
											"end": 700,
											"name": "SHL",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 617,
											"end": 700,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "33"
										},
										{
											"begin": 617,
											"end": 700,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "34"
										},
										{
											"begin": 617,
											"end": 700,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "tag",
											"source": 5,
											"value": "33"
										},
										{
											"begin": 617,
											"end": 700,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 617,
											"end": 700,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 617,
											"end": 700,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 617,
											"end": 700,
											"name": "DUP8",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "GAS",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "CALL",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "36"
										},
										{
											"begin": 617,
											"end": 700,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 617,
											"end": 700,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "RETURNDATACOPY",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 617,
											"end": 700,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "tag",
											"source": 5,
											"value": "36"
										},
										{
											"begin": 617,
											"end": 700,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 617,
											"end": 700,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 617,
											"end": 700,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 617,
											"end": 700,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 617,
											"end": 700,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "37"
										},
										{
											"begin": 617,
											"end": 700,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "38"
										},
										{
											"begin": 617,
											"end": 700,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "tag",
											"source": 5,
											"value": "37"
										},
										{
											"begin": 617,
											"end": 700,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 617,
											"end": 700,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 711,
											"end": 739,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 711,
											"end": 739,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 711,
											"end": 750,
											"name": "PUSH",
											"source": 5,
											"value": "8FC"
										},
										{
											"begin": 740,
											"end": 749,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 711,
											"end": 750,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 711,
											"end": 750,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 711,
											"end": 750,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 711,
											"end": 750,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 711,
											"end": 750,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 711,
											"end": 750,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 711,
											"end": 750,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 711,
											"end": 750,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 711,
											"end": 750,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 711,
											"end": 750,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 711,
											"end": 750,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 711,
											"end": 750,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 711,
											"end": 750,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 711,
											"end": 750,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 711,
											"end": 750,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 711,
											"end": 750,
											"name": "DUP9",
											"source": 5
										},
										{
											"begin": 711,
											"end": 750,
											"name": "DUP9",
											"source": 5
										},
										{
											"begin": 711,
											"end": 750,
											"name": "CALL",
											"source": 5
										},
										{
											"begin": 711,
											"end": 750,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 711,
											"end": 750,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 711,
											"end": 750,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 711,
											"end": 750,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 711,
											"end": 750,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 711,
											"end": 750,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 711,
											"end": 750,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 711,
											"end": 750,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 711,
											"end": 750,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 711,
											"end": 750,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 711,
											"end": 750,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 711,
											"end": 750,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 711,
											"end": 750,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 711,
											"end": 750,
											"name": "RETURNDATACOPY",
											"source": 5
										},
										{
											"begin": 711,
											"end": 750,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 711,
											"end": 750,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 711,
											"end": 750,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 711,
											"end": 750,
											"name": "tag",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 711,
											"end": 750,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 711,
											"end": 750,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 393,
											"end": 791,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 393,
											"end": 791,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 353,
											"end": 791,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 190,
											"end": 208,
											"name": "tag",
											"source": 5,
											"value": "14"
										},
										{
											"begin": 190,
											"end": 208,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 190,
											"end": 208,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 190,
											"end": 208,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 190,
											"end": 208,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 190,
											"end": 208,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 190,
											"end": 208,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 190,
											"end": 208,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 190,
											"end": 208,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 190,
											"end": 208,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 190,
											"end": 208,
											"name": "DIV",
											"source": 5
										},
										{
											"begin": 190,
											"end": 208,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 190,
											"end": 208,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 190,
											"end": 208,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 190,
											"end": 208,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 7,
											"end": 84,
											"name": "tag",
											"source": 6,
											"value": "41"
										},
										{
											"begin": 7,
											"end": 84,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 44,
											"end": 51,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 73,
											"end": 78,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 62,
											"end": 78,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 62,
											"end": 78,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7,
											"end": 84,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7,
											"end": 84,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7,
											"end": 84,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7,
											"end": 84,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 90,
											"end": 208,
											"name": "tag",
											"source": 6,
											"value": "42"
										},
										{
											"begin": 90,
											"end": 208,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 177,
											"end": 201,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "68"
										},
										{
											"begin": 195,
											"end": 200,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 177,
											"end": 201,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "41"
										},
										{
											"begin": 177,
											"end": 201,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 177,
											"end": 201,
											"name": "tag",
											"source": 6,
											"value": "68"
										},
										{
											"begin": 177,
											"end": 201,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 172,
											"end": 175,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 165,
											"end": 202,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 90,
											"end": 208,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 90,
											"end": 208,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 90,
											"end": 208,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 214,
											"end": 436,
											"name": "tag",
											"source": 6,
											"value": "9"
										},
										{
											"begin": 214,
											"end": 436,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 307,
											"end": 311,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 345,
											"end": 347,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 334,
											"end": 343,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 330,
											"end": 348,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 322,
											"end": 348,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 322,
											"end": 348,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 358,
											"end": 429,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "70"
										},
										{
											"begin": 426,
											"end": 427,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 415,
											"end": 424,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 411,
											"end": 428,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 402,
											"end": 408,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 358,
											"end": 429,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "42"
										},
										{
											"begin": 358,
											"end": 429,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 358,
											"end": 429,
											"name": "tag",
											"source": 6,
											"value": "70"
										},
										{
											"begin": 358,
											"end": 429,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 214,
											"end": 436,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 214,
											"end": 436,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 214,
											"end": 436,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 214,
											"end": 436,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 214,
											"end": 436,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 442,
											"end": 568,
											"name": "tag",
											"source": 6,
											"value": "43"
										},
										{
											"begin": 442,
											"end": 568,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 479,
											"end": 486,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 519,
											"end": 561,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 512,
											"end": 517,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 508,
											"end": 562,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 497,
											"end": 562,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 497,
											"end": 562,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 442,
											"end": 568,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 442,
											"end": 568,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 442,
											"end": 568,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 442,
											"end": 568,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 574,
											"end": 634,
											"name": "tag",
											"source": 6,
											"value": "44"
										},
										{
											"begin": 574,
											"end": 634,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 602,
											"end": 605,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 623,
											"end": 628,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 616,
											"end": 628,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 616,
											"end": 628,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 574,
											"end": 634,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 574,
											"end": 634,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 574,
											"end": 634,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 574,
											"end": 634,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 640,
											"end": 782,
											"name": "tag",
											"source": 6,
											"value": "45"
										},
										{
											"begin": 640,
											"end": 782,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 690,
											"end": 699,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 723,
											"end": 776,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "74"
										},
										{
											"begin": 741,
											"end": 775,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "75"
										},
										{
											"begin": 750,
											"end": 774,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "76"
										},
										{
											"begin": 768,
											"end": 773,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 750,
											"end": 774,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "43"
										},
										{
											"begin": 750,
											"end": 774,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 750,
											"end": 774,
											"name": "tag",
											"source": 6,
											"value": "76"
										},
										{
											"begin": 750,
											"end": 774,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 741,
											"end": 775,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "44"
										},
										{
											"begin": 741,
											"end": 775,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 741,
											"end": 775,
											"name": "tag",
											"source": 6,
											"value": "75"
										},
										{
											"begin": 741,
											"end": 775,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 723,
											"end": 776,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "43"
										},
										{
											"begin": 723,
											"end": 776,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 723,
											"end": 776,
											"name": "tag",
											"source": 6,
											"value": "74"
										},
										{
											"begin": 723,
											"end": 776,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 710,
											"end": 776,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 710,
											"end": 776,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 640,
											"end": 782,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 640,
											"end": 782,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 640,
											"end": 782,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 640,
											"end": 782,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 788,
											"end": 914,
											"name": "tag",
											"source": 6,
											"value": "46"
										},
										{
											"begin": 788,
											"end": 914,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 838,
											"end": 847,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 871,
											"end": 908,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "78"
										},
										{
											"begin": 902,
											"end": 907,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 871,
											"end": 908,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "45"
										},
										{
											"begin": 871,
											"end": 908,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 871,
											"end": 908,
											"name": "tag",
											"source": 6,
											"value": "78"
										},
										{
											"begin": 871,
											"end": 908,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 858,
											"end": 908,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 858,
											"end": 908,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 788,
											"end": 914,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 788,
											"end": 914,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 788,
											"end": 914,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 788,
											"end": 914,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 920,
											"end": 1059,
											"name": "tag",
											"source": 6,
											"value": "47"
										},
										{
											"begin": 920,
											"end": 1059,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 983,
											"end": 992,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1016,
											"end": 1053,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 1047,
											"end": 1052,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1016,
											"end": 1053,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "46"
										},
										{
											"begin": 1016,
											"end": 1053,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1016,
											"end": 1053,
											"name": "tag",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 1016,
											"end": 1053,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1003,
											"end": 1053,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1003,
											"end": 1053,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 920,
											"end": 1059,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 920,
											"end": 1059,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 920,
											"end": 1059,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 920,
											"end": 1059,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1065,
											"end": 1222,
											"name": "tag",
											"source": 6,
											"value": "48"
										},
										{
											"begin": 1065,
											"end": 1222,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1165,
											"end": 1215,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "82"
										},
										{
											"begin": 1209,
											"end": 1214,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1165,
											"end": 1215,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "47"
										},
										{
											"begin": 1165,
											"end": 1215,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1165,
											"end": 1215,
											"name": "tag",
											"source": 6,
											"value": "82"
										},
										{
											"begin": 1165,
											"end": 1215,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1160,
											"end": 1163,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1153,
											"end": 1216,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1065,
											"end": 1222,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1065,
											"end": 1222,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1065,
											"end": 1222,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1228,
											"end": 1476,
											"name": "tag",
											"source": 6,
											"value": "16"
										},
										{
											"begin": 1228,
											"end": 1476,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1334,
											"end": 1338,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1372,
											"end": 1374,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1361,
											"end": 1370,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1357,
											"end": 1375,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1349,
											"end": 1375,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1349,
											"end": 1375,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1385,
											"end": 1469,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "84"
										},
										{
											"begin": 1466,
											"end": 1467,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1455,
											"end": 1464,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 1451,
											"end": 1468,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1442,
											"end": 1448,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 1385,
											"end": 1469,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "48"
										},
										{
											"begin": 1385,
											"end": 1469,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1385,
											"end": 1469,
											"name": "tag",
											"source": 6,
											"value": "84"
										},
										{
											"begin": 1385,
											"end": 1469,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1228,
											"end": 1476,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1228,
											"end": 1476,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1228,
											"end": 1476,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1228,
											"end": 1476,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1228,
											"end": 1476,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1482,
											"end": 1651,
											"name": "tag",
											"source": 6,
											"value": "49"
										},
										{
											"begin": 1482,
											"end": 1651,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1566,
											"end": 1577,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1600,
											"end": 1606,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1595,
											"end": 1598,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1588,
											"end": 1607,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1640,
											"end": 1644,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1635,
											"end": 1638,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1631,
											"end": 1645,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1616,
											"end": 1645,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1616,
											"end": 1645,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1482,
											"end": 1651,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1482,
											"end": 1651,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1482,
											"end": 1651,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1482,
											"end": 1651,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1482,
											"end": 1651,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1657,
											"end": 1834,
											"name": "tag",
											"source": 6,
											"value": "50"
										},
										{
											"begin": 1657,
											"end": 1834,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1797,
											"end": 1826,
											"name": "PUSH",
											"source": 6,
											"value": "596F7520646F206E6F74206861766520656E6F756768206574682E0000000000"
										},
										{
											"begin": 1793,
											"end": 1794,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1785,
											"end": 1791,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1781,
											"end": 1795,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1774,
											"end": 1827,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1657,
											"end": 1834,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1657,
											"end": 1834,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1840,
											"end": 2206,
											"name": "tag",
											"source": 6,
											"value": "51"
										},
										{
											"begin": 1840,
											"end": 2206,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1982,
											"end": 1985,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2003,
											"end": 2070,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "88"
										},
										{
											"begin": 2067,
											"end": 2069,
											"name": "PUSH",
											"source": 6,
											"value": "1B"
										},
										{
											"begin": 2062,
											"end": 2065,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2003,
											"end": 2070,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "49"
										},
										{
											"begin": 2003,
											"end": 2070,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2003,
											"end": 2070,
											"name": "tag",
											"source": 6,
											"value": "88"
										},
										{
											"begin": 2003,
											"end": 2070,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1996,
											"end": 2070,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1996,
											"end": 2070,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2079,
											"end": 2172,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "89"
										},
										{
											"begin": 2168,
											"end": 2171,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2079,
											"end": 2172,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "50"
										},
										{
											"begin": 2079,
											"end": 2172,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2079,
											"end": 2172,
											"name": "tag",
											"source": 6,
											"value": "89"
										},
										{
											"begin": 2079,
											"end": 2172,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2197,
											"end": 2199,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2192,
											"end": 2195,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2188,
											"end": 2200,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2181,
											"end": 2200,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2181,
											"end": 2200,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1840,
											"end": 2206,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1840,
											"end": 2206,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1840,
											"end": 2206,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1840,
											"end": 2206,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2212,
											"end": 2631,
											"name": "tag",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2212,
											"end": 2631,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2378,
											"end": 2382,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2416,
											"end": 2418,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2405,
											"end": 2414,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2401,
											"end": 2419,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2393,
											"end": 2419,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2393,
											"end": 2419,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2465,
											"end": 2474,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2459,
											"end": 2463,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2455,
											"end": 2475,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 2451,
											"end": 2452,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2440,
											"end": 2449,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2436,
											"end": 2453,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2429,
											"end": 2476,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2493,
											"end": 2624,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 2619,
											"end": 2623,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2493,
											"end": 2624,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "51"
										},
										{
											"begin": 2493,
											"end": 2624,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2493,
											"end": 2624,
											"name": "tag",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 2493,
											"end": 2624,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2485,
											"end": 2624,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2485,
											"end": 2624,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2212,
											"end": 2631,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2212,
											"end": 2631,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2212,
											"end": 2631,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2212,
											"end": 2631,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2637,
											"end": 2817,
											"name": "tag",
											"source": 6,
											"value": "52"
										},
										{
											"begin": 2637,
											"end": 2817,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2685,
											"end": 2762,
											"name": "PUSH",
											"source": 6,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2682,
											"end": 2683,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2675,
											"end": 2763,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2782,
											"end": 2786,
											"name": "PUSH",
											"source": 6,
											"value": "12"
										},
										{
											"begin": 2779,
											"end": 2780,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 2772,
											"end": 2787,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2806,
											"end": 2810,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 2803,
											"end": 2804,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2796,
											"end": 2811,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 2823,
											"end": 3003,
											"name": "tag",
											"source": 6,
											"value": "53"
										},
										{
											"begin": 2823,
											"end": 3003,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2871,
											"end": 2948,
											"name": "PUSH",
											"source": 6,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2868,
											"end": 2869,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2861,
											"end": 2949,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2968,
											"end": 2972,
											"name": "PUSH",
											"source": 6,
											"value": "11"
										},
										{
											"begin": 2965,
											"end": 2966,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 2958,
											"end": 2973,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2992,
											"end": 2996,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 2989,
											"end": 2990,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2982,
											"end": 2997,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 3009,
											"end": 3194,
											"name": "tag",
											"source": 6,
											"value": "22"
										},
										{
											"begin": 3009,
											"end": 3194,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3049,
											"end": 3050,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3066,
											"end": 3086,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "95"
										},
										{
											"begin": 3084,
											"end": 3085,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3066,
											"end": 3086,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "41"
										},
										{
											"begin": 3066,
											"end": 3086,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3066,
											"end": 3086,
											"name": "tag",
											"source": 6,
											"value": "95"
										},
										{
											"begin": 3066,
											"end": 3086,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3061,
											"end": 3086,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3061,
											"end": 3086,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3100,
											"end": 3120,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "96"
										},
										{
											"begin": 3118,
											"end": 3119,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3100,
											"end": 3120,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "41"
										},
										{
											"begin": 3100,
											"end": 3120,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3100,
											"end": 3120,
											"name": "tag",
											"source": 6,
											"value": "96"
										},
										{
											"begin": 3100,
											"end": 3120,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3095,
											"end": 3120,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 3095,
											"end": 3120,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3139,
											"end": 3140,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3129,
											"end": 3164,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "97"
										},
										{
											"begin": 3129,
											"end": 3164,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3144,
											"end": 3162,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "98"
										},
										{
											"begin": 3144,
											"end": 3162,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "52"
										},
										{
											"begin": 3144,
											"end": 3162,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3144,
											"end": 3162,
											"name": "tag",
											"source": 6,
											"value": "98"
										},
										{
											"begin": 3144,
											"end": 3162,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3129,
											"end": 3164,
											"name": "tag",
											"source": 6,
											"value": "97"
										},
										{
											"begin": 3129,
											"end": 3164,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3186,
											"end": 3187,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3183,
											"end": 3184,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3179,
											"end": 3188,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 3174,
											"end": 3188,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3174,
											"end": 3188,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3009,
											"end": 3194,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 3009,
											"end": 3194,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3009,
											"end": 3194,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3009,
											"end": 3194,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3009,
											"end": 3194,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3200,
											"end": 3610,
											"name": "tag",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 3200,
											"end": 3610,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3240,
											"end": 3247,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3263,
											"end": 3283,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "100"
										},
										{
											"begin": 3281,
											"end": 3282,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3263,
											"end": 3283,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "41"
										},
										{
											"begin": 3263,
											"end": 3283,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3263,
											"end": 3283,
											"name": "tag",
											"source": 6,
											"value": "100"
										},
										{
											"begin": 3263,
											"end": 3283,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3258,
											"end": 3283,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3258,
											"end": 3283,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3297,
											"end": 3317,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "101"
										},
										{
											"begin": 3315,
											"end": 3316,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3297,
											"end": 3317,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "41"
										},
										{
											"begin": 3297,
											"end": 3317,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3297,
											"end": 3317,
											"name": "tag",
											"source": 6,
											"value": "101"
										},
										{
											"begin": 3297,
											"end": 3317,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3292,
											"end": 3317,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 3292,
											"end": 3317,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3352,
											"end": 3353,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3349,
											"end": 3350,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3345,
											"end": 3354,
											"name": "MUL",
											"source": 6
										},
										{
											"begin": 3374,
											"end": 3404,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "102"
										},
										{
											"begin": 3392,
											"end": 3403,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3374,
											"end": 3404,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "41"
										},
										{
											"begin": 3374,
											"end": 3404,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3374,
											"end": 3404,
											"name": "tag",
											"source": 6,
											"value": "102"
										},
										{
											"begin": 3374,
											"end": 3404,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3363,
											"end": 3404,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3363,
											"end": 3404,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3553,
											"end": 3554,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3544,
											"end": 3551,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3540,
											"end": 3555,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 3537,
											"end": 3538,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 3534,
											"end": 3556,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 3514,
											"end": 3515,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3507,
											"end": 3516,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 3487,
											"end": 3570,
											"name": "OR",
											"source": 6
										},
										{
											"begin": 3464,
											"end": 3603,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "103"
										},
										{
											"begin": 3464,
											"end": 3603,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3583,
											"end": 3601,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "104"
										},
										{
											"begin": 3583,
											"end": 3601,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "53"
										},
										{
											"begin": 3583,
											"end": 3601,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3583,
											"end": 3601,
											"name": "tag",
											"source": 6,
											"value": "104"
										},
										{
											"begin": 3583,
											"end": 3601,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3464,
											"end": 3603,
											"name": "tag",
											"source": 6,
											"value": "103"
										},
										{
											"begin": 3464,
											"end": 3603,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3248,
											"end": 3610,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3200,
											"end": 3610,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 3200,
											"end": 3610,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3200,
											"end": 3610,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3200,
											"end": 3610,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3200,
											"end": 3610,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3616,
											"end": 3810,
											"name": "tag",
											"source": 6,
											"value": "26"
										},
										{
											"begin": 3616,
											"end": 3810,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3656,
											"end": 3660,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3676,
											"end": 3696,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "106"
										},
										{
											"begin": 3694,
											"end": 3695,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3676,
											"end": 3696,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "41"
										},
										{
											"begin": 3676,
											"end": 3696,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3676,
											"end": 3696,
											"name": "tag",
											"source": 6,
											"value": "106"
										},
										{
											"begin": 3676,
											"end": 3696,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3671,
											"end": 3696,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3671,
											"end": 3696,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3710,
											"end": 3730,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "107"
										},
										{
											"begin": 3728,
											"end": 3729,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3710,
											"end": 3730,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "41"
										},
										{
											"begin": 3710,
											"end": 3730,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3710,
											"end": 3730,
											"name": "tag",
											"source": 6,
											"value": "107"
										},
										{
											"begin": 3710,
											"end": 3730,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3705,
											"end": 3730,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 3705,
											"end": 3730,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3754,
											"end": 3755,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3751,
											"end": 3752,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3747,
											"end": 3756,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 3739,
											"end": 3756,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3739,
											"end": 3756,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3778,
											"end": 3779,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3772,
											"end": 3776,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3769,
											"end": 3780,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 3766,
											"end": 3803,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 3766,
											"end": 3803,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "108"
										},
										{
											"begin": 3766,
											"end": 3803,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3783,
											"end": 3801,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "109"
										},
										{
											"begin": 3783,
											"end": 3801,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "53"
										},
										{
											"begin": 3783,
											"end": 3801,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3783,
											"end": 3801,
											"name": "tag",
											"source": 6,
											"value": "109"
										},
										{
											"begin": 3783,
											"end": 3801,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3766,
											"end": 3803,
											"name": "tag",
											"source": 6,
											"value": "108"
										},
										{
											"begin": 3766,
											"end": 3803,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3616,
											"end": 3810,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 3616,
											"end": 3810,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3616,
											"end": 3810,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3616,
											"end": 3810,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3616,
											"end": 3810,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3897,
											"end": 4014,
											"name": "tag",
											"source": 6,
											"value": "55"
										},
										{
											"begin": 3897,
											"end": 4014,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4006,
											"end": 4007,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4003,
											"end": 4004,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3996,
											"end": 4008,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 4143,
											"end": 4229,
											"name": "tag",
											"source": 6,
											"value": "57"
										},
										{
											"begin": 4143,
											"end": 4229,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4178,
											"end": 4185,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4218,
											"end": 4222,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 4211,
											"end": 4216,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4207,
											"end": 4223,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 4196,
											"end": 4223,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4196,
											"end": 4223,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4143,
											"end": 4229,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4143,
											"end": 4229,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4143,
											"end": 4229,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4143,
											"end": 4229,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 4235,
											"end": 4353,
											"name": "tag",
											"source": 6,
											"value": "58"
										},
										{
											"begin": 4235,
											"end": 4353,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4306,
											"end": 4328,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "115"
										},
										{
											"begin": 4322,
											"end": 4327,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4306,
											"end": 4328,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "57"
										},
										{
											"begin": 4306,
											"end": 4328,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 4306,
											"end": 4328,
											"name": "tag",
											"source": 6,
											"value": "115"
										},
										{
											"begin": 4306,
											"end": 4328,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4299,
											"end": 4304,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4296,
											"end": 4329,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 4286,
											"end": 4347,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "116"
										},
										{
											"begin": 4286,
											"end": 4347,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 4343,
											"end": 4344,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4340,
											"end": 4341,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4333,
											"end": 4345,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 4286,
											"end": 4347,
											"name": "tag",
											"source": 6,
											"value": "116"
										},
										{
											"begin": 4286,
											"end": 4347,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4235,
											"end": 4353,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4235,
											"end": 4353,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 4359,
											"end": 4498,
											"name": "tag",
											"source": 6,
											"value": "59"
										},
										{
											"begin": 4359,
											"end": 4498,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4414,
											"end": 4419,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4445,
											"end": 4451,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4439,
											"end": 4452,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 4430,
											"end": 4452,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4430,
											"end": 4452,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4461,
											"end": 4492,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "118"
										},
										{
											"begin": 4486,
											"end": 4491,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4461,
											"end": 4492,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "58"
										},
										{
											"begin": 4461,
											"end": 4492,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 4461,
											"end": 4492,
											"name": "tag",
											"source": 6,
											"value": "118"
										},
										{
											"begin": 4461,
											"end": 4492,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4359,
											"end": 4498,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 4359,
											"end": 4498,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4359,
											"end": 4498,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4359,
											"end": 4498,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4359,
											"end": 4498,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 4504,
											"end": 4851,
											"name": "tag",
											"source": 6,
											"value": "30"
										},
										{
											"begin": 4504,
											"end": 4851,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4572,
											"end": 4578,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4621,
											"end": 4623,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4609,
											"end": 4618,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4600,
											"end": 4607,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 4596,
											"end": 4619,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 4592,
											"end": 4624,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 4589,
											"end": 4708,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 4589,
											"end": 4708,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "120"
										},
										{
											"begin": 4589,
											"end": 4708,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 4627,
											"end": 4706,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 4627,
											"end": 4706,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "55"
										},
										{
											"begin": 4627,
											"end": 4706,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 4627,
											"end": 4706,
											"name": "tag",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 4627,
											"end": 4706,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4589,
											"end": 4708,
											"name": "tag",
											"source": 6,
											"value": "120"
										},
										{
											"begin": 4589,
											"end": 4708,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4747,
											"end": 4748,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4772,
											"end": 4834,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "122"
										},
										{
											"begin": 4826,
											"end": 4833,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 4817,
											"end": 4823,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4806,
											"end": 4815,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 4802,
											"end": 4824,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4772,
											"end": 4834,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "59"
										},
										{
											"begin": 4772,
											"end": 4834,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 4772,
											"end": 4834,
											"name": "tag",
											"source": 6,
											"value": "122"
										},
										{
											"begin": 4772,
											"end": 4834,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4762,
											"end": 4834,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4762,
											"end": 4834,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4718,
											"end": 4844,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4504,
											"end": 4851,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 4504,
											"end": 4851,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4504,
											"end": 4851,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4504,
											"end": 4851,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4504,
											"end": 4851,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 4857,
											"end": 4953,
											"name": "tag",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 4857,
											"end": 4953,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4894,
											"end": 4901,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4923,
											"end": 4947,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "124"
										},
										{
											"begin": 4941,
											"end": 4946,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4923,
											"end": 4947,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "43"
										},
										{
											"begin": 4923,
											"end": 4947,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 4923,
											"end": 4947,
											"name": "tag",
											"source": 6,
											"value": "124"
										},
										{
											"begin": 4923,
											"end": 4947,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4912,
											"end": 4947,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4912,
											"end": 4947,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4857,
											"end": 4953,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4857,
											"end": 4953,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4857,
											"end": 4953,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4857,
											"end": 4953,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 4959,
											"end": 5077,
											"name": "tag",
											"source": 6,
											"value": "61"
										},
										{
											"begin": 4959,
											"end": 5077,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5046,
											"end": 5070,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "126"
										},
										{
											"begin": 5064,
											"end": 5069,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5046,
											"end": 5070,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 5046,
											"end": 5070,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5046,
											"end": 5070,
											"name": "tag",
											"source": 6,
											"value": "126"
										},
										{
											"begin": 5046,
											"end": 5070,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5041,
											"end": 5044,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5034,
											"end": 5071,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4959,
											"end": 5077,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4959,
											"end": 5077,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4959,
											"end": 5077,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5083,
											"end": 5525,
											"name": "tag",
											"source": 6,
											"value": "34"
										},
										{
											"begin": 5083,
											"end": 5525,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5232,
											"end": 5236,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5270,
											"end": 5272,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 5259,
											"end": 5268,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5255,
											"end": 5273,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5247,
											"end": 5273,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5247,
											"end": 5273,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5283,
											"end": 5354,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "128"
										},
										{
											"begin": 5351,
											"end": 5352,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5340,
											"end": 5349,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5336,
											"end": 5353,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5327,
											"end": 5333,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 5283,
											"end": 5354,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "61"
										},
										{
											"begin": 5283,
											"end": 5354,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5283,
											"end": 5354,
											"name": "tag",
											"source": 6,
											"value": "128"
										},
										{
											"begin": 5283,
											"end": 5354,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5364,
											"end": 5436,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "129"
										},
										{
											"begin": 5432,
											"end": 5434,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5421,
											"end": 5430,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5417,
											"end": 5435,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5408,
											"end": 5414,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 5364,
											"end": 5436,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "61"
										},
										{
											"begin": 5364,
											"end": 5436,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5364,
											"end": 5436,
											"name": "tag",
											"source": 6,
											"value": "129"
										},
										{
											"begin": 5364,
											"end": 5436,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5446,
											"end": 5518,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "130"
										},
										{
											"begin": 5514,
											"end": 5516,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5503,
											"end": 5512,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5499,
											"end": 5517,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5490,
											"end": 5496,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 5446,
											"end": 5518,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "42"
										},
										{
											"begin": 5446,
											"end": 5518,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5446,
											"end": 5518,
											"name": "tag",
											"source": 6,
											"value": "130"
										},
										{
											"begin": 5446,
											"end": 5518,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5083,
											"end": 5525,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": 5083,
											"end": 5525,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 5083,
											"end": 5525,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5083,
											"end": 5525,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5083,
											"end": 5525,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5083,
											"end": 5525,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5083,
											"end": 5525,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5531,
											"end": 5621,
											"name": "tag",
											"source": 6,
											"value": "62"
										},
										{
											"begin": 5531,
											"end": 5621,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5565,
											"end": 5572,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5608,
											"end": 5613,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5601,
											"end": 5614,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 5594,
											"end": 5615,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 5583,
											"end": 5615,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5583,
											"end": 5615,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5531,
											"end": 5621,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5531,
											"end": 5621,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5531,
											"end": 5621,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5531,
											"end": 5621,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5627,
											"end": 5743,
											"name": "tag",
											"source": 6,
											"value": "63"
										},
										{
											"begin": 5627,
											"end": 5743,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5697,
											"end": 5718,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "133"
										},
										{
											"begin": 5712,
											"end": 5717,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5697,
											"end": 5718,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "62"
										},
										{
											"begin": 5697,
											"end": 5718,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5697,
											"end": 5718,
											"name": "tag",
											"source": 6,
											"value": "133"
										},
										{
											"begin": 5697,
											"end": 5718,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5690,
											"end": 5695,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5687,
											"end": 5719,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 5677,
											"end": 5737,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "134"
										},
										{
											"begin": 5677,
											"end": 5737,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 5733,
											"end": 5734,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5730,
											"end": 5731,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5723,
											"end": 5735,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 5677,
											"end": 5737,
											"name": "tag",
											"source": 6,
											"value": "134"
										},
										{
											"begin": 5677,
											"end": 5737,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5627,
											"end": 5743,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5627,
											"end": 5743,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5749,
											"end": 5886,
											"name": "tag",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 5749,
											"end": 5886,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5803,
											"end": 5808,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5834,
											"end": 5840,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5828,
											"end": 5841,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5819,
											"end": 5841,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5819,
											"end": 5841,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5850,
											"end": 5880,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "136"
										},
										{
											"begin": 5874,
											"end": 5879,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5850,
											"end": 5880,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "63"
										},
										{
											"begin": 5850,
											"end": 5880,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5850,
											"end": 5880,
											"name": "tag",
											"source": 6,
											"value": "136"
										},
										{
											"begin": 5850,
											"end": 5880,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5749,
											"end": 5886,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 5749,
											"end": 5886,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5749,
											"end": 5886,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5749,
											"end": 5886,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5749,
											"end": 5886,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5892,
											"end": 6237,
											"name": "tag",
											"source": 6,
											"value": "38"
										},
										{
											"begin": 5892,
											"end": 6237,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5959,
											"end": 5965,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6008,
											"end": 6010,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5996,
											"end": 6005,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5987,
											"end": 5994,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 5983,
											"end": 6006,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 5979,
											"end": 6011,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 5976,
											"end": 6095,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 5976,
											"end": 6095,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "138"
										},
										{
											"begin": 5976,
											"end": 6095,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 6014,
											"end": 6093,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "139"
										},
										{
											"begin": 6014,
											"end": 6093,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "55"
										},
										{
											"begin": 6014,
											"end": 6093,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 6014,
											"end": 6093,
											"name": "tag",
											"source": 6,
											"value": "139"
										},
										{
											"begin": 6014,
											"end": 6093,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5976,
											"end": 6095,
											"name": "tag",
											"source": 6,
											"value": "138"
										},
										{
											"begin": 5976,
											"end": 6095,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6134,
											"end": 6135,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6159,
											"end": 6220,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "140"
										},
										{
											"begin": 6212,
											"end": 6219,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 6203,
											"end": 6209,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6192,
											"end": 6201,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 6188,
											"end": 6210,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6159,
											"end": 6220,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 6159,
											"end": 6220,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 6159,
											"end": 6220,
											"name": "tag",
											"source": 6,
											"value": "140"
										},
										{
											"begin": 6159,
											"end": 6220,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6149,
											"end": 6220,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6149,
											"end": 6220,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6105,
											"end": 6230,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5892,
											"end": 6237,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 5892,
											"end": 6237,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5892,
											"end": 6237,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5892,
											"end": 6237,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5892,
											"end": 6237,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"contracts/SampleTokenSale.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"purchaseACoffe()": "e7e78652",
							"token()": "fc0c546a",
							"tokenPriceInWei()": "2f8de810"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"purchaseACoffe\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPriceInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SampleTokenSale.sol\":\"TokenSale\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x6ef9389a2c07bc40d8a7ba48914724ab2c108fac391ce12314f01321813e6368\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7a5cb39b1e6df68f4dd9a5e76e853d745a74ffb3dfd7df4ae4d2ace6992a171\",\"dweb:/ipfs/QmPbzKR19rdM8X3PLQjsmHRepUKhvoZnedSR63XyGtXZib\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"contracts/SampleTokenSale.sol\":{\"keccak256\":\"0x89cbb8938f9e56711281d8e0e49779670118b27f78458287d199678331975268\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://78981d41687667e5fe04717b14e9408883f72743758d5a7991273f8c77a14e58\",\"dweb:/ipfs/QmPJv6xbB96BSwB5p9Ux4djHtvdfpmMcsvkvHurLxGnc2y\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 791,
								"contract": "contracts/SampleTokenSale.sol:TokenSale",
								"label": "tokenPriceInWei",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							},
							{
								"astId": 794,
								"contract": "contracts/SampleTokenSale.sol:TokenSale",
								"label": "token",
								"offset": 0,
								"slot": "1",
								"type": "t_contract(ERC20)651"
							},
							{
								"astId": 796,
								"contract": "contracts/SampleTokenSale.sol:TokenSale",
								"label": "tokenOwner",
								"offset": 0,
								"slot": "2",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_contract(ERC20)651": {
								"encoding": "inplace",
								"label": "contract ERC20",
								"numberOfBytes": "20"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
					"exportedSymbols": {
						"IERC1155Errors": [
							136
						],
						"IERC20Errors": [
							41
						],
						"IERC721Errors": [
							89
						]
					},
					"id": 137,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "112:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "138:141:0",
								"text": " @dev Standard ERC-20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens."
							},
							"fullyImplemented": true,
							"id": 41,
							"linearizedBaseContracts": [
								41
							],
							"name": "IERC20Errors",
							"nameLocation": "290:12:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "309:309:0",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "e450d38c",
									"id": 11,
									"name": "ERC20InsufficientBalance",
									"nameLocation": "629:24:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 10,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "662:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "654:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "654:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 7,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "678:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "670:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 6,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "670:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 9,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "695:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "687:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 8,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "687:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "653:49:0"
									},
									"src": "623:80:0"
								},
								{
									"documentation": {
										"id": 12,
										"nodeType": "StructuredDocumentation",
										"src": "709:152:0",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "96c6fd1e",
									"id": 16,
									"name": "ERC20InvalidSender",
									"nameLocation": "872:18:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 14,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "899:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 16,
												"src": "891:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "891:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "890:16:0"
									},
									"src": "866:41:0"
								},
								{
									"documentation": {
										"id": 17,
										"nodeType": "StructuredDocumentation",
										"src": "913:159:0",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "ec442f05",
									"id": 21,
									"name": "ERC20InvalidReceiver",
									"nameLocation": "1083:20:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 20,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 19,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "1112:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 21,
												"src": "1104:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 18,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1104:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1103:18:0"
									},
									"src": "1077:45:0"
								},
								{
									"documentation": {
										"id": 22,
										"nodeType": "StructuredDocumentation",
										"src": "1128:345:0",
										"text": " @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "fb8f41b2",
									"id": 30,
									"name": "ERC20InsufficientAllowance",
									"nameLocation": "1484:26:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 29,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 24,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1519:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 30,
												"src": "1511:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 23,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1511:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 26,
												"mutability": "mutable",
												"name": "allowance",
												"nameLocation": "1536:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 30,
												"src": "1528:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 25,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1528:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 28,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "1555:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 30,
												"src": "1547:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 27,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1547:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1510:52:0"
									},
									"src": "1478:85:0"
								},
								{
									"documentation": {
										"id": 31,
										"nodeType": "StructuredDocumentation",
										"src": "1569:174:0",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "e602df05",
									"id": 35,
									"name": "ERC20InvalidApprover",
									"nameLocation": "1754:20:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 34,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 33,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "1783:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 35,
												"src": "1775:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 32,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1775:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1774:18:0"
									},
									"src": "1748:45:0"
								},
								{
									"documentation": {
										"id": 36,
										"nodeType": "StructuredDocumentation",
										"src": "1799:195:0",
										"text": " @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "94280d62",
									"id": 40,
									"name": "ERC20InvalidSpender",
									"nameLocation": "2005:19:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 39,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 38,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2033:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "2025:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 37,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2025:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2024:17:0"
									},
									"src": "1999:43:0"
								}
							],
							"scope": 137,
							"src": "280:1764:0",
							"usedErrors": [
								11,
								16,
								21,
								30,
								35,
								40
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC721Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 42,
								"nodeType": "StructuredDocumentation",
								"src": "2046:143:0",
								"text": " @dev Standard ERC-721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens."
							},
							"fullyImplemented": true,
							"id": 89,
							"linearizedBaseContracts": [
								89
							],
							"name": "IERC721Errors",
							"nameLocation": "2200:13:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 43,
										"nodeType": "StructuredDocumentation",
										"src": "2220:219:0",
										"text": " @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "89c62b64",
									"id": 47,
									"name": "ERC721InvalidOwner",
									"nameLocation": "2450:18:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 46,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 45,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2477:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 47,
												"src": "2469:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 44,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2469:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2468:15:0"
									},
									"src": "2444:40:0"
								},
								{
									"documentation": {
										"id": 48,
										"nodeType": "StructuredDocumentation",
										"src": "2490:132:0",
										"text": " @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "7e273289",
									"id": 52,
									"name": "ERC721NonexistentToken",
									"nameLocation": "2633:22:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 51,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 50,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2664:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 52,
												"src": "2656:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 49,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2656:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2655:17:0"
									},
									"src": "2627:46:0"
								},
								{
									"documentation": {
										"id": 53,
										"nodeType": "StructuredDocumentation",
										"src": "2679:289:0",
										"text": " @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "64283d7b",
									"id": 61,
									"name": "ERC721IncorrectOwner",
									"nameLocation": "2979:20:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 55,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3008:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 61,
												"src": "3000:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 54,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3000:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 57,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3024:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 61,
												"src": "3016:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 56,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3016:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 59,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3041:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 61,
												"src": "3033:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 58,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3033:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2999:48:0"
									},
									"src": "2973:75:0"
								},
								{
									"documentation": {
										"id": 62,
										"nodeType": "StructuredDocumentation",
										"src": "3054:152:0",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "73c6ac6e",
									"id": 66,
									"name": "ERC721InvalidSender",
									"nameLocation": "3217:19:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 65,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 64,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3245:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 66,
												"src": "3237:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 63,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3237:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3236:16:0"
									},
									"src": "3211:42:0"
								},
								{
									"documentation": {
										"id": 67,
										"nodeType": "StructuredDocumentation",
										"src": "3259:159:0",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "64a0ae92",
									"id": 71,
									"name": "ERC721InvalidReceiver",
									"nameLocation": "3429:21:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 70,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 69,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "3459:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 71,
												"src": "3451:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 68,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3451:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3450:18:0"
									},
									"src": "3423:46:0"
								},
								{
									"documentation": {
										"id": 72,
										"nodeType": "StructuredDocumentation",
										"src": "3475:247:0",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "177e802f",
									"id": 78,
									"name": "ERC721InsufficientApproval",
									"nameLocation": "3733:26:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 77,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 74,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "3768:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 78,
												"src": "3760:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 73,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3760:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 76,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3786:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 78,
												"src": "3778:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 75,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3778:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3759:35:0"
									},
									"src": "3727:68:0"
								},
								{
									"documentation": {
										"id": 79,
										"nodeType": "StructuredDocumentation",
										"src": "3801:174:0",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "a9fbf51f",
									"id": 83,
									"name": "ERC721InvalidApprover",
									"nameLocation": "3986:21:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 82,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 81,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "4016:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 83,
												"src": "4008:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 80,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4008:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4007:18:0"
									},
									"src": "3980:46:0"
								},
								{
									"documentation": {
										"id": 84,
										"nodeType": "StructuredDocumentation",
										"src": "4032:197:0",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "5b08ba18",
									"id": 88,
									"name": "ERC721InvalidOperator",
									"nameLocation": "4240:21:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 87,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 86,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4270:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 88,
												"src": "4262:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 85,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4262:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4261:18:0"
									},
									"src": "4234:46:0"
								}
							],
							"scope": 137,
							"src": "2190:2092:0",
							"usedErrors": [
								47,
								52,
								61,
								66,
								71,
								78,
								83,
								88
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC1155Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 90,
								"nodeType": "StructuredDocumentation",
								"src": "4284:145:0",
								"text": " @dev Standard ERC-1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens."
							},
							"fullyImplemented": true,
							"id": 136,
							"linearizedBaseContracts": [
								136
							],
							"name": "IERC1155Errors",
							"nameLocation": "4440:14:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 91,
										"nodeType": "StructuredDocumentation",
										"src": "4461:361:0",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "03dee4c5",
									"id": 101,
									"name": "ERC1155InsufficientBalance",
									"nameLocation": "4833:26:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 93,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "4868:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "4860:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 92,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4860:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 95,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "4884:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "4876:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 94,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4876:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 97,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "4901:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "4893:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 96,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4893:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 99,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4917:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "4909:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 98,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4909:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4859:66:0"
									},
									"src": "4827:99:0"
								},
								{
									"documentation": {
										"id": 102,
										"nodeType": "StructuredDocumentation",
										"src": "4932:152:0",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "01a83514",
									"id": 106,
									"name": "ERC1155InvalidSender",
									"nameLocation": "5095:20:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 105,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 104,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "5124:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 106,
												"src": "5116:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 103,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5116:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5115:16:0"
									},
									"src": "5089:43:0"
								},
								{
									"documentation": {
										"id": 107,
										"nodeType": "StructuredDocumentation",
										"src": "5138:159:0",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "57f447ce",
									"id": 111,
									"name": "ERC1155InvalidReceiver",
									"nameLocation": "5308:22:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 110,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 109,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "5339:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 111,
												"src": "5331:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 108,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5331:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5330:18:0"
									},
									"src": "5302:47:0"
								},
								{
									"documentation": {
										"id": 112,
										"nodeType": "StructuredDocumentation",
										"src": "5355:256:0",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "e237d922",
									"id": 118,
									"name": "ERC1155MissingApprovalForAll",
									"nameLocation": "5622:28:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 117,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 114,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "5659:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 118,
												"src": "5651:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 113,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5651:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 116,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5677:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 118,
												"src": "5669:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 115,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5669:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5650:33:0"
									},
									"src": "5616:68:0"
								},
								{
									"documentation": {
										"id": 119,
										"nodeType": "StructuredDocumentation",
										"src": "5690:174:0",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "3e31884e",
									"id": 123,
									"name": "ERC1155InvalidApprover",
									"nameLocation": "5875:22:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 122,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 121,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "5906:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 123,
												"src": "5898:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 120,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5898:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5897:18:0"
									},
									"src": "5869:47:0"
								},
								{
									"documentation": {
										"id": 124,
										"nodeType": "StructuredDocumentation",
										"src": "5922:197:0",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "ced3e100",
									"id": 128,
									"name": "ERC1155InvalidOperator",
									"nameLocation": "6130:22:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 127,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 126,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "6161:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 128,
												"src": "6153:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 125,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6153:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6152:18:0"
									},
									"src": "6124:47:0"
								},
								{
									"documentation": {
										"id": 129,
										"nodeType": "StructuredDocumentation",
										"src": "6177:280:0",
										"text": " @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"
									},
									"errorSelector": "5b059991",
									"id": 135,
									"name": "ERC1155InvalidArrayLength",
									"nameLocation": "6468:25:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 134,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 131,
												"mutability": "mutable",
												"name": "idsLength",
												"nameLocation": "6502:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 135,
												"src": "6494:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 130,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6494:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 133,
												"mutability": "mutable",
												"name": "valuesLength",
												"nameLocation": "6521:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 135,
												"src": "6513:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 132,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6513:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6493:41:0"
									},
									"src": "6462:73:0"
								}
							],
							"scope": 137,
							"src": "4430:2107:0",
							"usedErrors": [
								101,
								106,
								111,
								118,
								123,
								128,
								135
							],
							"usedEvents": []
						}
					],
					"src": "112:6426:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
					"exportedSymbols": {
						"Context": [
							785
						],
						"ERC20": [
							651
						],
						"IERC20": [
							729
						],
						"IERC20Errors": [
							41
						],
						"IERC20Metadata": [
							755
						]
					},
					"id": 652,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 138,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "105:24:1"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 140,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 652,
							"sourceUnit": 730,
							"src": "131:36:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 139,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 729,
										"src": "139:6:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
							"file": "./extensions/IERC20Metadata.sol",
							"id": 142,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 652,
							"sourceUnit": 756,
							"src": "168:63:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 141,
										"name": "IERC20Metadata",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 755,
										"src": "176:14:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../../utils/Context.sol",
							"id": 144,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 652,
							"sourceUnit": 786,
							"src": "232:48:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 143,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 785,
										"src": "240:7:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
							"file": "../../interfaces/draft-IERC6093.sol",
							"id": 146,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 652,
							"sourceUnit": 137,
							"src": "281:65:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 145,
										"name": "IERC20Errors",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 41,
										"src": "289:12:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 148,
										"name": "Context",
										"nameLocations": [
											"1133:7:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 785,
										"src": "1133:7:1"
									},
									"id": 149,
									"nodeType": "InheritanceSpecifier",
									"src": "1133:7:1"
								},
								{
									"baseName": {
										"id": 150,
										"name": "IERC20",
										"nameLocations": [
											"1142:6:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 729,
										"src": "1142:6:1"
									},
									"id": 151,
									"nodeType": "InheritanceSpecifier",
									"src": "1142:6:1"
								},
								{
									"baseName": {
										"id": 152,
										"name": "IERC20Metadata",
										"nameLocations": [
											"1150:14:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 755,
										"src": "1150:14:1"
									},
									"id": 153,
									"nodeType": "InheritanceSpecifier",
									"src": "1150:14:1"
								},
								{
									"baseName": {
										"id": 154,
										"name": "IERC20Errors",
										"nameLocations": [
											"1166:12:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 41,
										"src": "1166:12:1"
									},
									"id": 155,
									"nodeType": "InheritanceSpecifier",
									"src": "1166:12:1"
								}
							],
							"canonicalName": "ERC20",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 147,
								"nodeType": "StructuredDocumentation",
								"src": "348:757:1",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n The default value of {decimals} is 18. To change this, you should override\n this function so it returns a different value.\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC-20\n applications."
							},
							"fullyImplemented": true,
							"id": 651,
							"linearizedBaseContracts": [
								651,
								41,
								755,
								729,
								785
							],
							"name": "ERC20",
							"nameLocation": "1124:5:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 159,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1229:9:1",
									"nodeType": "VariableDeclaration",
									"scope": 651,
									"src": "1185:53:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 158,
										"keyName": "account",
										"keyNameLocation": "1201:7:1",
										"keyType": {
											"id": 156,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1193:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1185:35:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 157,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1212:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 165,
									"mutability": "mutable",
									"name": "_allowances",
									"nameLocation": "1317:11:1",
									"nodeType": "VariableDeclaration",
									"scope": 651,
									"src": "1245:83:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 164,
										"keyName": "account",
										"keyNameLocation": "1261:7:1",
										"keyType": {
											"id": 160,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1253:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1245:63:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 163,
											"keyName": "spender",
											"keyNameLocation": "1288:7:1",
											"keyType": {
												"id": 161,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1280:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1272:35:1",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueName": "",
											"valueNameLocation": "-1:-1:-1",
											"valueType": {
												"id": 162,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1299:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 167,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nameLocation": "1351:12:1",
									"nodeType": "VariableDeclaration",
									"scope": 651,
									"src": "1335:28:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 166,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1335:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 169,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "1385:5:1",
									"nodeType": "VariableDeclaration",
									"scope": 651,
									"src": "1370:20:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 168,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1370:6:1",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 171,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "1411:7:1",
									"nodeType": "VariableDeclaration",
									"scope": 651,
									"src": "1396:22:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 170,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1396:6:1",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 187,
										"nodeType": "Block",
										"src": "1657:57:1",
										"statements": [
											{
												"expression": {
													"id": 181,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 179,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 169,
														"src": "1667:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 180,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 174,
														"src": "1675:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1667:13:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 182,
												"nodeType": "ExpressionStatement",
												"src": "1667:13:1"
											},
											{
												"expression": {
													"id": 185,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 183,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 171,
														"src": "1690:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 184,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 176,
														"src": "1700:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1690:17:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 186,
												"nodeType": "ExpressionStatement",
												"src": "1690:17:1"
											}
										]
									},
									"documentation": {
										"id": 172,
										"nodeType": "StructuredDocumentation",
										"src": "1425:171:1",
										"text": " @dev Sets the values for {name} and {symbol}.\n All two of these values are immutable: they can only be set once during\n construction."
									},
									"id": 188,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 177,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 174,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "1627:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 188,
												"src": "1613:19:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 173,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1613:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 176,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "1648:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 188,
												"src": "1634:21:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 175,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1634:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1612:44:1"
									},
									"returnParameters": {
										"id": 178,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1657:0:1"
									},
									"scope": 651,
									"src": "1601:113:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										742
									],
									"body": {
										"id": 196,
										"nodeType": "Block",
										"src": "1839:29:1",
										"statements": [
											{
												"expression": {
													"id": 194,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 169,
													"src": "1856:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 193,
												"id": 195,
												"nodeType": "Return",
												"src": "1849:12:1"
											}
										]
									},
									"documentation": {
										"id": 189,
										"nodeType": "StructuredDocumentation",
										"src": "1720:54:1",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 197,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "1788:4:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 190,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1792:2:1"
									},
									"returnParameters": {
										"id": 193,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 192,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 197,
												"src": "1824:13:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 191,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1824:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1823:15:1"
									},
									"scope": 651,
									"src": "1779:89:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										748
									],
									"body": {
										"id": 205,
										"nodeType": "Block",
										"src": "2043:31:1",
										"statements": [
											{
												"expression": {
													"id": 203,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 171,
													"src": "2060:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 202,
												"id": 204,
												"nodeType": "Return",
												"src": "2053:14:1"
											}
										]
									},
									"documentation": {
										"id": 198,
										"nodeType": "StructuredDocumentation",
										"src": "1874:102:1",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 206,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "1990:6:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 199,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1996:2:1"
									},
									"returnParameters": {
										"id": 202,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 201,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 206,
												"src": "2028:13:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 200,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2028:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2027:15:1"
									},
									"scope": 651,
									"src": "1981:93:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										754
									],
									"body": {
										"id": 214,
										"nodeType": "Block",
										"src": "2763:26:1",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 212,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "2780:2:1",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 211,
												"id": 213,
												"nodeType": "Return",
												"src": "2773:9:1"
											}
										]
									},
									"documentation": {
										"id": 207,
										"nodeType": "StructuredDocumentation",
										"src": "2080:622:1",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the default value returned by this function, unless\n it's overridden.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 215,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "2716:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 208,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2724:2:1"
									},
									"returnParameters": {
										"id": 211,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 210,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 215,
												"src": "2756:5:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 209,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "2756:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2755:7:1"
									},
									"scope": 651,
									"src": "2707:82:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										678
									],
									"body": {
										"id": 223,
										"nodeType": "Block",
										"src": "2910:36:1",
										"statements": [
											{
												"expression": {
													"id": 221,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 167,
													"src": "2927:12:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 220,
												"id": 222,
												"nodeType": "Return",
												"src": "2920:19:1"
											}
										]
									},
									"documentation": {
										"id": 216,
										"nodeType": "StructuredDocumentation",
										"src": "2795:49:1",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 224,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "2858:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 217,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2869:2:1"
									},
									"returnParameters": {
										"id": 220,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 219,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 224,
												"src": "2901:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 218,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2901:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2900:9:1"
									},
									"scope": 651,
									"src": "2849:97:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										686
									],
									"body": {
										"id": 236,
										"nodeType": "Block",
										"src": "3078:42:1",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 232,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 159,
														"src": "3095:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 234,
													"indexExpression": {
														"id": 233,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 227,
														"src": "3105:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3095:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 231,
												"id": 235,
												"nodeType": "Return",
												"src": "3088:25:1"
											}
										]
									},
									"documentation": {
										"id": 225,
										"nodeType": "StructuredDocumentation",
										"src": "2952:47:1",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 237,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "3013:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 228,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 227,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3031:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 237,
												"src": "3023:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 226,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3023:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3022:17:1"
									},
									"returnParameters": {
										"id": 231,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 230,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 237,
												"src": "3069:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 229,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3069:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3068:9:1"
									},
									"scope": 651,
									"src": "3004:116:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										696
									],
									"body": {
										"id": 260,
										"nodeType": "Block",
										"src": "3390:103:1",
										"statements": [
											{
												"assignments": [
													248
												],
												"declarations": [
													{
														"constant": false,
														"id": 248,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "3408:5:1",
														"nodeType": "VariableDeclaration",
														"scope": 260,
														"src": "3400:13:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 247,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3400:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 251,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 249,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 767,
														"src": "3416:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 250,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3416:12:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3400:28:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 253,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 248,
															"src": "3448:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 254,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 240,
															"src": "3455:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 255,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 242,
															"src": "3459:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 252,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 381,
														"src": "3438:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 256,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3438:27:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 257,
												"nodeType": "ExpressionStatement",
												"src": "3438:27:1"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 258,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3482:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 246,
												"id": 259,
												"nodeType": "Return",
												"src": "3475:11:1"
											}
										]
									},
									"documentation": {
										"id": 238,
										"nodeType": "StructuredDocumentation",
										"src": "3126:184:1",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `value`."
									},
									"functionSelector": "a9059cbb",
									"id": 261,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "3324:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 243,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 240,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3341:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 261,
												"src": "3333:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 239,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3333:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 242,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3353:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 261,
												"src": "3345:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 241,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3345:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3332:27:1"
									},
									"returnParameters": {
										"id": 246,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 245,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 261,
												"src": "3384:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 244,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3384:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3383:6:1"
									},
									"scope": 651,
									"src": "3315:178:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										706
									],
									"body": {
										"id": 277,
										"nodeType": "Block",
										"src": "3640:51:1",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 271,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 165,
															"src": "3657:11:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 273,
														"indexExpression": {
															"id": 272,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 264,
															"src": "3669:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "3657:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 275,
													"indexExpression": {
														"id": 274,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 266,
														"src": "3676:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3657:27:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 270,
												"id": 276,
												"nodeType": "Return",
												"src": "3650:34:1"
											}
										]
									},
									"documentation": {
										"id": 262,
										"nodeType": "StructuredDocumentation",
										"src": "3499:47:1",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 278,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "3560:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 267,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 264,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3578:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 278,
												"src": "3570:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 263,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3570:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 266,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3593:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 278,
												"src": "3585:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 265,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3585:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3569:32:1"
									},
									"returnParameters": {
										"id": 270,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 269,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 278,
												"src": "3631:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 268,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3631:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3630:9:1"
									},
									"scope": 651,
									"src": "3551:140:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										716
									],
									"body": {
										"id": 301,
										"nodeType": "Block",
										"src": "4077:107:1",
										"statements": [
											{
												"assignments": [
													289
												],
												"declarations": [
													{
														"constant": false,
														"id": 289,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4095:5:1",
														"nodeType": "VariableDeclaration",
														"scope": 301,
														"src": "4087:13:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 288,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4087:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 292,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 290,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 767,
														"src": "4103:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 291,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4103:12:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4087:28:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 294,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 289,
															"src": "4134:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 295,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 281,
															"src": "4141:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 296,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 283,
															"src": "4150:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 293,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															542,
															602
														],
														"referencedDeclaration": 542,
														"src": "4125:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 297,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4125:31:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 298,
												"nodeType": "ExpressionStatement",
												"src": "4125:31:1"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 299,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4173:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 287,
												"id": 300,
												"nodeType": "Return",
												"src": "4166:11:1"
											}
										]
									},
									"documentation": {
										"id": 279,
										"nodeType": "StructuredDocumentation",
										"src": "3697:296:1",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 302,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4007:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 284,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 281,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4023:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 302,
												"src": "4015:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 280,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4015:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 283,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4040:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 302,
												"src": "4032:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 282,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4032:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4014:32:1"
									},
									"returnParameters": {
										"id": 287,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 286,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 302,
												"src": "4071:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 285,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4071:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4070:6:1"
									},
									"scope": 651,
									"src": "3998:186:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										728
									],
									"body": {
										"id": 333,
										"nodeType": "Block",
										"src": "4869:151:1",
										"statements": [
											{
												"assignments": [
													315
												],
												"declarations": [
													{
														"constant": false,
														"id": 315,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "4887:7:1",
														"nodeType": "VariableDeclaration",
														"scope": 333,
														"src": "4879:15:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 314,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4879:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 318,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 316,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 767,
														"src": "4897:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 317,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4897:12:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4879:30:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 320,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 305,
															"src": "4935:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 321,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 315,
															"src": "4941:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 322,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 309,
															"src": "4950:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 319,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 650,
														"src": "4919:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 323,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4919:37:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 324,
												"nodeType": "ExpressionStatement",
												"src": "4919:37:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 326,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 305,
															"src": "4976:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 327,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 307,
															"src": "4982:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 328,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 309,
															"src": "4986:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 325,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 381,
														"src": "4966:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 329,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4966:26:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 330,
												"nodeType": "ExpressionStatement",
												"src": "4966:26:1"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 331,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5009:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 313,
												"id": 332,
												"nodeType": "Return",
												"src": "5002:11:1"
											}
										]
									},
									"documentation": {
										"id": 303,
										"nodeType": "StructuredDocumentation",
										"src": "4190:581:1",
										"text": " @dev See {IERC20-transferFrom}.\n Skips emitting an {Approval} event indicating an allowance update. This is not\n required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `value`.\n - the caller must have allowance for ``from``'s tokens of at least\n `value`."
									},
									"functionSelector": "23b872dd",
									"id": 334,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "4785:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 310,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 305,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "4806:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 334,
												"src": "4798:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 304,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4798:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 307,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4820:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 334,
												"src": "4812:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 306,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4812:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 309,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4832:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 334,
												"src": "4824:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 308,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4824:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4797:41:1"
									},
									"returnParameters": {
										"id": 313,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 312,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 334,
												"src": "4863:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 311,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4863:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4862:6:1"
									},
									"scope": 651,
									"src": "4776:244:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 380,
										"nodeType": "Block",
										"src": "5462:231:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 349,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 344,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 337,
														"src": "5476:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 347,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5492:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 346,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5484:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 345,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5484:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 348,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5484:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5476:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 358,
												"nodeType": "IfStatement",
												"src": "5472:86:1",
												"trueBody": {
													"id": 357,
													"nodeType": "Block",
													"src": "5496:62:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 353,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5544:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 352,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5536:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 351,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5536:7:1",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 354,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5536:10:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 350,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 16,
																	"src": "5517:18:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 355,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5517:30:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 356,
															"nodeType": "RevertStatement",
															"src": "5510:37:1"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 364,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 359,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 339,
														"src": "5571:2:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 362,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5585:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 361,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5577:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 360,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5577:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 363,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5577:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5571:16:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 373,
												"nodeType": "IfStatement",
												"src": "5567:86:1",
												"trueBody": {
													"id": 372,
													"nodeType": "Block",
													"src": "5589:64:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 368,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5639:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 367,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5631:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 366,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5631:7:1",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 369,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5631:10:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 365,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 21,
																	"src": "5610:20:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 370,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5610:32:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 371,
															"nodeType": "RevertStatement",
															"src": "5603:39:1"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 375,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 337,
															"src": "5670:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 376,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 339,
															"src": "5676:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 377,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 341,
															"src": "5680:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 374,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 458,
														"src": "5662:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 378,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5662:24:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 379,
												"nodeType": "ExpressionStatement",
												"src": "5662:24:1"
											}
										]
									},
									"documentation": {
										"id": 335,
										"nodeType": "StructuredDocumentation",
										"src": "5026:362:1",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 381,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "5402:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 342,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 337,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5420:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 381,
												"src": "5412:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 336,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5412:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 339,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5434:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 381,
												"src": "5426:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 338,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5426:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 341,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5446:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 381,
												"src": "5438:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 340,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5438:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5411:41:1"
									},
									"returnParameters": {
										"id": 343,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5462:0:1"
									},
									"scope": 651,
									"src": "5393:300:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 457,
										"nodeType": "Block",
										"src": "6083:1032:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 396,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 391,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 384,
														"src": "6097:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 394,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6113:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 393,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6105:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 392,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6105:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 395,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6105:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6097:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 428,
													"nodeType": "Block",
													"src": "6271:362:1",
													"statements": [
														{
															"assignments": [
																403
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 403,
																	"mutability": "mutable",
																	"name": "fromBalance",
																	"nameLocation": "6293:11:1",
																	"nodeType": "VariableDeclaration",
																	"scope": 428,
																	"src": "6285:19:1",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 402,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "6285:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 407,
															"initialValue": {
																"baseExpression": {
																	"id": 404,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 159,
																	"src": "6307:9:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 406,
																"indexExpression": {
																	"id": 405,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 384,
																	"src": "6317:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "6307:15:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6285:37:1"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 410,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 408,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 403,
																	"src": "6340:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 409,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 388,
																	"src": "6354:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6340:19:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 418,
															"nodeType": "IfStatement",
															"src": "6336:115:1",
															"trueBody": {
																"id": 417,
																"nodeType": "Block",
																"src": "6361:90:1",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 412,
																					"name": "from",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 384,
																					"src": "6411:4:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 413,
																					"name": "fromBalance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 403,
																					"src": "6417:11:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 414,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 388,
																					"src": "6430:5:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 411,
																				"name": "ERC20InsufficientBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 11,
																				"src": "6386:24:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$",
																					"typeString": "function (address,uint256,uint256) pure returns (error)"
																				}
																			},
																			"id": 415,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6386:50:1",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 416,
																		"nodeType": "RevertStatement",
																		"src": "6379:57:1"
																	}
																]
															}
														},
														{
															"id": 427,
															"nodeType": "UncheckedBlock",
															"src": "6464:159:1",
															"statements": [
																{
																	"expression": {
																		"id": 425,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"id": 419,
																				"name": "_balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 159,
																				"src": "6571:9:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 421,
																			"indexExpression": {
																				"id": 420,
																				"name": "from",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 384,
																				"src": "6581:4:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "6571:15:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 424,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 422,
																				"name": "fromBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 403,
																				"src": "6589:11:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 423,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 388,
																				"src": "6603:5:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "6589:19:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "6571:37:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 426,
																	"nodeType": "ExpressionStatement",
																	"src": "6571:37:1"
																}
															]
														}
													]
												},
												"id": 429,
												"nodeType": "IfStatement",
												"src": "6093:540:1",
												"trueBody": {
													"id": 401,
													"nodeType": "Block",
													"src": "6117:148:1",
													"statements": [
														{
															"expression": {
																"id": 399,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 397,
																	"name": "_totalSupply",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 167,
																	"src": "6233:12:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"id": 398,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 388,
																	"src": "6249:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6233:21:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 400,
															"nodeType": "ExpressionStatement",
															"src": "6233:21:1"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 435,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 430,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 386,
														"src": "6647:2:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 433,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6661:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 432,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6653:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 431,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6653:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 434,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6653:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6647:16:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 449,
													"nodeType": "Block",
													"src": "6862:206:1",
													"statements": [
														{
															"id": 448,
															"nodeType": "UncheckedBlock",
															"src": "6876:182:1",
															"statements": [
																{
																	"expression": {
																		"id": 446,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"id": 442,
																				"name": "_balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 159,
																				"src": "7021:9:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 444,
																			"indexExpression": {
																				"id": 443,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 386,
																				"src": "7031:2:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "7021:13:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"id": 445,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 388,
																			"src": "7038:5:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "7021:22:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 447,
																	"nodeType": "ExpressionStatement",
																	"src": "7021:22:1"
																}
															]
														}
													]
												},
												"id": 450,
												"nodeType": "IfStatement",
												"src": "6643:425:1",
												"trueBody": {
													"id": 441,
													"nodeType": "Block",
													"src": "6665:191:1",
													"statements": [
														{
															"id": 440,
															"nodeType": "UncheckedBlock",
															"src": "6679:167:1",
															"statements": [
																{
																	"expression": {
																		"id": 438,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 436,
																			"name": "_totalSupply",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 167,
																			"src": "6810:12:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "-=",
																		"rightHandSide": {
																			"id": 437,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 388,
																			"src": "6826:5:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "6810:21:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 439,
																	"nodeType": "ExpressionStatement",
																	"src": "6810:21:1"
																}
															]
														}
													]
												}
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 452,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 384,
															"src": "7092:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 453,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 386,
															"src": "7098:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 454,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 388,
															"src": "7102:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 451,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 663,
														"src": "7083:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 455,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7083:25:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 456,
												"nodeType": "EmitStatement",
												"src": "7078:30:1"
											}
										]
									},
									"documentation": {
										"id": 382,
										"nodeType": "StructuredDocumentation",
										"src": "5699:304:1",
										"text": " @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n this function.\n Emits a {Transfer} event."
									},
									"id": 458,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_update",
									"nameLocation": "6017:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 389,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 384,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "6033:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 458,
												"src": "6025:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 383,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6025:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 386,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6047:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 458,
												"src": "6039:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 385,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6039:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 388,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6059:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 458,
												"src": "6051:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 387,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6051:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6024:41:1"
									},
									"returnParameters": {
										"id": 390,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6083:0:1"
									},
									"scope": 651,
									"src": "6008:1107:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 490,
										"nodeType": "Block",
										"src": "7514:152:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 471,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 466,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 461,
														"src": "7528:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 469,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7547:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 468,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "7539:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 467,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "7539:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 470,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7539:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "7528:21:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 480,
												"nodeType": "IfStatement",
												"src": "7524:91:1",
												"trueBody": {
													"id": 479,
													"nodeType": "Block",
													"src": "7551:64:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 475,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "7601:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 474,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "7593:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 473,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "7593:7:1",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 476,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7593:10:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 472,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 21,
																	"src": "7572:20:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 477,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7572:32:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 478,
															"nodeType": "RevertStatement",
															"src": "7565:39:1"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 484,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7640:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 483,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "7632:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 482,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "7632:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 485,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7632:10:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 486,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 461,
															"src": "7644:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 487,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 463,
															"src": "7653:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 481,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 458,
														"src": "7624:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 488,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7624:35:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 489,
												"nodeType": "ExpressionStatement",
												"src": "7624:35:1"
											}
										]
									},
									"documentation": {
										"id": 459,
										"nodeType": "StructuredDocumentation",
										"src": "7121:332:1",
										"text": " @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n Relies on the `_update` mechanism\n Emits a {Transfer} event with `from` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 491,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "7467:5:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 464,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 461,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "7481:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 491,
												"src": "7473:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 460,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7473:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 463,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "7498:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 491,
												"src": "7490:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 462,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7490:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7472:32:1"
									},
									"returnParameters": {
										"id": 465,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7514:0:1"
									},
									"scope": 651,
									"src": "7458:208:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 523,
										"nodeType": "Block",
										"src": "8040:150:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 504,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 499,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 494,
														"src": "8054:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 502,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8073:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 501,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "8065:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 500,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "8065:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 503,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8065:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "8054:21:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 513,
												"nodeType": "IfStatement",
												"src": "8050:89:1",
												"trueBody": {
													"id": 512,
													"nodeType": "Block",
													"src": "8077:62:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 508,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "8125:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 507,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "8117:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 506,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "8117:7:1",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 509,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8117:10:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 505,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 16,
																	"src": "8098:18:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 510,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8098:30:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 511,
															"nodeType": "RevertStatement",
															"src": "8091:37:1"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 515,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 494,
															"src": "8156:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 518,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8173:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 517,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8165:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 516,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8165:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 519,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8165:10:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 520,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 496,
															"src": "8177:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 514,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 458,
														"src": "8148:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 521,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8148:35:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 522,
												"nodeType": "ExpressionStatement",
												"src": "8148:35:1"
											}
										]
									},
									"documentation": {
										"id": 492,
										"nodeType": "StructuredDocumentation",
										"src": "7672:307:1",
										"text": " @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n Relies on the `_update` mechanism.\n Emits a {Transfer} event with `to` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead"
									},
									"id": 524,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "7993:5:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 497,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 494,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8007:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 524,
												"src": "7999:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 493,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7999:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 496,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8024:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 524,
												"src": "8016:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 495,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8016:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7998:32:1"
									},
									"returnParameters": {
										"id": 498,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8040:0:1"
									},
									"scope": 651,
									"src": "7984:206:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 541,
										"nodeType": "Block",
										"src": "8800:54:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 535,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 527,
															"src": "8819:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 536,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 529,
															"src": "8826:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 537,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 531,
															"src": "8835:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "74727565",
															"id": 538,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8842:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 534,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															542,
															602
														],
														"referencedDeclaration": 602,
														"src": "8810:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
															"typeString": "function (address,address,uint256,bool)"
														}
													},
													"id": 539,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8810:37:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 540,
												"nodeType": "ExpressionStatement",
												"src": "8810:37:1"
											}
										]
									},
									"documentation": {
										"id": 525,
										"nodeType": "StructuredDocumentation",
										"src": "8196:525:1",
										"text": " @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address.\n Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument."
									},
									"id": 542,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "8735:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 532,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 527,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "8752:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 542,
												"src": "8744:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 526,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8744:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 529,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "8767:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 542,
												"src": "8759:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 528,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8759:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 531,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8784:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 542,
												"src": "8776:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 530,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8776:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8743:47:1"
									},
									"returnParameters": {
										"id": 533,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8800:0:1"
									},
									"scope": 651,
									"src": "8726:128:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 601,
										"nodeType": "Block",
										"src": "9799:334:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 559,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 554,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 545,
														"src": "9813:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 557,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9830:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 556,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "9822:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 555,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "9822:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 558,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9822:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "9813:19:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 568,
												"nodeType": "IfStatement",
												"src": "9809:89:1",
												"trueBody": {
													"id": 567,
													"nodeType": "Block",
													"src": "9834:64:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 563,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "9884:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 562,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "9876:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 561,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "9876:7:1",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 564,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "9876:10:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 560,
																	"name": "ERC20InvalidApprover",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 35,
																	"src": "9855:20:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 565,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9855:32:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 566,
															"nodeType": "RevertStatement",
															"src": "9848:39:1"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 574,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 569,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 547,
														"src": "9911:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 572,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9930:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 571,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "9922:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 570,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "9922:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 573,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9922:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "9911:21:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 583,
												"nodeType": "IfStatement",
												"src": "9907:90:1",
												"trueBody": {
													"id": 582,
													"nodeType": "Block",
													"src": "9934:63:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 578,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "9983:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 577,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "9975:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 576,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "9975:7:1",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 579,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "9975:10:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 575,
																	"name": "ERC20InvalidSpender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 40,
																	"src": "9955:19:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 580,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9955:31:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 581,
															"nodeType": "RevertStatement",
															"src": "9948:38:1"
														}
													]
												}
											},
											{
												"expression": {
													"id": 590,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 584,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 165,
																"src": "10006:11:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 587,
															"indexExpression": {
																"id": 585,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 545,
																"src": "10018:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10006:18:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 588,
														"indexExpression": {
															"id": 586,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 547,
															"src": "10025:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10006:27:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 589,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 549,
														"src": "10036:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10006:35:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 591,
												"nodeType": "ExpressionStatement",
												"src": "10006:35:1"
											},
											{
												"condition": {
													"id": 592,
													"name": "emitEvent",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 551,
													"src": "10055:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 600,
												"nodeType": "IfStatement",
												"src": "10051:76:1",
												"trueBody": {
													"id": 599,
													"nodeType": "Block",
													"src": "10066:61:1",
													"statements": [
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 594,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 545,
																		"src": "10094:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 595,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 547,
																		"src": "10101:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 596,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 549,
																		"src": "10110:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 593,
																	"name": "Approval",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 672,
																	"src": "10085:8:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,uint256)"
																	}
																},
																"id": 597,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10085:31:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 598,
															"nodeType": "EmitStatement",
															"src": "10080:36:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 543,
										"nodeType": "StructuredDocumentation",
										"src": "8860:836:1",
										"text": " @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n `Approval` event during `transferFrom` operations.\n Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n true using the following override:\n ```solidity\n function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     super._approve(owner, spender, value, true);\n }\n ```\n Requirements are the same as {_approve}."
									},
									"id": 602,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "9710:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 552,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 545,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "9727:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 602,
												"src": "9719:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 544,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9719:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 547,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "9742:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 602,
												"src": "9734:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 546,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9734:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 549,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9759:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 602,
												"src": "9751:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 548,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9751:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 551,
												"mutability": "mutable",
												"name": "emitEvent",
												"nameLocation": "9771:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 602,
												"src": "9766:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 550,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "9766:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9718:63:1"
									},
									"returnParameters": {
										"id": 553,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9799:0:1"
									},
									"scope": 651,
									"src": "9701:432:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 649,
										"nodeType": "Block",
										"src": "10504:387:1",
										"statements": [
											{
												"assignments": [
													613
												],
												"declarations": [
													{
														"constant": false,
														"id": 613,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "10522:16:1",
														"nodeType": "VariableDeclaration",
														"scope": 649,
														"src": "10514:24:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 612,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10514:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 618,
												"initialValue": {
													"arguments": [
														{
															"id": 615,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 605,
															"src": "10551:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 616,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 607,
															"src": "10558:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 614,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 278,
														"src": "10541:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 617,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10541:25:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10514:52:1"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 625,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 619,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 613,
														"src": "10580:16:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 622,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10604:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 621,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "10604:7:1",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 620,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "10599:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 623,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10599:13:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 624,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "10613:3:1",
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "10599:17:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10580:36:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 648,
												"nodeType": "IfStatement",
												"src": "10576:309:1",
												"trueBody": {
													"id": 647,
													"nodeType": "Block",
													"src": "10618:267:1",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 628,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 626,
																	"name": "currentAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 613,
																	"src": "10636:16:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 627,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 609,
																	"src": "10655:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10636:24:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 636,
															"nodeType": "IfStatement",
															"src": "10632:130:1",
															"trueBody": {
																"id": 635,
																"nodeType": "Block",
																"src": "10662:100:1",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 630,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 607,
																					"src": "10714:7:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 631,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 613,
																					"src": "10723:16:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 632,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 609,
																					"src": "10741:5:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 629,
																				"name": "ERC20InsufficientAllowance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 30,
																				"src": "10687:26:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$",
																					"typeString": "function (address,uint256,uint256) pure returns (error)"
																				}
																			},
																			"id": 633,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "10687:60:1",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 634,
																		"nodeType": "RevertStatement",
																		"src": "10680:67:1"
																	}
																]
															}
														},
														{
															"id": 646,
															"nodeType": "UncheckedBlock",
															"src": "10775:100:1",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 638,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 605,
																				"src": "10812:5:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 639,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 607,
																				"src": "10819:7:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 642,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 640,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 613,
																					"src": "10828:16:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 641,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 609,
																					"src": "10847:5:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10828:24:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"hexValue": "66616c7365",
																				"id": 643,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "bool",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10854:5:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				},
																				"value": "false"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			],
																			"id": 637,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [
																				542,
																				602
																			],
																			"referencedDeclaration": 602,
																			"src": "10803:8:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
																				"typeString": "function (address,address,uint256,bool)"
																			}
																		},
																		"id": 644,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10803:57:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 645,
																	"nodeType": "ExpressionStatement",
																	"src": "10803:57:1"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 603,
										"nodeType": "StructuredDocumentation",
										"src": "10139:271:1",
										"text": " @dev Updates `owner` s allowance for `spender` based on spent `value`.\n Does not update the allowance value in case of infinite allowance.\n Revert if not enough allowance is available.\n Does not emit an {Approval} event."
									},
									"id": 650,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "10424:15:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 610,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 605,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10448:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 650,
												"src": "10440:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 604,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10440:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 607,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10463:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 650,
												"src": "10455:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 606,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10455:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 609,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10480:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 650,
												"src": "10472:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 608,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10472:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10439:47:1"
									},
									"returnParameters": {
										"id": 611,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10504:0:1"
									},
									"scope": 651,
									"src": "10415:476:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 652,
							"src": "1106:9787:1",
							"usedErrors": [
								11,
								16,
								21,
								30,
								35,
								40
							],
							"usedEvents": [
								663,
								672
							]
						}
					],
					"src": "105:10789:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							729
						]
					},
					"id": 730,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 653,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "106:24:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 654,
								"nodeType": "StructuredDocumentation",
								"src": "132:71:2",
								"text": " @dev Interface of the ERC-20 standard as defined in the ERC."
							},
							"fullyImplemented": false,
							"id": 729,
							"linearizedBaseContracts": [
								729
							],
							"name": "IERC20",
							"nameLocation": "214:6:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 655,
										"nodeType": "StructuredDocumentation",
										"src": "227:158:2",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 663,
									"name": "Transfer",
									"nameLocation": "396:8:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 662,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 657,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "421:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 663,
												"src": "405:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 656,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "405:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 659,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "443:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 663,
												"src": "427:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 658,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "427:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 661,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "455:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 663,
												"src": "447:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 660,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "447:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "404:57:2"
									},
									"src": "390:72:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 664,
										"nodeType": "StructuredDocumentation",
										"src": "468:148:2",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 672,
									"name": "Approval",
									"nameLocation": "627:8:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 671,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 666,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "652:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 672,
												"src": "636:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 665,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "636:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 668,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "675:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 672,
												"src": "659:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 667,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "659:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 670,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "692:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 672,
												"src": "684:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 669,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "684:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "635:63:2"
									},
									"src": "621:78:2"
								},
								{
									"documentation": {
										"id": 673,
										"nodeType": "StructuredDocumentation",
										"src": "705:65:2",
										"text": " @dev Returns the value of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 678,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "784:11:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 674,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "795:2:2"
									},
									"returnParameters": {
										"id": 677,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 676,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 678,
												"src": "821:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 675,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "821:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "820:9:2"
									},
									"scope": 729,
									"src": "775:55:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 679,
										"nodeType": "StructuredDocumentation",
										"src": "836:71:2",
										"text": " @dev Returns the value of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 686,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "921:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 682,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 681,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "939:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 686,
												"src": "931:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 680,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "931:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "930:17:2"
									},
									"returnParameters": {
										"id": 685,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 684,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 686,
												"src": "971:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 683,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "971:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "970:9:2"
									},
									"scope": 729,
									"src": "912:68:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 687,
										"nodeType": "StructuredDocumentation",
										"src": "986:213:2",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 696,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1213:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 692,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 689,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1230:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 696,
												"src": "1222:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 688,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1222:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 691,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1242:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 696,
												"src": "1234:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 690,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1234:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1221:27:2"
									},
									"returnParameters": {
										"id": 695,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 694,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 696,
												"src": "1267:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 693,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1267:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1266:6:2"
									},
									"scope": 729,
									"src": "1204:69:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 697,
										"nodeType": "StructuredDocumentation",
										"src": "1279:264:2",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 706,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1557:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 702,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 699,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1575:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 706,
												"src": "1567:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 698,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1567:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 701,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1590:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 706,
												"src": "1582:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 700,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1582:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1566:32:2"
									},
									"returnParameters": {
										"id": 705,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 704,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 706,
												"src": "1622:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 703,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1622:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1621:9:2"
									},
									"scope": 729,
									"src": "1548:83:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 707,
										"nodeType": "StructuredDocumentation",
										"src": "1637:667:2",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 716,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2318:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 712,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 709,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2334:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 716,
												"src": "2326:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 708,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2326:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 711,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2351:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 716,
												"src": "2343:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 710,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2343:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2325:32:2"
									},
									"returnParameters": {
										"id": 715,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 714,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 716,
												"src": "2376:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 713,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2376:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2375:6:2"
									},
									"scope": 729,
									"src": "2309:73:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 717,
										"nodeType": "StructuredDocumentation",
										"src": "2388:297:2",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 728,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2699:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 724,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 719,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2720:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 728,
												"src": "2712:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 718,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2712:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 721,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2734:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 728,
												"src": "2726:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 720,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2726:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 723,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2746:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 728,
												"src": "2738:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 722,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2738:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2711:41:2"
									},
									"returnParameters": {
										"id": 727,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 726,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 728,
												"src": "2771:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 725,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2771:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2770:6:2"
									},
									"scope": 729,
									"src": "2690:87:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 730,
							"src": "204:2575:2",
							"usedErrors": [],
							"usedEvents": [
								663,
								672
							]
						}
					],
					"src": "106:2674:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
					"exportedSymbols": {
						"IERC20": [
							729
						],
						"IERC20Metadata": [
							755
						]
					},
					"id": 756,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 731,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "125:24:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 733,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 756,
							"sourceUnit": 730,
							"src": "151:37:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 732,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 729,
										"src": "159:6:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 735,
										"name": "IERC20",
										"nameLocations": [
											"306:6:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 729,
										"src": "306:6:3"
									},
									"id": 736,
									"nodeType": "InheritanceSpecifier",
									"src": "306:6:3"
								}
							],
							"canonicalName": "IERC20Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 734,
								"nodeType": "StructuredDocumentation",
								"src": "190:87:3",
								"text": " @dev Interface for the optional metadata functions from the ERC-20 standard."
							},
							"fullyImplemented": false,
							"id": 755,
							"linearizedBaseContracts": [
								755,
								729
							],
							"name": "IERC20Metadata",
							"nameLocation": "288:14:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 737,
										"nodeType": "StructuredDocumentation",
										"src": "319:54:3",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 742,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "387:4:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 738,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "391:2:3"
									},
									"returnParameters": {
										"id": 741,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 740,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 742,
												"src": "417:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 739,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "417:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "416:15:3"
									},
									"scope": 755,
									"src": "378:54:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 743,
										"nodeType": "StructuredDocumentation",
										"src": "438:56:3",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 748,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "508:6:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 744,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "514:2:3"
									},
									"returnParameters": {
										"id": 747,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 746,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 748,
												"src": "540:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 745,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "540:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "539:15:3"
									},
									"scope": 755,
									"src": "499:56:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 749,
										"nodeType": "StructuredDocumentation",
										"src": "561:65:3",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 754,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "640:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 750,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "648:2:3"
									},
									"returnParameters": {
										"id": 753,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 752,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 754,
												"src": "674:5:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 751,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "674:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "673:7:3"
									},
									"scope": 755,
									"src": "631:50:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 756,
							"src": "278:405:3",
							"usedErrors": [],
							"usedEvents": [
								663,
								672
							]
						}
					],
					"src": "125:559:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							785
						]
					},
					"id": 786,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 757,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:4"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 758,
								"nodeType": "StructuredDocumentation",
								"src": "127:496:4",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 785,
							"linearizedBaseContracts": [
								785
							],
							"name": "Context",
							"nameLocation": "642:7:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 766,
										"nodeType": "Block",
										"src": "718:34:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 763,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "735:3:4",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 764,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "739:6:4",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "735:10:4",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 762,
												"id": 765,
												"nodeType": "Return",
												"src": "728:17:4"
											}
										]
									},
									"id": 767,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "665:10:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 759,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "675:2:4"
									},
									"returnParameters": {
										"id": 762,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 761,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 767,
												"src": "709:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 760,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "709:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "708:9:4"
									},
									"scope": 785,
									"src": "656:96:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 775,
										"nodeType": "Block",
										"src": "825:32:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 772,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "842:3:4",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 773,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "846:4:4",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "842:8:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 771,
												"id": 774,
												"nodeType": "Return",
												"src": "835:15:4"
											}
										]
									},
									"id": 776,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "767:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 768,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "775:2:4"
									},
									"returnParameters": {
										"id": 771,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 770,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 776,
												"src": "809:14:4",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 769,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "809:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "808:16:4"
									},
									"scope": 785,
									"src": "758:99:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 783,
										"nodeType": "Block",
										"src": "935:25:4",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 781,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "952:1:4",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 780,
												"id": 782,
												"nodeType": "Return",
												"src": "945:8:4"
											}
										]
									},
									"id": 784,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contextSuffixLength",
									"nameLocation": "872:20:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 777,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "892:2:4"
									},
									"returnParameters": {
										"id": 780,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 779,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 784,
												"src": "926:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 778,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "926:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "925:9:4"
									},
									"scope": 785,
									"src": "863:97:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 786,
							"src": "624:338:4",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "101:862:4"
				},
				"id": 4
			},
			"contracts/SampleTokenSale.sol": {
				"ast": {
					"absolutePath": "contracts/SampleTokenSale.sol",
					"exportedSymbols": {
						"Context": [
							785
						],
						"ERC20": [
							651
						],
						"IERC20": [
							729
						],
						"IERC20Errors": [
							41
						],
						"IERC20Metadata": [
							755
						],
						"TokenSale": [
							866
						]
					},
					"id": 867,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 787,
							"literals": [
								"solidity",
								"0.8",
								".26"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:5"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"id": 788,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 867,
							"sourceUnit": 652,
							"src": "60:55:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "TokenSale",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 866,
							"linearizedBaseContracts": [
								866
							],
							"name": "TokenSale",
							"nameLocation": "128:9:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"functionSelector": "2f8de810",
									"id": 791,
									"mutability": "mutable",
									"name": "tokenPriceInWei",
									"nameLocation": "158:15:5",
									"nodeType": "VariableDeclaration",
									"scope": 866,
									"src": "146:37:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 789,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "146:4:5",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 790,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "176:7:5",
										"subdenomination": "ether",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1000000000000000000_by_1",
											"typeString": "int_const 1000000000000000000"
										},
										"value": "1"
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "fc0c546a",
									"id": 794,
									"mutability": "mutable",
									"name": "token",
									"nameLocation": "203:5:5",
									"nodeType": "VariableDeclaration",
									"scope": 866,
									"src": "190:18:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_ERC20_$651",
										"typeString": "contract ERC20"
									},
									"typeName": {
										"id": 793,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 792,
											"name": "ERC20",
											"nameLocations": [
												"190:5:5"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 651,
											"src": "190:5:5"
										},
										"referencedDeclaration": 651,
										"src": "190:5:5",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ERC20_$651",
											"typeString": "contract ERC20"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 796,
									"mutability": "mutable",
									"name": "tokenOwner",
									"nameLocation": "225:10:5",
									"nodeType": "VariableDeclaration",
									"scope": 866,
									"src": "217:18:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 795,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "217:7:5",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 812,
										"nodeType": "Block",
										"src": "271:74:5",
										"statements": [
											{
												"expression": {
													"id": 804,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 801,
														"name": "tokenOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 796,
														"src": "282:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 802,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "295:3:5",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 803,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "299:6:5",
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "295:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "282:23:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 805,
												"nodeType": "ExpressionStatement",
												"src": "282:23:5"
											},
											{
												"expression": {
													"id": 810,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 806,
														"name": "token",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 794,
														"src": "316:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ERC20_$651",
															"typeString": "contract ERC20"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 808,
																"name": "_token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 798,
																"src": "330:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 807,
															"name": "ERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 651,
															"src": "324:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ERC20_$651_$",
																"typeString": "type(contract ERC20)"
															}
														},
														"id": 809,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "324:13:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ERC20_$651",
															"typeString": "contract ERC20"
														}
													},
													"src": "316:21:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ERC20_$651",
														"typeString": "contract ERC20"
													}
												},
												"id": 811,
												"nodeType": "ExpressionStatement",
												"src": "316:21:5"
											}
										]
									},
									"id": 813,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 799,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 798,
												"mutability": "mutable",
												"name": "_token",
												"nameLocation": "264:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 813,
												"src": "256:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 797,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "256:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "255:16:5"
									},
									"returnParameters": {
										"id": 800,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "271:0:5"
									},
									"scope": 866,
									"src": "244:101:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 864,
										"nodeType": "Block",
										"src": "393:398:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 820,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 817,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "412:3:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 818,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "416:5:5",
																"memberName": "value",
																"nodeType": "MemberAccess",
																"src": "412:9:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 819,
																"name": "tokenPriceInWei",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 791,
																"src": "425:15:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "412:28:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "596f7520646f206e6f74206861766520656e6f756768206574682e",
															"id": 821,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "442:29:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_4bcb9c905bf13979cd031d103f2aded1e212b50c9aadd57365e985f35a025788",
																"typeString": "literal_string \"You do not have enough eth.\""
															},
															"value": "You do not have enough eth."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_4bcb9c905bf13979cd031d103f2aded1e212b50c9aadd57365e985f35a025788",
																"typeString": "literal_string \"You do not have enough eth.\""
															}
														],
														"id": 816,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "404:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 822,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "404:68:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 823,
												"nodeType": "ExpressionStatement",
												"src": "404:68:5"
											},
											{
												"assignments": [
													825
												],
												"declarations": [
													{
														"constant": false,
														"id": 825,
														"mutability": "mutable",
														"name": "tokenToTransfer",
														"nameLocation": "488:15:5",
														"nodeType": "VariableDeclaration",
														"scope": 864,
														"src": "483:20:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 824,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "483:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 830,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 829,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 826,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "506:3:5",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 827,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "510:5:5",
														"memberName": "value",
														"nodeType": "MemberAccess",
														"src": "506:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 828,
														"name": "tokenPriceInWei",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 791,
														"src": "518:15:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "506:27:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "483:50:5"
											},
											{
												"assignments": [
													832
												],
												"declarations": [
													{
														"constant": false,
														"id": 832,
														"mutability": "mutable",
														"name": "remainder",
														"nameLocation": "549:9:5",
														"nodeType": "VariableDeclaration",
														"scope": 864,
														"src": "544:14:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 831,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "544:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 839,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 838,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 833,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "561:3:5",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 834,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "565:5:5",
														"memberName": "value",
														"nodeType": "MemberAccess",
														"src": "561:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 837,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 835,
															"name": "tokenToTransfer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 825,
															"src": "573:15:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "*",
														"rightExpression": {
															"id": 836,
															"name": "tokenPriceInWei",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 791,
															"src": "591:15:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "573:33:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "561:45:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "544:62:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 843,
															"name": "tokenOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 796,
															"src": "636:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 844,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "648:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 845,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "652:6:5",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "648:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 852,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 848,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 846,
																	"name": "tokenToTransfer",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 825,
																	"src": "660:15:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"hexValue": "3130",
																	"id": 847,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "678:2:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"src": "660:20:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"id": 849,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 794,
																		"src": "683:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_ERC20_$651",
																			"typeString": "contract ERC20"
																		}
																	},
																	"id": 850,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "689:8:5",
																	"memberName": "decimals",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 215,
																	"src": "683:14:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$__$returns$_t_uint8_$",
																		"typeString": "function () view external returns (uint8)"
																	}
																},
																"id": 851,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "683:16:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "660:39:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 840,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 794,
															"src": "617:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ERC20_$651",
																"typeString": "contract ERC20"
															}
														},
														"id": 842,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "623:12:5",
														"memberName": "transferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 334,
														"src": "617:18:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,address,uint256) external returns (bool)"
														}
													},
													"id": 853,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "617:83:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 854,
												"nodeType": "ExpressionStatement",
												"src": "617:83:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 861,
															"name": "remainder",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 832,
															"src": "740:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"expression": {
																		"id": 857,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "719:3:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 858,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "723:6:5",
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "719:10:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 856,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "711:8:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_payable_$",
																	"typeString": "type(address payable)"
																},
																"typeName": {
																	"id": 855,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "711:8:5",
																	"stateMutability": "payable",
																	"typeDescriptions": {}
																}
															},
															"id": 859,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "711:19:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"id": 860,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "731:8:5",
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"src": "711:28:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 862,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "711:39:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 863,
												"nodeType": "ExpressionStatement",
												"src": "711:39:5"
											}
										]
									},
									"functionSelector": "e7e78652",
									"id": 865,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "purchaseACoffe",
									"nameLocation": "362:14:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 814,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "376:2:5"
									},
									"returnParameters": {
										"id": 815,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "393:0:5"
									},
									"scope": 866,
									"src": "353:438:5",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 867,
							"src": "119:679:5",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "33:765:5"
				},
				"id": 5
			}
		}
	}
}